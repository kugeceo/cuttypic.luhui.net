var Qm=Object.defineProperty;var Ym=(Pt,Se,R)=>Se in Pt?Qm(Pt,Se,{enumerable:!0,configurable:!0,writable:!0,value:R}):Pt[Se]=R;var xe=(Pt,Se,R)=>Ym(Pt,typeof Se!="symbol"?Se+"":Se,R);var Gc={},ff={"./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm":(Pt,Se,R)=>{Pt.exports=R.p+"ort-wasm-simd-threaded.jsep.wasm"},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{Environment:()=>He,Interpreter:()=>ct,Template:()=>Et,parse:()=>Ce,tokenize:()=>I});var z=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro"}),fe=Object.freeze({set:z.Set,for:z.For,in:z.In,is:z.Is,if:z.If,else:z.Else,endif:z.EndIf,elif:z.ElseIf,endfor:z.EndFor,and:z.And,or:z.Or,not:z.Not,"not in":z.NotIn,macro:z.Macro,endmacro:z.EndMacro,true:z.BooleanLiteral,false:z.BooleanLiteral,True:z.BooleanLiteral,False:z.BooleanLiteral}),Me=class{constructor(x,G){this.value=x,this.type=G}};function $e(x){return/\w/.test(x)}function Te(x){return/[0-9]/.test(x)}var N=[["{%",z.OpenStatement],["%}",z.CloseStatement],["{{",z.OpenExpression],["}}",z.CloseExpression],["(",z.OpenParen],[")",z.CloseParen],["{",z.OpenCurlyBracket],["}",z.CloseCurlyBracket],["[",z.OpenSquareBracket],["]",z.CloseSquareBracket],[",",z.Comma],[".",z.Dot],[":",z.Colon],["|",z.Pipe],["<=",z.ComparisonBinaryOperator],[">=",z.ComparisonBinaryOperator],["==",z.ComparisonBinaryOperator],["!=",z.ComparisonBinaryOperator],["<",z.ComparisonBinaryOperator],[">",z.ComparisonBinaryOperator],["+",z.AdditiveBinaryOperator],["-",z.AdditiveBinaryOperator],["*",z.MultiplicativeBinaryOperator],["/",z.MultiplicativeBinaryOperator],["%",z.MultiplicativeBinaryOperator],["=",z.Equals]],$=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function V(x,G={}){return x.endsWith(`
`)&&(x=x.slice(0,-1)),x=x.replace(/{#.*?#}/gs,"{##}"),G.lstrip_blocks&&(x=x.replace(/^[ \t]*({[#%])/gm,"$1")),G.trim_blocks&&(x=x.replace(/([#%]})\n/g,"$1")),x.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}function I(x,G={}){const C=[],Y=V(x,G);let ce=0;const Je=Ke=>{let xt="";for(;Ke(Y[ce]);){if(Y[ce]==="\\"){if(++ce,ce>=Y.length)throw new SyntaxError("Unexpected end of input");const Qe=Y[ce++],_t=$.get(Qe);if(_t===void 0)throw new SyntaxError(`Unexpected escaped character: ${Qe}`);xt+=_t;continue}if(xt+=Y[ce++],ce>=Y.length)throw new SyntaxError("Unexpected end of input")}return xt};e:for(;ce<Y.length;){const Ke=C.at(-1)?.type;if(Ke===void 0||Ke===z.CloseStatement||Ke===z.CloseExpression){let Qe="";for(;ce<Y.length&&!(Y[ce]==="{"&&(Y[ce+1]==="%"||Y[ce+1]==="{"));)Qe+=Y[ce++];if(Qe.length>0){C.push(new Me(Qe,z.Text));continue}}Je(Qe=>/\s/.test(Qe));const xt=Y[ce];if(xt==="-"||xt==="+"){const Qe=C.at(-1)?.type;if(Qe===z.Text||Qe===void 0)throw new SyntaxError(`Unexpected character: ${xt}`);switch(Qe){case z.Identifier:case z.NumericLiteral:case z.BooleanLiteral:case z.StringLiteral:case z.CloseParen:case z.CloseSquareBracket:break;default:{++ce;const _t=Je(Te);C.push(new Me(`${xt}${_t}`,_t.length>0?z.NumericLiteral:z.UnaryOperator));continue}}}for(const[Qe,_t]of N)if(Y.slice(ce,ce+Qe.length)===Qe){C.push(new Me(Qe,_t)),ce+=Qe.length;continue e}if(xt==="'"||xt==='"'){++ce;const Qe=Je(_t=>_t!==xt);C.push(new Me(Qe,z.StringLiteral)),++ce;continue}if(Te(xt)){const Qe=Je(Te);C.push(new Me(Qe,z.NumericLiteral));continue}if($e(xt)){const Qe=Je($e),_t=Object.hasOwn(fe,Qe)?fe[Qe]:z.Identifier;_t===z.In&&C.at(-1)?.type===z.Not?(C.pop(),C.push(new Me("not in",z.NotIn))):C.push(new Me(Qe,_t));continue}throw new SyntaxError(`Unexpected character: ${xt}`)}return C}var Z=class{constructor(){xe(this,"type","Statement")}},se=class extends Z{constructor(G){super();xe(this,"type","Program");this.body=G}},le=class extends Z{constructor(G,C,Y){super();xe(this,"type","If");this.test=G,this.body=C,this.alternate=Y}},me=class extends Z{constructor(G,C,Y,ce){super();xe(this,"type","For");this.loopvar=G,this.iterable=C,this.body=Y,this.defaultBlock=ce}},B=class extends Z{constructor(G,C){super();xe(this,"type","Set");this.assignee=G,this.value=C}},J=class extends Z{constructor(G,C,Y){super();xe(this,"type","Macro");this.name=G,this.args=C,this.body=Y}},ne=class extends Z{constructor(){super(...arguments);xe(this,"type","Expression")}},ae=class extends ne{constructor(G,C,Y){super();xe(this,"type","MemberExpression");this.object=G,this.property=C,this.computed=Y}},X=class extends ne{constructor(G,C){super();xe(this,"type","CallExpression");this.callee=G,this.args=C}},L=class extends ne{constructor(G){super();xe(this,"type","Identifier");this.value=G}},A=class extends ne{constructor(G){super();xe(this,"type","Literal");this.value=G}},D=class extends A{constructor(){super(...arguments);xe(this,"type","NumericLiteral")}},k=class extends A{constructor(){super(...arguments);xe(this,"type","StringLiteral")}},de=class extends A{constructor(){super(...arguments);xe(this,"type","BooleanLiteral")}},ve=class extends A{constructor(){super(...arguments);xe(this,"type","ArrayLiteral")}},Ee=class extends A{constructor(){super(...arguments);xe(this,"type","TupleLiteral")}},Ie=class extends A{constructor(){super(...arguments);xe(this,"type","ObjectLiteral")}},Ae=class extends ne{constructor(G,C,Y){super();xe(this,"type","BinaryExpression");this.operator=G,this.left=C,this.right=Y}},tt=class extends ne{constructor(G,C){super();xe(this,"type","FilterExpression");this.operand=G,this.filter=C}},Ye=class extends ne{constructor(G,C){super();xe(this,"type","SelectExpression");this.iterable=G,this.test=C}},pt=class extends ne{constructor(G,C,Y){super();xe(this,"type","TestExpression");this.operand=G,this.negate=C,this.test=Y}},_e=class extends ne{constructor(G,C){super();xe(this,"type","UnaryExpression");this.operator=G,this.argument=C}},U=class extends ne{constructor(G=void 0,C=void 0,Y=void 0){super();xe(this,"type","SliceExpression");this.start=G,this.stop=C,this.step=Y}},ue=class extends ne{constructor(G,C){super();xe(this,"type","KeywordArgumentExpression");this.key=G,this.value=C}};function Ce(x){const G=new se([]);let C=0;function Y(be,et){const ot=x[C++];if(!ot||ot.type!==be)throw new Error(`Parser Error: ${et}. ${ot.type} !== ${be}.`);return ot}function ce(){switch(x[C].type){case z.Text:return xt();case z.OpenStatement:return Qe();case z.OpenExpression:return _t();default:throw new SyntaxError(`Unexpected token type: ${x[C].type}`)}}function Je(...be){return C+be.length<=x.length&&be.some((et,ot)=>et!==x[C+ot].type)}function Ke(...be){return C+be.length<=x.length&&be.every((et,ot)=>et===x[C+ot].type)}function xt(){return new k(Y(z.Text,"Expected text token").value)}function Qe(){Y(z.OpenStatement,"Expected opening statement token");let be;switch(x[C].type){case z.Set:++C,be=Bt(),Y(z.CloseStatement,"Expected closing statement token");break;case z.If:++C,be=tr(),Y(z.OpenStatement,"Expected {% token"),Y(z.EndIf,"Expected endif token"),Y(z.CloseStatement,"Expected %} token");break;case z.Macro:++C,be=jr(),Y(z.OpenStatement,"Expected {% token"),Y(z.EndMacro,"Expected endmacro token"),Y(z.CloseStatement,"Expected %} token");break;case z.For:++C,be=Zr(),Y(z.OpenStatement,"Expected {% token"),Y(z.EndFor,"Expected endfor token"),Y(z.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${x[C].type}`)}return be}function _t(){Y(z.OpenExpression,"Expected opening expression token");const be=Dr();return Y(z.CloseExpression,"Expected closing expression token"),be}function Bt(){const be=Dr();if(Ke(z.Equals)){++C;const et=Bt();return new B(be,et)}return be}function tr(){const be=Dr();Y(z.CloseStatement,"Expected closing statement token");const et=[],ot=[];for(;!(x[C]?.type===z.OpenStatement&&(x[C+1]?.type===z.ElseIf||x[C+1]?.type===z.Else||x[C+1]?.type===z.EndIf));)et.push(ce());if(x[C]?.type===z.OpenStatement&&x[C+1]?.type!==z.EndIf)if(++C,Ke(z.ElseIf))Y(z.ElseIf,"Expected elseif token"),ot.push(tr());else for(Y(z.Else,"Expected else token"),Y(z.CloseStatement,"Expected closing statement token");!(x[C]?.type===z.OpenStatement&&x[C+1]?.type===z.EndIf);)ot.push(ce());return new le(be,et,ot)}function jr(){const be=Ut();if(be.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const et=gt();Y(z.CloseStatement,"Expected closing statement token");const ot=[];for(;Je(z.OpenStatement,z.EndMacro);)ot.push(ce());return new J(be,et,ot)}function Cr(be=!1){const et=be?Ut:Dr,ot=[et()],Ht=Ke(z.Comma);for(;Ht&&(++C,ot.push(et()),!!Ke(z.Comma)););return Ht?new Ee(ot):ot[0]}function Zr(){const be=Cr(!0);if(!(be instanceof L||be instanceof Ee))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${be.type} instead`);Y(z.In,"Expected `in` keyword following loop variable");const et=Dr();Y(z.CloseStatement,"Expected closing statement token");const ot=[];for(;Je(z.OpenStatement,z.EndFor)&&Je(z.OpenStatement,z.Else);)ot.push(ce());const Ht=[];if(Ke(z.OpenStatement,z.Else))for(++C,++C,Y(z.CloseStatement,"Expected closing statement token");Je(z.OpenStatement,z.EndFor);)Ht.push(ce());return new me(be,et,ot,Ht)}function Dr(){return qr()}function qr(){const be=lt();if(Ke(z.If)){++C;const et=lt();if(Ke(z.Else)){++C;const ot=lt();return new le(et,[be],[ot])}else return new Ye(be,et)}return be}function lt(){let be=j();for(;Ke(z.Or);){const et=x[C];++C;const ot=j();be=new Ae(et,be,ot)}return be}function j(){let be=ge();for(;Ke(z.And);){const et=x[C];++C;const ot=ge();be=new Ae(et,be,ot)}return be}function ge(){let be;for(;Ke(z.Not);){const et=x[C];++C;const ot=ge();be=new _e(et,ot)}return be??Pe()}function Pe(){let be=rt();for(;Ke(z.ComparisonBinaryOperator)||Ke(z.In)||Ke(z.NotIn);){const et=x[C];++C;const ot=rt();be=new Ae(et,be,ot)}return be}function rt(){let be=It();for(;Ke(z.AdditiveBinaryOperator);){const et=x[C];++C;const ot=It();be=new Ae(et,be,ot)}return be}function we(){const be=mt();return Ke(z.OpenParen)?nt(be):be}function nt(be){let et=new X(be,gt());return Ke(z.OpenParen)&&(et=nt(et)),et}function gt(){Y(z.OpenParen,"Expected opening parenthesis for arguments list");const be=ft();return Y(z.CloseParen,"Expected closing parenthesis for arguments list"),be}function ft(){const be=[];for(;!Ke(z.CloseParen);){let et=Dr();if(Ke(z.Equals)){if(++C,!(et instanceof L))throw new SyntaxError("Expected identifier for keyword argument");const ot=Dr();et=new ue(et,ot)}be.push(et),Ke(z.Comma)&&++C}return be}function St(){const be=[];let et=!1;for(;!Ke(z.CloseSquareBracket);)Ke(z.Colon)?(be.push(void 0),++C,et=!0):(be.push(Dr()),Ke(z.Colon)&&(++C,et=!0));if(be.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(et){if(be.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new U(...be)}return be[0]}function mt(){let be=Ut();for(;Ke(z.Dot)||Ke(z.OpenSquareBracket);){const et=x[C];++C;let ot;const Ht=et.type!==z.Dot;if(Ht)ot=St(),Y(z.CloseSquareBracket,"Expected closing square bracket");else if(ot=Ut(),ot.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");be=new ae(be,ot,Ht)}return be}function It(){let be=Lt();for(;Ke(z.MultiplicativeBinaryOperator);){const et=x[C];++C;const ot=Lt();be=new Ae(et,be,ot)}return be}function Lt(){let be=zt();for(;Ke(z.Is);){++C;const et=Ke(z.Not);et&&++C;let ot=Ut();if(ot instanceof de&&(ot=new L(ot.value.toString())),!(ot instanceof L))throw new SyntaxError("Expected identifier for the test");be=new pt(be,et,ot)}return be}function zt(){let be=we();for(;Ke(z.Pipe);){++C;let et=Ut();if(!(et instanceof L))throw new SyntaxError("Expected identifier for the filter");Ke(z.OpenParen)&&(et=nt(et)),be=new tt(be,et)}return be}function Ut(){const be=x[C];switch(be.type){case z.NumericLiteral:return++C,new D(Number(be.value));case z.StringLiteral:return++C,new k(be.value);case z.BooleanLiteral:return++C,new de(be.value.toLowerCase()==="true");case z.Identifier:return++C,new L(be.value);case z.OpenParen:{++C;const et=Cr();if(x[C].type!==z.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${x[C].type} instead`);return++C,et}case z.OpenSquareBracket:{++C;const et=[];for(;!Ke(z.CloseSquareBracket);)et.push(Dr()),Ke(z.Comma)&&++C;return++C,new ve(et)}case z.OpenCurlyBracket:{++C;const et=new Map;for(;!Ke(z.CloseCurlyBracket);){const ot=Dr();Y(z.Colon,"Expected colon between key and value in object literal");const Ht=Dr();et.set(ot,Ht),Ke(z.Comma)&&++C}return++C,new Ie(et)}default:throw new SyntaxError(`Unexpected token: ${be.type}`)}}for(;C<x.length;)G.body.push(ce());return G}function Q(x,G,C=1){G===void 0&&(G=x,x=0);const Y=[];for(let ce=x;ce<G;ce+=C)Y.push(ce);return Y}function qe(x,G,C,Y=1){const ce=Math.sign(Y);ce>=0?(G=(G??(G=0))<0?Math.max(x.length+G,0):Math.min(G,x.length),C=(C??(C=x.length))<0?Math.max(x.length+C,0):Math.min(C,x.length)):(G=(G??(G=x.length-1))<0?Math.max(x.length+G,-1):Math.min(G,x.length-1),C=(C??(C=-1))<-1?Math.max(x.length+C,-1):Math.min(C,x.length-1));const Je=[];for(let Ke=G;ce*Ke<ce*C;Ke+=Y)Je.push(x[Ke]);return Je}function ht(x){return x.replace(/\b\w/g,G=>G.toUpperCase())}var st=class{constructor(x=void 0){xe(this,"type","RuntimeValue");xe(this,"value");xe(this,"builtins",new Map);this.value=x}__bool__(){return new at(!!this.value)}},dt=class extends st{constructor(){super(...arguments);xe(this,"type","NumericValue")}},Re=class extends st{constructor(){super(...arguments);xe(this,"type","StringValue");xe(this,"builtins",new Map([["upper",new je(()=>new Re(this.value.toUpperCase()))],["lower",new je(()=>new Re(this.value.toLowerCase()))],["strip",new je(()=>new Re(this.value.trim()))],["title",new je(()=>new Re(ht(this.value)))],["length",new dt(this.value.length)]]))}},at=class extends st{constructor(){super(...arguments);xe(this,"type","BooleanValue")}},$t=class extends st{constructor(){super(...arguments);xe(this,"type","ObjectValue");xe(this,"builtins",new Map([["get",new je(([G,C])=>{if(!(G instanceof Re))throw new Error(`Object key must be a string: got ${G.type}`);return this.value.get(G.value)??C??new Ge})],["items",new je(()=>new re(Array.from(this.value.entries()).map(([G,C])=>new re([new Re(G),C]))))]]))}__bool__(){return new at(this.value.size>0)}},De=class extends $t{constructor(){super(...arguments);xe(this,"type","KeywordArgumentsValue")}},re=class extends st{constructor(){super(...arguments);xe(this,"type","ArrayValue");xe(this,"builtins",new Map([["length",new dt(this.value.length)]]))}__bool__(){return new at(this.value.length>0)}},ke=class extends re{constructor(){super(...arguments);xe(this,"type","TupleValue")}},je=class extends st{constructor(){super(...arguments);xe(this,"type","FunctionValue")}},Ge=class extends st{constructor(){super(...arguments);xe(this,"type","NullValue")}},Ue=class extends st{constructor(){super(...arguments);xe(this,"type","UndefinedValue")}},He=class{constructor(x){xe(this,"variables",new Map([["namespace",new je(x=>{if(x.length===0)return new $t(new Map);if(x.length!==1||!(x[0]instanceof $t))throw new Error("`namespace` expects either zero arguments or a single object argument");return x[0]})]]));xe(this,"tests",new Map([["boolean",x=>x.type==="BooleanValue"],["callable",x=>x instanceof je],["odd",x=>{if(x.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${x.type}`);return x.value%2!==0}],["even",x=>{if(x.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${x.type}`);return x.value%2===0}],["false",x=>x.type==="BooleanValue"&&!x.value],["true",x=>x.type==="BooleanValue"&&x.value],["string",x=>x.type==="StringValue"],["number",x=>x.type==="NumericValue"],["integer",x=>x.type==="NumericValue"&&Number.isInteger(x.value)],["iterable",x=>x instanceof re||x instanceof Re],["lower",x=>{const G=x.value;return x.type==="StringValue"&&G===G.toLowerCase()}],["upper",x=>{const G=x.value;return x.type==="StringValue"&&G===G.toUpperCase()}],["none",x=>x.type==="NullValue"],["defined",x=>x.type!=="UndefinedValue"],["undefined",x=>x.type==="UndefinedValue"],["equalto",(x,G)=>x.value===G.value],["eq",(x,G)=>x.value===G.value]]));this.parent=x}set(x,G){return this.declareVariable(x,yt(G))}declareVariable(x,G){if(this.variables.has(x))throw new SyntaxError(`Variable already declared: ${x}`);return this.variables.set(x,G),G}setVariable(x,G){return this.variables.set(x,G),G}resolve(x){if(this.variables.has(x))return this;if(this.parent)return this.parent.resolve(x);throw new Error(`Unknown variable: ${x}`)}lookupVariable(x){try{return this.resolve(x).variables.get(x)??new Ue}catch{return new Ue}}},ct=class{constructor(x){xe(this,"global");this.global=x??new He}run(x){return this.evaluate(x,this.global)}evaluateBinaryExpression(x,G){const C=this.evaluate(x.left,G);switch(x.operator.value){case"and":return C.__bool__().value?this.evaluate(x.right,G):C;case"or":return C.__bool__().value?C:this.evaluate(x.right,G)}const Y=this.evaluate(x.right,G);switch(x.operator.value){case"==":return new at(C.value==Y.value);case"!=":return new at(C.value!=Y.value)}if(C instanceof Ue||Y instanceof Ue)throw new Error("Cannot perform operation on undefined values");if(C instanceof Ge||Y instanceof Ge)throw new Error("Cannot perform operation on null values");if(C instanceof dt&&Y instanceof dt)switch(x.operator.value){case"+":return new dt(C.value+Y.value);case"-":return new dt(C.value-Y.value);case"*":return new dt(C.value*Y.value);case"/":return new dt(C.value/Y.value);case"%":return new dt(C.value%Y.value);case"<":return new at(C.value<Y.value);case">":return new at(C.value>Y.value);case">=":return new at(C.value>=Y.value);case"<=":return new at(C.value<=Y.value)}else if(C instanceof re&&Y instanceof re)switch(x.operator.value){case"+":return new re(C.value.concat(Y.value))}else if(Y instanceof re){const ce=Y.value.find(Je=>Je.value===C.value)!==void 0;switch(x.operator.value){case"in":return new at(ce);case"not in":return new at(!ce)}}if(C instanceof Re||Y instanceof Re)switch(x.operator.value){case"+":return new Re(C.value.toString()+Y.value.toString())}if(C instanceof Re&&Y instanceof Re)switch(x.operator.value){case"in":return new at(Y.value.includes(C.value));case"not in":return new at(!Y.value.includes(C.value))}if(C instanceof Re&&Y instanceof $t)switch(x.operator.value){case"in":return new at(Y.value.has(C.value));case"not in":return new at(!Y.value.has(C.value))}throw new SyntaxError(`Unknown operator "${x.operator.value}" between ${C.type} and ${Y.type}`)}evaluateArguments(x,G){const C=[],Y=new Map;for(const ce of x)if(ce.type==="KeywordArgumentExpression"){const Je=ce;Y.set(Je.key.value,this.evaluate(Je.value,G))}else{if(Y.size>0)throw new Error("Positional arguments must come before keyword arguments");C.push(this.evaluate(ce,G))}return[C,Y]}evaluateFilterExpression(x,G){const C=this.evaluate(x.operand,G);if(x.filter.type==="Identifier"){const Y=x.filter;if(Y.value==="tojson")return new Re(Mt(C));if(C instanceof re)switch(Y.value){case"list":return C;case"first":return C.value[0];case"last":return C.value[C.value.length-1];case"length":return new dt(C.value.length);case"reverse":return new re(C.value.reverse());case"sort":return new re(C.value.sort((ce,Je)=>{if(ce.type!==Je.type)throw new Error(`Cannot compare different types: ${ce.type} and ${Je.type}`);switch(ce.type){case"NumericValue":return ce.value-Je.value;case"StringValue":return ce.value.localeCompare(Je.value);default:throw new Error(`Cannot compare type: ${ce.type}`)}}));default:throw new Error(`Unknown ArrayValue filter: ${Y.value}`)}else if(C instanceof Re)switch(Y.value){case"length":return new dt(C.value.length);case"upper":return new Re(C.value.toUpperCase());case"lower":return new Re(C.value.toLowerCase());case"title":return new Re(ht(C.value));case"capitalize":return new Re(C.value.charAt(0).toUpperCase()+C.value.slice(1));case"trim":return new Re(C.value.trim());case"indent":return new Re(C.value.split(`
`).map((ce,Je)=>Je===0||ce.length===0?ce:"    "+ce).join(`
`));case"string":return C;default:throw new Error(`Unknown StringValue filter: ${Y.value}`)}else if(C instanceof dt)switch(Y.value){case"abs":return new dt(Math.abs(C.value));default:throw new Error(`Unknown NumericValue filter: ${Y.value}`)}else if(C instanceof $t)switch(Y.value){case"items":return new re(Array.from(C.value.entries()).map(([ce,Je])=>new re([new Re(ce),Je])));case"length":return new dt(C.value.size);default:throw new Error(`Unknown ObjectValue filter: ${Y.value}`)}throw new Error(`Cannot apply filter "${Y.value}" to type: ${C.type}`)}else if(x.filter.type==="CallExpression"){const Y=x.filter;if(Y.callee.type!=="Identifier")throw new Error(`Unknown filter: ${Y.callee.type}`);const ce=Y.callee.value;if(ce==="tojson"){const[,Je]=this.evaluateArguments(Y.args,G),Ke=Je.get("indent")??new Ge;if(!(Ke instanceof dt||Ke instanceof Ge))throw new Error("If set, indent must be a number");return new Re(Mt(C,Ke.value))}if(C instanceof re){switch(ce){case"selectattr":{if(C.value.some(Bt=>!(Bt instanceof $t)))throw new Error("`selectattr` can only be applied to array of objects");if(Y.args.some(Bt=>Bt.type!=="StringLiteral"))throw new Error("arguments of `selectattr` must be strings");const[Je,Ke,xt]=Y.args.map(Bt=>this.evaluate(Bt,G));let Qe;if(Ke){const Bt=G.tests.get(Ke.value);if(!Bt)throw new Error(`Unknown test: ${Ke.value}`);Qe=Bt}else Qe=(...Bt)=>Bt[0].__bool__().value;const _t=C.value.filter(Bt=>{const tr=Bt.value.get(Je.value);return tr?Qe(tr,xt):!1});return new re(_t)}case"map":{const[,Je]=this.evaluateArguments(Y.args,G);if(Je.has("attribute")){const Ke=Je.get("attribute");if(!(Ke instanceof Re))throw new Error("attribute must be a string");const xt=Je.get("default"),Qe=C.value.map(_t=>{if(!(_t instanceof $t))throw new Error("items in map must be an object");return _t.value.get(Ke.value)??xt??new Ue});return new re(Qe)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${ce}`)}else if(C instanceof Re){switch(ce){case"indent":{const[Je,Ke]=this.evaluateArguments(Y.args,G),xt=Je.at(0)??Ke.get("width")??new dt(4);if(!(xt instanceof dt))throw new Error("width must be a number");const Qe=Je.at(1)??Ke.get("first")??new at(!1),_t=Je.at(2)??Ke.get("blank")??new at(!1),Bt=C.value.split(`
`),tr=" ".repeat(xt.value),jr=Bt.map((Cr,Zr)=>!Qe.value&&Zr===0||!_t.value&&Cr.length===0?Cr:tr+Cr);return new Re(jr.join(`
`))}}throw new Error(`Unknown StringValue filter: ${ce}`)}else throw new Error(`Cannot apply filter "${ce}" to type: ${C.type}`)}throw new Error(`Unknown filter: ${x.filter.type}`)}evaluateTestExpression(x,G){const C=this.evaluate(x.operand,G),Y=G.tests.get(x.test.value);if(!Y)throw new Error(`Unknown test: ${x.test.value}`);const ce=Y(C);return new at(x.negate?!ce:ce)}evaluateUnaryExpression(x,G){const C=this.evaluate(x.argument,G);switch(x.operator.value){case"not":return new at(!C.value);default:throw new SyntaxError(`Unknown operator: ${x.operator.value}`)}}evalProgram(x,G){return this.evaluateBlock(x.body,G)}evaluateBlock(x,G){let C="";for(const Y of x){const ce=this.evaluate(Y,G);ce.type!=="NullValue"&&ce.type!=="UndefinedValue"&&(C+=ce.value)}return new Re(C)}evaluateIdentifier(x,G){return G.lookupVariable(x.value)}evaluateCallExpression(x,G){const[C,Y]=this.evaluateArguments(x.args,G);Y.size>0&&C.push(new De(Y));const ce=this.evaluate(x.callee,G);if(ce.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${ce.type}`);return ce.value(C,G)}evaluateSliceExpression(x,G,C){if(!(x instanceof re||x instanceof Re))throw new Error("Slice object must be an array or string");const Y=this.evaluate(G.start,C),ce=this.evaluate(G.stop,C),Je=this.evaluate(G.step,C);if(!(Y instanceof dt||Y instanceof Ue))throw new Error("Slice start must be numeric or undefined");if(!(ce instanceof dt||ce instanceof Ue))throw new Error("Slice stop must be numeric or undefined");if(!(Je instanceof dt||Je instanceof Ue))throw new Error("Slice step must be numeric or undefined");return x instanceof re?new re(qe(x.value,Y.value,ce.value,Je.value)):new Re(qe(Array.from(x.value),Y.value,ce.value,Je.value).join(""))}evaluateMemberExpression(x,G){const C=this.evaluate(x.object,G);let Y;if(x.computed){if(x.property.type==="SliceExpression")return this.evaluateSliceExpression(C,x.property,G);Y=this.evaluate(x.property,G)}else Y=new Re(x.property.value);let ce;if(C instanceof $t){if(!(Y instanceof Re))throw new Error(`Cannot access property with non-string: got ${Y.type}`);ce=C.value.get(Y.value)??C.builtins.get(Y.value)}else if(C instanceof re||C instanceof Re)if(Y instanceof dt)ce=C.value.at(Y.value),C instanceof Re&&(ce=new Re(C.value.at(Y.value)));else if(Y instanceof Re)ce=C.builtins.get(Y.value);else throw new Error(`Cannot access property with non-string/non-number: got ${Y.type}`);else{if(!(Y instanceof Re))throw new Error(`Cannot access property with non-string: got ${Y.type}`);ce=C.builtins.get(Y.value)}return ce instanceof st?ce:new Ue}evaluateSet(x,G){const C=this.evaluate(x.value,G);if(x.assignee.type==="Identifier"){const Y=x.assignee.value;G.setVariable(Y,C)}else if(x.assignee.type==="MemberExpression"){const Y=x.assignee,ce=this.evaluate(Y.object,G);if(!(ce instanceof $t))throw new Error("Cannot assign to member of non-object");if(Y.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");ce.value.set(Y.property.value,C)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(x.assignee)}`);return new Ge}evaluateIf(x,G){const C=this.evaluate(x.test,G);return this.evaluateBlock(C.__bool__().value?x.body:x.alternate,G)}evaluateFor(x,G){const C=new He(G);let Y,ce;if(x.iterable.type==="SelectExpression"){const _t=x.iterable;ce=this.evaluate(_t.iterable,C),Y=_t.test}else ce=this.evaluate(x.iterable,C);if(!(ce instanceof re))throw new Error(`Expected iterable type in for loop: got ${ce.type}`);const Je=[],Ke=[];for(let _t=0;_t<ce.value.length;++_t){const Bt=new He(C),tr=ce.value[_t];let jr;if(x.loopvar.type==="Identifier")jr=Cr=>Cr.setVariable(x.loopvar.value,tr);else if(x.loopvar.type==="TupleLiteral"){const Cr=x.loopvar;if(tr.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${tr.type}`);const Zr=tr;if(Cr.value.length!==Zr.value.length)throw new Error(`Too ${Cr.value.length>Zr.value.length?"few":"many"} items to unpack`);jr=Dr=>{for(let qr=0;qr<Cr.value.length;++qr){if(Cr.value[qr].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Cr.value[qr].type}`);Dr.setVariable(Cr.value[qr].value,Zr.value[qr])}}}else throw new Error(`Invalid loop variable(s): ${x.loopvar.type}`);Y&&(jr(Bt),!this.evaluate(Y,Bt).__bool__().value)||(Je.push(tr),Ke.push(jr))}let xt="",Qe=!0;for(let _t=0;_t<Je.length;++_t){const Bt=new Map([["index",new dt(_t+1)],["index0",new dt(_t)],["revindex",new dt(Je.length-_t)],["revindex0",new dt(Je.length-_t-1)],["first",new at(_t===0)],["last",new at(_t===Je.length-1)],["length",new dt(Je.length)],["previtem",_t>0?Je[_t-1]:new Ue],["nextitem",_t<Je.length-1?Je[_t+1]:new Ue]]);C.setVariable("loop",new $t(Bt)),Ke[_t](C);const tr=this.evaluateBlock(x.body,C);xt+=tr.value,Qe=!1}if(Qe){const _t=this.evaluateBlock(x.defaultBlock,C);xt+=_t.value}return new Re(xt)}evaluateMacro(x,G){return G.setVariable(x.name.value,new je((C,Y)=>{const ce=new He(Y);C=C.slice();let Je;C.at(-1)?.type==="KeywordArgumentsValue"&&(Je=C.pop());for(let Ke=0;Ke<x.args.length;++Ke){const xt=x.args[Ke],Qe=C[Ke];if(xt.type==="Identifier"){const _t=xt;if(!Qe)throw new Error(`Missing positional argument: ${_t.value}`);ce.setVariable(_t.value,Qe)}else if(xt.type==="KeywordArgumentExpression"){const _t=xt,Bt=Qe??Je?.value.get(_t.key.value)??this.evaluate(_t.value,ce);ce.setVariable(_t.key.value,Bt)}else throw new Error(`Unknown argument type: ${xt.type}`)}return this.evaluateBlock(x.body,ce)})),new Ge}evaluate(x,G){if(x===void 0)return new Ue;switch(x.type){case"Program":return this.evalProgram(x,G);case"Set":return this.evaluateSet(x,G);case"If":return this.evaluateIf(x,G);case"For":return this.evaluateFor(x,G);case"Macro":return this.evaluateMacro(x,G);case"NumericLiteral":return new dt(Number(x.value));case"StringLiteral":return new Re(x.value);case"BooleanLiteral":return new at(x.value);case"ArrayLiteral":return new re(x.value.map(C=>this.evaluate(C,G)));case"TupleLiteral":return new ke(x.value.map(C=>this.evaluate(C,G)));case"ObjectLiteral":{const C=new Map;for(const[Y,ce]of x.value){const Je=this.evaluate(Y,G);if(!(Je instanceof Re))throw new Error(`Object keys must be strings: got ${Je.type}`);C.set(Je.value,this.evaluate(ce,G))}return new $t(C)}case"Identifier":return this.evaluateIdentifier(x,G);case"CallExpression":return this.evaluateCallExpression(x,G);case"MemberExpression":return this.evaluateMemberExpression(x,G);case"UnaryExpression":return this.evaluateUnaryExpression(x,G);case"BinaryExpression":return this.evaluateBinaryExpression(x,G);case"FilterExpression":return this.evaluateFilterExpression(x,G);case"TestExpression":return this.evaluateTestExpression(x,G);default:throw new SyntaxError(`Unknown node type: ${x.type}`)}}};function yt(x){switch(typeof x){case"number":return new dt(x);case"string":return new Re(x);case"boolean":return new at(x);case"undefined":return new Ue;case"object":return x===null?new Ge:Array.isArray(x)?new re(x.map(yt)):new $t(new Map(Object.entries(x).map(([G,C])=>[G,yt(C)])));case"function":return new je((G,C)=>{const Y=x(...G.map(ce=>ce.value))??null;return yt(Y)});default:throw new Error(`Cannot convert to runtime value: ${x}`)}}function Mt(x,G,C){const Y=C??0;switch(x.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(x.value);case"ArrayValue":case"ObjectValue":{const ce=G?" ".repeat(G):"",Je=`
`+ce.repeat(Y),Ke=Je+ce;if(x.type==="ArrayValue"){const xt=x.value.map(Qe=>Mt(Qe,G,Y+1));return G?`[${Ke}${xt.join(`,${Ke}`)}${Je}]`:`[${xt.join(", ")}]`}else{const xt=Array.from(x.value.entries()).map(([Qe,_t])=>{const Bt=`"${Qe}": ${Mt(_t,G,Y+1)}`;return G?`${Ke}${Bt}`:Bt});return G?`{${xt.join(",")}${Je}}`:`{${xt.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${x.type}`)}}var Et=class{constructor(x){xe(this,"parsed");const G=I(x,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=Ce(G)}render(x){const G=new He;G.set("false",!1),G.set("true",!0),G.set("raise_exception",ce=>{throw new Error(ce)}),G.set("range",Q);for(const[ce,Je]of Object.entries(x))G.set(ce,Je);return new ct(G).run(this.parsed).value}}},"./node_modules/onnxruntime-common/dist/esm/backend-impl.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{registerBackend:()=>Me,resolveBackendAndExecutionProviders:()=>Te});const z=new Map,fe=[],Me=(N,$,V)=>{if($&&typeof $.init=="function"&&typeof $.createInferenceSessionHandler=="function"){const I=z.get(N);if(I===void 0)z.set(N,{backend:$,priority:V});else{if(I.priority>V)return;if(I.priority===V&&I.backend!==$)throw new Error(`cannot register backend "${N}" using priority ${V}`)}if(V>=0){const Z=fe.indexOf(N);Z!==-1&&fe.splice(Z,1);for(let se=0;se<fe.length;se++)if(z.get(fe[se]).priority<=V){fe.splice(se,0,N);return}fe.push(N)}return}throw new TypeError("not a valid backend")},$e=async N=>{const $=z.get(N);if(!$)return"backend not found.";if($.initialized)return $.backend;if($.aborted)return $.error;{const V=!!$.initPromise;try{return V||($.initPromise=$.backend.init(N)),await $.initPromise,$.initialized=!0,$.backend}catch(I){return V||($.error=`${I}`,$.aborted=!0),$.error}finally{delete $.initPromise}}},Te=async N=>{const $=N.executionProviders||[],V=$.map(B=>typeof B=="string"?B:B.name),I=V.length===0?fe:V;let Z;const se=[],le=new Set;for(const B of I){const J=await $e(B);typeof J=="string"?se.push({name:B,err:J}):(Z||(Z=J),Z===J&&le.add(B))}if(!Z)throw new Error(`no available backend found. ERR: ${se.map(B=>`[${B.name}] ${B.err}`).join(", ")}`);for(const{name:B,err:J}of se)V.includes(B)&&console.warn(`removing requested execution provider "${B}" from session options because it is not available: ${J}`);const me=$.filter(B=>le.has(typeof B=="string"?B:B.name));return[Z,new Proxy(N,{get:(B,J)=>J==="executionProviders"?me:Reflect.get(B,J)})]}},"./node_modules/onnxruntime-common/dist/esm/backend.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{registerBackend:()=>z.registerBackend});var z=R("./node_modules/onnxruntime-common/dist/esm/backend-impl.js")},"./node_modules/onnxruntime-common/dist/esm/env-impl.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{env:()=>Me});var z=R("./node_modules/onnxruntime-common/dist/esm/version.js");let fe="warning";const Me={wasm:{},webgl:{},webgpu:{},versions:{common:z.version},set logLevel($e){if($e!==void 0){if(typeof $e!="string"||["verbose","info","warning","error","fatal"].indexOf($e)===-1)throw new Error(`Unsupported logging level: ${$e}`);fe=$e}},get logLevel(){return fe}};Object.defineProperty(Me,"logLevel",{enumerable:!0})},"./node_modules/onnxruntime-common/dist/esm/env.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{env:()=>fe});var z=R("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const fe=z.env},"./node_modules/onnxruntime-common/dist/esm/index.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{InferenceSession:()=>Me.InferenceSession,TRACE:()=>Te.TRACE,TRACE_FUNC_BEGIN:()=>Te.TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>Te.TRACE_FUNC_END,Tensor:()=>$e.Tensor,TrainingSession:()=>N.TrainingSession,env:()=>fe.env,registerBackend:()=>z.registerBackend});var z=R("./node_modules/onnxruntime-common/dist/esm/backend.js"),fe=R("./node_modules/onnxruntime-common/dist/esm/env.js"),Me=R("./node_modules/onnxruntime-common/dist/esm/inference-session.js"),$e=R("./node_modules/onnxruntime-common/dist/esm/tensor.js");R("./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"),R("./node_modules/onnxruntime-common/dist/esm/tensor-factory.js");var Te=R("./node_modules/onnxruntime-common/dist/esm/trace.js");R("./node_modules/onnxruntime-common/dist/esm/onnx-model.js"),R("./node_modules/onnxruntime-common/dist/esm/onnx-value.js");var N=R("./node_modules/onnxruntime-common/dist/esm/training-session.js")},"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{InferenceSession:()=>$e});var z=R("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),fe=R("./node_modules/onnxruntime-common/dist/esm/tensor.js"),Me=R("./node_modules/onnxruntime-common/dist/esm/trace.js");class $e{constructor(N){this.handler=N}async run(N,$,V){(0,Me.TRACE_FUNC_BEGIN)();const I={};let Z={};if(typeof N!="object"||N===null||N instanceof fe.Tensor||Array.isArray(N))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let se=!0;if(typeof $=="object"){if($===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if($ instanceof fe.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray($)){if($.length===0)throw new TypeError("'fetches' cannot be an empty array.");se=!1;for(const B of $){if(typeof B!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(B)===-1)throw new RangeError(`'fetches' contains invalid output name: ${B}.`);I[B]=null}if(typeof V=="object"&&V!==null)Z=V;else if(typeof V<"u")throw new TypeError("'options' must be an object.")}else{let B=!1;const J=Object.getOwnPropertyNames($);for(const ne of this.outputNames)if(J.indexOf(ne)!==-1){const ae=$[ne];(ae===null||ae instanceof fe.Tensor)&&(B=!0,se=!1,I[ne]=ae)}if(B){if(typeof V=="object"&&V!==null)Z=V;else if(typeof V<"u")throw new TypeError("'options' must be an object.")}else Z=$}}else if(typeof $<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const B of this.inputNames)if(typeof N[B]>"u")throw new Error(`input '${B}' is missing in 'feeds'.`);if(se)for(const B of this.outputNames)I[B]=null;const le=await this.handler.run(N,I,Z),me={};for(const B in le)if(Object.hasOwnProperty.call(le,B)){const J=le[B];J instanceof fe.Tensor?me[B]=J:me[B]=new fe.Tensor(J.type,J.data,J.dims)}return(0,Me.TRACE_FUNC_END)(),me}async release(){return this.handler.dispose()}static async create(N,$,V,I){(0,Me.TRACE_FUNC_BEGIN)();let Z,se={};if(typeof N=="string"){if(Z=N,typeof $=="object"&&$!==null)se=$;else if(typeof $<"u")throw new TypeError("'options' must be an object.")}else if(N instanceof Uint8Array){if(Z=N,typeof $=="object"&&$!==null)se=$;else if(typeof $<"u")throw new TypeError("'options' must be an object.")}else if(N instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&N instanceof SharedArrayBuffer){const J=N;let ne=0,ae=N.byteLength;if(typeof $=="object"&&$!==null)se=$;else if(typeof $=="number"){if(ne=$,!Number.isSafeInteger(ne))throw new RangeError("'byteOffset' must be an integer.");if(ne<0||ne>=J.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${J.byteLength}).`);if(ae=N.byteLength-ne,typeof V=="number"){if(ae=V,!Number.isSafeInteger(ae))throw new RangeError("'byteLength' must be an integer.");if(ae<=0||ne+ae>J.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${J.byteLength-ne}].`);if(typeof I=="object"&&I!==null)se=I;else if(typeof I<"u")throw new TypeError("'options' must be an object.")}else if(typeof V<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof $<"u")throw new TypeError("'options' must be an object.");Z=new Uint8Array(J,ne,ae)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[le,me]=await(0,z.resolveBackendAndExecutionProviders)(se),B=await le.createInferenceSessionHandler(Z,me);return(0,Me.TRACE_FUNC_END)(),new $e(B)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}},"./node_modules/onnxruntime-common/dist/esm/inference-session.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{InferenceSession:()=>fe});var z=R("./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js");const fe=z.InferenceSession},"./node_modules/onnxruntime-common/dist/esm/onnx-model.js":(Pt,Se,R)=>{R.r(Se)},"./node_modules/onnxruntime-common/dist/esm/onnx-value.js":(Pt,Se,R)=>{R.r(Se)},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{tensorToDataURL:()=>z,tensorToImageData:()=>fe});const z=(Me,$e)=>{const Te=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);Te.width=Me.dims[3],Te.height=Me.dims[2];const N=Te.getContext("2d");if(N!=null){let $,V;$e?.tensorLayout!==void 0&&$e.tensorLayout==="NHWC"?($=Me.dims[2],V=Me.dims[3]):($=Me.dims[3],V=Me.dims[2]);const I=$e?.format!==void 0?$e.format:"RGB",Z=$e?.norm;let se,le;Z===void 0||Z.mean===void 0?se=[255,255,255,255]:typeof Z.mean=="number"?se=[Z.mean,Z.mean,Z.mean,Z.mean]:(se=[Z.mean[0],Z.mean[1],Z.mean[2],0],Z.mean[3]!==void 0&&(se[3]=Z.mean[3])),Z===void 0||Z.bias===void 0?le=[0,0,0,0]:typeof Z.bias=="number"?le=[Z.bias,Z.bias,Z.bias,Z.bias]:(le=[Z.bias[0],Z.bias[1],Z.bias[2],0],Z.bias[3]!==void 0&&(le[3]=Z.bias[3]));const me=V*$;let B=0,J=me,ne=me*2,ae=-1;I==="RGBA"?(B=0,J=me,ne=me*2,ae=me*3):I==="RGB"?(B=0,J=me,ne=me*2):I==="RBG"&&(B=0,ne=me,J=me*2);for(let X=0;X<V;X++)for(let L=0;L<$;L++){const A=(Me.data[B++]-le[0])*se[0],D=(Me.data[J++]-le[1])*se[1],k=(Me.data[ne++]-le[2])*se[2],de=ae===-1?255:(Me.data[ae++]-le[3])*se[3];N.fillStyle="rgba("+A+","+D+","+k+","+de+")",N.fillRect(L,X,1,1)}if("toDataURL"in Te)return Te.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},fe=(Me,$e)=>{const Te=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let N;if(Te!=null){let $,V,I;$e?.tensorLayout!==void 0&&$e.tensorLayout==="NHWC"?($=Me.dims[2],V=Me.dims[1],I=Me.dims[3]):($=Me.dims[3],V=Me.dims[2],I=Me.dims[1]);const Z=$e!==void 0&&$e.format!==void 0?$e.format:"RGB",se=$e?.norm;let le,me;se===void 0||se.mean===void 0?le=[255,255,255,255]:typeof se.mean=="number"?le=[se.mean,se.mean,se.mean,se.mean]:(le=[se.mean[0],se.mean[1],se.mean[2],255],se.mean[3]!==void 0&&(le[3]=se.mean[3])),se===void 0||se.bias===void 0?me=[0,0,0,0]:typeof se.bias=="number"?me=[se.bias,se.bias,se.bias,se.bias]:(me=[se.bias[0],se.bias[1],se.bias[2],0],se.bias[3]!==void 0&&(me[3]=se.bias[3]));const B=V*$;if($e!==void 0&&($e.format!==void 0&&I===4&&$e.format!=="RGBA"||I===3&&$e.format!=="RGB"&&$e.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const J=4;let ne=0,ae=1,X=2,L=3,A=0,D=B,k=B*2,de=-1;Z==="RGBA"?(A=0,D=B,k=B*2,de=B*3):Z==="RGB"?(A=0,D=B,k=B*2):Z==="RBG"&&(A=0,k=B,D=B*2),N=Te.createImageData($,V);for(let ve=0;ve<V*$;ne+=J,ae+=J,X+=J,L+=J,ve++)N.data[ne]=(Me.data[A++]-me[0])*le[0],N.data[ae]=(Me.data[D++]-me[1])*le[1],N.data[X]=(Me.data[k++]-me[2])*le[2],N.data[L]=de===-1?255:(Me.data[de++]-me[3])*le[3]}else throw new Error("Can not access image data");return N}},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js":(Pt,Se,R)=>{R.r(Se)},"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{bufferToTensor:()=>fe,tensorFromGpuBuffer:()=>Te,tensorFromImage:()=>Me,tensorFromPinnedBuffer:()=>N,tensorFromTexture:()=>$e});var z=R("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const fe=($,V)=>{if($===void 0)throw new Error("Image buffer must be defined");if(V.height===void 0||V.width===void 0)throw new Error("Image height and width must be defined");if(V.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:I,width:Z}=V,se=V.norm??{mean:255,bias:0};let le,me;typeof se.mean=="number"?le=[se.mean,se.mean,se.mean,se.mean]:le=[se.mean[0],se.mean[1],se.mean[2],se.mean[3]??255],typeof se.bias=="number"?me=[se.bias,se.bias,se.bias,se.bias]:me=[se.bias[0],se.bias[1],se.bias[2],se.bias[3]??0];const B=V.format!==void 0?V.format:"RGBA",J=V.tensorFormat!==void 0&&V.tensorFormat!==void 0?V.tensorFormat:"RGB",ne=I*Z,ae=J==="RGBA"?new Float32Array(ne*4):new Float32Array(ne*3);let X=4,L=0,A=1,D=2,k=3,de=0,ve=ne,Ee=ne*2,Ie=-1;B==="RGB"&&(X=3,L=0,A=1,D=2,k=-1),J==="RGBA"?Ie=ne*3:J==="RBG"?(de=0,Ee=ne,ve=ne*2):J==="BGR"&&(Ee=0,ve=ne,de=ne*2);for(let tt=0;tt<ne;tt++,L+=X,D+=X,A+=X,k+=X)ae[de++]=($[L]+me[0])/le[0],ae[ve++]=($[A]+me[1])/le[1],ae[Ee++]=($[D]+me[2])/le[2],Ie!==-1&&k!==-1&&(ae[Ie++]=($[k]+me[3])/le[3]);return J==="RGBA"?new z.Tensor("float32",ae,[1,4,I,Z]):new z.Tensor("float32",ae,[1,3,I,Z])},Me=async($,V)=>{const I=typeof HTMLImageElement<"u"&&$ instanceof HTMLImageElement,Z=typeof ImageData<"u"&&$ instanceof ImageData,se=typeof ImageBitmap<"u"&&$ instanceof ImageBitmap,le=typeof $=="string";let me,B=V??{};const J=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},ne=ae=>ae instanceof HTMLCanvasElement||ae instanceof OffscreenCanvas?ae.getContext("2d"):null;if(I){const ae=J();ae.width=$.width,ae.height=$.height;const X=ne(ae);if(X!=null){let L=$.height,A=$.width;if(V!==void 0&&V.resizedHeight!==void 0&&V.resizedWidth!==void 0&&(L=V.resizedHeight,A=V.resizedWidth),V!==void 0){if(B=V,V.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");B.tensorFormat="RGBA",B.height=L,B.width=A}else B.tensorFormat="RGBA",B.height=L,B.width=A;X.drawImage($,0,0),me=X.getImageData(0,0,A,L).data}else throw new Error("Can not access image data")}else if(Z){let ae,X;if(V!==void 0&&V.resizedWidth!==void 0&&V.resizedHeight!==void 0?(ae=V.resizedHeight,X=V.resizedWidth):(ae=$.height,X=$.width),V!==void 0&&(B=V),B.format="RGBA",B.height=ae,B.width=X,V!==void 0){const L=J();L.width=X,L.height=ae;const A=ne(L);if(A!=null)A.putImageData($,0,0),me=A.getImageData(0,0,X,ae).data;else throw new Error("Can not access image data")}else me=$.data}else if(se){if(V===void 0)throw new Error("Please provide image config with format for Imagebitmap");const ae=J();ae.width=$.width,ae.height=$.height;const X=ne(ae);if(X!=null){const L=$.height,A=$.width;return X.drawImage($,0,0,A,L),me=X.getImageData(0,0,A,L).data,B.height=L,B.width=A,fe(me,B)}else throw new Error("Can not access image data")}else{if(le)return new Promise((ae,X)=>{const L=J(),A=ne(L);if(!$||!A)return X();const D=new Image;D.crossOrigin="Anonymous",D.src=$,D.onload=()=>{L.width=D.width,L.height=D.height,A.drawImage(D,0,0,L.width,L.height);const k=A.getImageData(0,0,L.width,L.height);B.height=L.height,B.width=L.width,ae(fe(k.data,B))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(me!==void 0)return fe(me,B);throw new Error("Input data provided is not supported - aborted tensor creation")},$e=($,V)=>{const{width:I,height:Z,download:se,dispose:le}=V,me=[1,Z,I,4];return new z.Tensor({location:"texture",type:"float32",texture:$,dims:me,download:se,dispose:le})},Te=($,V)=>{const{dataType:I,dims:Z,download:se,dispose:le}=V;return new z.Tensor({location:"gpu-buffer",type:I??"float32",gpuBuffer:$,dims:Z,download:se,dispose:le})},N=($,V,I)=>new z.Tensor({location:"cpu-pinned",type:$,data:V,dims:I??[V.length]})},"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js":(Pt,Se,R)=>{R.r(Se)},"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP:()=>fe,NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP:()=>z,checkTypedArray:()=>$e});const z=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),fe=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let Me=!1;const $e=()=>{if(!Me){Me=!0;const Te=typeof BigInt64Array<"u"&&BigInt64Array.from,N=typeof BigUint64Array<"u"&&BigUint64Array.from,$=typeof Float16Array<"u"&&Float16Array.from;Te&&(z.set("int64",BigInt64Array),fe.set(BigInt64Array,"int64")),N&&(z.set("uint64",BigUint64Array),fe.set(BigUint64Array,"uint64")),$?(z.set("float16",Float16Array),fe.set(Float16Array,"float16")):z.set("float16",Uint16Array)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{Tensor:()=>Te});var z=R("./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"),fe=R("./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"),Me=R("./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"),$e=R("./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js");class Te{constructor($,V,I){(0,Me.checkTypedArray)();let Z,se;if(typeof $=="object"&&"location"in $)switch(this.dataLocation=$.location,Z=$.type,se=$.dims,$.location){case"cpu-pinned":{const me=Me.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(Z);if(!me)throw new TypeError(`unsupported type "${Z}" to create tensor from pinned buffer`);if(!($.data instanceof me))throw new TypeError(`buffer should be of type ${me.name}`);this.cpuData=$.data;break}case"texture":{if(Z!=="float32")throw new TypeError(`unsupported type "${Z}" to create tensor from texture`);this.gpuTextureData=$.texture,this.downloader=$.download,this.disposer=$.dispose;break}case"gpu-buffer":{if(Z!=="float32"&&Z!=="float16"&&Z!=="int32"&&Z!=="int64"&&Z!=="uint32"&&Z!=="uint8"&&Z!=="bool")throw new TypeError(`unsupported type "${Z}" to create tensor from gpu buffer`);this.gpuBufferData=$.gpuBuffer,this.downloader=$.download,this.disposer=$.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let me,B;if(typeof $=="string")if(Z=$,B=I,$==="string"){if(!Array.isArray(V))throw new TypeError("A string tensor's data must be a string array.");me=V}else{const J=Me.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get($);if(J===void 0)throw new TypeError(`Unsupported tensor type: ${$}.`);if(Array.isArray(V)){if($==="float16"&&J===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");$==="uint64"||$==="int64"?me=J.from(V,BigInt):me=J.from(V)}else if(V instanceof J)me=V;else throw new TypeError(`A ${Z} tensor's data must be type of ${J}`)}else if(B=V,Array.isArray($)){if($.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const J=typeof $[0];if(J==="string")Z="string",me=$;else if(J==="boolean")Z="bool",me=Uint8Array.from($);else throw new TypeError(`Invalid element type of data array: ${J}.`)}else{const J=Me.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get($.constructor);if(J===void 0)throw new TypeError(`Unsupported type for tensor data: ${$.constructor}.`);Z=J,me=$}if(B===void 0)B=[me.length];else if(!Array.isArray(B))throw new TypeError("A tensor's dims must be a number array");se=B,this.cpuData=me,this.dataLocation="cpu"}const le=(0,$e.calculateSize)(se);if(this.cpuData&&le!==this.cpuData.length)throw new Error(`Tensor's size(${le}) does not match data length(${this.cpuData.length}).`);this.type=Z,this.dims=se,this.size=le}static async fromImage($,V){return(0,fe.tensorFromImage)($,V)}static fromTexture($,V){return(0,fe.tensorFromTexture)($,V)}static fromGpuBuffer($,V){return(0,fe.tensorFromGpuBuffer)($,V)}static fromPinnedBuffer($,V,I){return(0,fe.tensorFromPinnedBuffer)($,V,I)}toDataURL($){return(0,z.tensorToDataURL)(this,$)}toImageData($){return(0,z.tensorToImageData)(this,$)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData($){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const V=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=V,$&&this.disposer&&(this.disposer(),this.disposer=void 0),V}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape($){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return(0,$e.tensorReshape)(this,$)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{calculateSize:()=>fe,tensorReshape:()=>Me});var z=R("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const fe=$e=>{let Te=1;for(let N=0;N<$e.length;N++){const $=$e[N];if(typeof $!="number"||!Number.isSafeInteger($))throw new TypeError(`dims[${N}] must be an integer, got: ${$}`);if($<0)throw new RangeError(`dims[${N}] must be a non-negative integer, got: ${$}`);Te*=$}return Te},Me=($e,Te)=>{switch($e.location){case"cpu":return new z.Tensor($e.type,$e.data,Te);case"cpu-pinned":return new z.Tensor({location:"cpu-pinned",data:$e.data,type:$e.type,dims:Te});case"texture":return new z.Tensor({location:"texture",texture:$e.texture,type:$e.type,dims:Te});case"gpu-buffer":return new z.Tensor({location:"gpu-buffer",gpuBuffer:$e.gpuBuffer,type:$e.type,dims:Te});default:throw new Error(`tensorReshape: tensor location ${$e.location} is not supported`)}}},"./node_modules/onnxruntime-common/dist/esm/tensor.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{Tensor:()=>fe});var z=R("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const fe=z.Tensor},"./node_modules/onnxruntime-common/dist/esm/trace.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{TRACE:()=>fe,TRACE_FUNC_BEGIN:()=>$e,TRACE_FUNC_END:()=>Te});var z=R("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const fe=(N,$)=>{(typeof z.env.trace>"u"?!z.env.wasm.trace:!z.env.trace)||console.timeStamp(`${N}::ORT::${$}`)},Me=(N,$)=>{const V=new Error().stack?.split(/\r\n|\r|\n/g)||[];let I=!1;for(let Z=0;Z<V.length;Z++){if(I&&!V[Z].includes("TRACE_FUNC")){let se=`FUNC_${N}::${V[Z].trim().split(" ")[1]}`;$&&(se+=`::${$}`),fe("CPU",se);return}V[Z].includes("TRACE_FUNC")&&(I=!0)}},$e=N=>{(typeof z.env.trace>"u"?!z.env.wasm.trace:!z.env.trace)||Me("BEGIN",N)},Te=N=>{(typeof z.env.trace>"u"?!z.env.wasm.trace:!z.env.trace)||Me("END",N)}},"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{TrainingSession:()=>$e});var z=R("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),fe=R("./node_modules/onnxruntime-common/dist/esm/tensor.js");const Me="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";class $e{constructor(N,$,V){this.handler=N,this.hasOptimizerModel=$,this.hasEvalModel=V}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(N,$){const V=N.evalModel||"",I=N.optimizerModel||"",Z=$||{},[se,le]=await(0,z.resolveBackendAndExecutionProviders)(Z);if(se.createTrainingSessionHandler){const me=await se.createTrainingSessionHandler(N.checkpointState,N.trainModel,V,I,le);return new $e(me,!!N.optimizerModel,!!N.evalModel)}else throw new Error(Me)}typeNarrowingForRunStep(N,$,V,I,Z){const se={};let le={};if(typeof V!="object"||V===null||V instanceof fe.Tensor||Array.isArray(V))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let me=!0;if(typeof I=="object"){if(I===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(I instanceof fe.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(I)){if(I.length===0)throw new TypeError("'fetches' cannot be an empty array.");me=!1;for(const B of I){if(typeof B!="string")throw new TypeError("'fetches' must be a string array or an object.");if($.indexOf(B)===-1)throw new RangeError(`'fetches' contains invalid output name: ${B}.`);se[B]=null}if(typeof Z=="object"&&Z!==null)le=Z;else if(typeof Z<"u")throw new TypeError("'options' must be an object.")}else{let B=!1;const J=Object.getOwnPropertyNames(I);for(const ne of $)if(J.indexOf(ne)!==-1){const ae=I[ne];(ae===null||ae instanceof fe.Tensor)&&(B=!0,me=!1,se[ne]=ae)}if(B){if(typeof Z=="object"&&Z!==null)le=Z;else if(typeof Z<"u")throw new TypeError("'options' must be an object.")}else le=I}}else if(typeof I<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const B of N)if(typeof V[B]>"u")throw new Error(`input '${B}' is missing in 'feeds'.`);if(me)for(const B of $)se[B]=null;return[se,le]}convertHandlerReturnTypeToMapOfTensors(N){const $={};for(const V in N)if(Object.hasOwnProperty.call(N,V)){const I=N[V];I instanceof fe.Tensor?$[V]=I:$[V]=new fe.Tensor(I.type,I.data,I.dims)}return $}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(N,$,V){const[I,Z]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,N,$,V),se=await this.handler.runTrainStep(N,I,Z);return this.convertHandlerReturnTypeToMapOfTensors(se)}async runOptimizerStep(N){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(N||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(N,$,V){if(this.hasEvalModel){const[I,Z]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,N,$,V),se=await this.handler.runEvalStep(N,I,Z);return this.convertHandlerReturnTypeToMapOfTensors(se)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(N=!0){return this.handler.getParametersSize(N)}async loadParametersBuffer(N,$=!0){const V=await this.getParametersSize($);if(N.length!==4*V)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(N,$)}async getContiguousParameters(N=!0){return this.handler.getContiguousParameters(N)}async release(){return this.handler.dispose()}}},"./node_modules/onnxruntime-common/dist/esm/training-session.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{TrainingSession:()=>fe});var z=R("./node_modules/onnxruntime-common/dist/esm/training-session-impl.js");const fe=z.TrainingSession},"./node_modules/onnxruntime-common/dist/esm/version.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{version:()=>z});const z="1.19.2"},"./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs":(Pt,Se,R)=>{R.r(Se),R.d(Se,{InferenceSession:()=>Mt,TRACE:()=>ke,TRACE_FUNC_BEGIN:()=>Ge,TRACE_FUNC_END:()=>Ue,Tensor:()=>De,TrainingSession:()=>xt,default:()=>If,env:()=>k,registerBackend:()=>le});/*!
 * ONNX Runtime Web v1.20.0-dev.20240908-de7a02beef
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var z=Object.defineProperty,fe=Object.getOwnPropertyDescriptor,Me=Object.getOwnPropertyNames,$e=Object.prototype.hasOwnProperty,Te=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),N=(e,t)=>()=>(e&&(t=e(e=0)),t),$=(e,t)=>{for(var r in t)z(e,r,{get:t[r],enumerable:!0})},V=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Me(t))!$e.call(e,s)&&s!==r&&z(e,s,{get:()=>t[s],enumerable:!(n=fe(t,s))||n.enumerable});return e},I=e=>V(z({},"__esModule",{value:!0}),e),Z,se,le,me,B,J=N(()=>{Z=new Map,se=[],le=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=Z.get(e);if(n===void 0)Z.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let s=se.indexOf(e);s!==-1&&se.splice(s,1);for(let i=0;i<se.length;i++)if(Z.get(se[i]).priority<=r){se.splice(i,0,e);return}se.push(e)}return}throw new TypeError("not a valid backend")},me=async e=>{let t=Z.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},B=async e=>{let t=e.executionProviders||[],r=t.map(d=>typeof d=="string"?d:d.name),n=r.length===0?se:r,s,i=[],a=new Set;for(let d of n){let p=await me(d);typeof p=="string"?i.push({name:d,err:p}):(s||(s=p),s===p&&a.add(d))}if(!s)throw new Error(`no available backend found. ERR: ${i.map(d=>`[${d.name}] ${d.err}`).join(", ")}`);for(let{name:d,err:p}of i)r.includes(d)&&console.warn(`removing requested execution provider "${d}" from session options because it is not available: ${p}`);let u=t.filter(d=>a.has(typeof d=="string"?d:d.name));return[s,new Proxy(e,{get:(d,p)=>p==="executionProviders"?u:Reflect.get(d,p)})]}}),ne=N(()=>{J()}),ae,X=N(()=>{ae="1.20.0-dev.20240827-5d54dc1462"}),L,A,D=N(()=>{X(),L="warning",A={wasm:{},webgl:{},webgpu:{},versions:{common:ae},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);L=e}},get logLevel(){return L}},Object.defineProperty(A,"logLevel",{enumerable:!0})}),k,de=N(()=>{D(),k=A}),ve,Ee,Ie=N(()=>{ve=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(n!=null){let s,i;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(s=e.dims[2],i=e.dims[3]):(s=e.dims[3],i=e.dims[2]);let a=t?.format!==void 0?t.format:"RGB",u=t?.norm,d,p;u===void 0||u.mean===void 0?d=[255,255,255,255]:typeof u.mean=="number"?d=[u.mean,u.mean,u.mean,u.mean]:(d=[u.mean[0],u.mean[1],u.mean[2],0],u.mean[3]!==void 0&&(d[3]=u.mean[3])),u===void 0||u.bias===void 0?p=[0,0,0,0]:typeof u.bias=="number"?p=[u.bias,u.bias,u.bias,u.bias]:(p=[u.bias[0],u.bias[1],u.bias[2],0],u.bias[3]!==void 0&&(p[3]=u.bias[3]));let g=i*s,l=0,b=g,M=g*2,S=-1;a==="RGBA"?(l=0,b=g,M=g*2,S=g*3):a==="RGB"?(l=0,b=g,M=g*2):a==="RBG"&&(l=0,M=g,b=g*2);for(let v=0;v<i;v++)for(let q=0;q<s;q++){let W=(e.data[l++]-p[0])*d[0],F=(e.data[b++]-p[1])*d[1],ee=(e.data[M++]-p[2])*d[2],te=S===-1?255:(e.data[S++]-p[3])*d[3];n.fillStyle="rgba("+W+","+F+","+ee+","+te+")",n.fillRect(q,v,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Ee=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let s,i,a;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(s=e.dims[2],i=e.dims[1],a=e.dims[3]):(s=e.dims[3],i=e.dims[2],a=e.dims[1]);let u=t!==void 0&&t.format!==void 0?t.format:"RGB",d=t?.norm,p,g;d===void 0||d.mean===void 0?p=[255,255,255,255]:typeof d.mean=="number"?p=[d.mean,d.mean,d.mean,d.mean]:(p=[d.mean[0],d.mean[1],d.mean[2],255],d.mean[3]!==void 0&&(p[3]=d.mean[3])),d===void 0||d.bias===void 0?g=[0,0,0,0]:typeof d.bias=="number"?g=[d.bias,d.bias,d.bias,d.bias]:(g=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(g[3]=d.bias[3]));let l=i*s;if(t!==void 0&&(t.format!==void 0&&a===4&&t.format!=="RGBA"||a===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let b=4,M=0,S=1,v=2,q=3,W=0,F=l,ee=l*2,te=-1;u==="RGBA"?(W=0,F=l,ee=l*2,te=l*3):u==="RGB"?(W=0,F=l,ee=l*2):u==="RBG"&&(W=0,ee=l,F=l*2),n=r.createImageData(s,i);for(let he=0;he<i*s;M+=b,S+=b,v+=b,q+=b,he++)n.data[M]=(e.data[W++]-g[0])*p[0],n.data[S]=(e.data[F++]-g[1])*p[1],n.data[v]=(e.data[ee++]-g[2])*p[2],n.data[q]=te===-1?255:(e.data[te++]-g[3])*p[3]}else throw new Error("Can not access image data");return n}}),Ae,tt,Ye,pt,_e,U=N(()=>{$t(),Ae=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=t,s=t.norm??{mean:255,bias:0},i,a;typeof s.mean=="number"?i=[s.mean,s.mean,s.mean,s.mean]:i=[s.mean[0],s.mean[1],s.mean[2],s.mean[3]??255],typeof s.bias=="number"?a=[s.bias,s.bias,s.bias,s.bias]:a=[s.bias[0],s.bias[1],s.bias[2],s.bias[3]??0];let u=t.format!==void 0?t.format:"RGBA",d=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",p=r*n,g=d==="RGBA"?new Float32Array(p*4):new Float32Array(p*3),l=4,b=0,M=1,S=2,v=3,q=0,W=p,F=p*2,ee=-1;u==="RGB"&&(l=3,b=0,M=1,S=2,v=-1),d==="RGBA"?ee=p*3:d==="RBG"?(q=0,F=p,W=p*2):d==="BGR"&&(F=0,W=p,q=p*2);for(let te=0;te<p;te++,b+=l,S+=l,M+=l,v+=l)g[q++]=(e[b]+a[0])/i[0],g[W++]=(e[M]+a[1])/i[1],g[F++]=(e[S]+a[2])/i[2],ee!==-1&&v!==-1&&(g[ee++]=(e[v]+a[3])/i[3]);return d==="RGBA"?new at("float32",g,[1,4,r,n]):new at("float32",g,[1,3,r,n])},tt=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,s=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,i=typeof e=="string",a,u=t??{},d=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},p=g=>g instanceof HTMLCanvasElement||g instanceof OffscreenCanvas?g.getContext("2d"):null;if(r){let g=d();g.width=e.width,g.height=e.height;let l=p(g);if(l!=null){let b=e.height,M=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(b=t.resizedHeight,M=t.resizedWidth),t!==void 0){if(u=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");u.tensorFormat="RGBA",u.height=b,u.width=M}else u.tensorFormat="RGBA",u.height=b,u.width=M;l.drawImage(e,0,0),a=l.getImageData(0,0,M,b).data}else throw new Error("Can not access image data")}else if(n){let g,l;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(g=t.resizedHeight,l=t.resizedWidth):(g=e.height,l=e.width),t!==void 0&&(u=t),u.format="RGBA",u.height=g,u.width=l,t!==void 0){let b=d();b.width=l,b.height=g;let M=p(b);if(M!=null)M.putImageData(e,0,0),a=M.getImageData(0,0,l,g).data;else throw new Error("Can not access image data")}else a=e.data}else if(s){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let g=d();g.width=e.width,g.height=e.height;let l=p(g);if(l!=null){let b=e.height,M=e.width;return l.drawImage(e,0,0,M,b),a=l.getImageData(0,0,M,b).data,u.height=b,u.width=M,Ae(a,u)}else throw new Error("Can not access image data")}else{if(i)return new Promise((g,l)=>{let b=d(),M=p(b);if(!e||!M)return l();let S=new Image;S.crossOrigin="Anonymous",S.src=e,S.onload=()=>{b.width=S.width,b.height=S.height,M.drawImage(S,0,0,b.width,b.height);let v=M.getImageData(0,0,b.width,b.height);u.height=b.height,u.width=b.width,g(Ae(v.data,u))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Ae(a,u);throw new Error("Input data provided is not supported - aborted tensor creation")},Ye=(e,t)=>{let{width:r,height:n,download:s,dispose:i}=t,a=[1,n,r,4];return new at({location:"texture",type:"float32",texture:e,dims:a,download:s,dispose:i})},pt=(e,t)=>{let{dataType:r,dims:n,download:s,dispose:i}=t;return new at({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:s,dispose:i})},_e=(e,t,r)=>new at({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})}),ue,Ce,Q,qe,ht=N(()=>{ue=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Ce=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Q=!1,qe=()=>{if(!Q){Q=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=typeof Float16Array<"u"&&Float16Array.from;e&&(ue.set("int64",BigInt64Array),Ce.set(BigInt64Array,"int64")),t&&(ue.set("uint64",BigUint64Array),Ce.set(BigUint64Array,"uint64")),r?(ue.set("float16",Float16Array),Ce.set(Float16Array,"float16")):ue.set("float16",Uint16Array)}}}),st,dt,Re=N(()=>{$t(),st=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},dt=(e,t)=>{switch(e.location){case"cpu":return new at(e.type,e.data,t);case"cpu-pinned":return new at({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new at({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new at({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),at,$t=N(()=>{Ie(),U(),ht(),Re(),at=class{constructor(e,t,r){qe();let n,s;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,n=e.type,s=e.dims,e.location){case"cpu-pinned":{let a=ue.get(n);if(!a)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(e.data instanceof a))throw new TypeError(`buffer should be of type ${a.name}`);this.cpuData=e.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,u;if(typeof e=="string")if(n=e,u=r,e==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");a=t}else{let d=ue.get(e);if(d===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if(e==="float16"&&d===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${d.name} as data.`);e==="uint64"||e==="int64"?a=d.from(t,BigInt):a=d.from(t)}else if(t instanceof d)a=t;else throw new TypeError(`A ${n} tensor's data must be type of ${d}`)}else if(u=t,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let d=typeof e[0];if(d==="string")n="string",a=e;else if(d==="boolean")n="bool",a=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${d}.`)}else{let d=Ce.get(e.constructor);if(d===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=d,a=e}if(u===void 0)u=[a.length];else if(!Array.isArray(u))throw new TypeError("A tensor's dims must be a number array");s=u,this.cpuData=a,this.dataLocation="cpu"}let i=st(s);if(this.cpuData&&i!==this.cpuData.length&&!((n==="uint4"||n==="int4")&&Math.ceil(i/2)===this.cpuData.length))throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=i}static async fromImage(e,t){return tt(e,t)}static fromTexture(e,t){return Ye(e,t)}static fromGpuBuffer(e,t){return pt(e,t)}static fromPinnedBuffer(e,t,r){return _e(e,t,r)}toDataURL(e){return ve(this,e)}toImageData(e){return Ee(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return dt(this,e)}}}),De,re=N(()=>{$t(),De=at}),ke,je,Ge,Ue,He=N(()=>{D(),ke=(e,t)=>{(typeof A.trace>"u"?!A.wasm.trace:!A.trace)||console.timeStamp(`${e}::ORT::${t}`)},je=(e,t)=>{let r=new Error().stack?.split(/\r\n|\r|\n/g)||[],n=!1;for(let s=0;s<r.length;s++){if(n&&!r[s].includes("TRACE_FUNC")){let i=`FUNC_${e}::${r[s].trim().split(" ")[1]}`;t&&(i+=`::${t}`),ke("CPU",i);return}r[s].includes("TRACE_FUNC")&&(n=!0)}},Ge=e=>{(typeof A.trace>"u"?!A.wasm.trace:!A.trace)||je("BEGIN",e)},Ue=e=>{(typeof A.trace>"u"?!A.wasm.trace:!A.trace)||je("END",e)}}),ct,yt=N(()=>{J(),re(),He(),ct=class mf{constructor(t){this.handler=t}async run(t,r,n){Ge();let s={},i={};if(typeof t!="object"||t===null||t instanceof De||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof De)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let p of r){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);s[p]=null}if(typeof n=="object"&&n!==null)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,g=Object.getOwnPropertyNames(r);for(let l of this.outputNames)if(g.indexOf(l)!==-1){let b=r[l];(b===null||b instanceof De)&&(p=!0,a=!1,s[l]=b)}if(p){if(typeof n=="object"&&n!==null)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else i=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of this.inputNames)if(typeof t[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(a)for(let p of this.outputNames)s[p]=null;let u=await this.handler.run(t,s,i),d={};for(let p in u)if(Object.hasOwnProperty.call(u,p)){let g=u[p];g instanceof De?d[p]=g:d[p]=new De(g.type,g.data,g.dims)}return Ue(),d}async release(){return this.handler.dispose()}static async create(t,r,n,s){Ge();let i,a={};if(typeof t=="string"){if(i=t,typeof r=="object"&&r!==null)a=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(i=t,typeof r=="object"&&r!==null)a=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let g=t,l=0,b=t.byteLength;if(typeof r=="object"&&r!==null)a=r;else if(typeof r=="number"){if(l=r,!Number.isSafeInteger(l))throw new RangeError("'byteOffset' must be an integer.");if(l<0||l>=g.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${g.byteLength}).`);if(b=t.byteLength-l,typeof n=="number"){if(b=n,!Number.isSafeInteger(b))throw new RangeError("'byteLength' must be an integer.");if(b<=0||l+b>g.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${g.byteLength-l}].`);if(typeof s=="object"&&s!==null)a=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");i=new Uint8Array(g,l,b)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[u,d]=await B(a),p=await u.createInferenceSessionHandler(i,d);return Ue(),new mf(p)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}),Mt,Et=N(()=>{yt(),Mt=ct}),x=N(()=>{}),G=N(()=>{}),C=N(()=>{}),Y=N(()=>{}),ce,Je,Ke=N(()=>{J(),re(),ce="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Je=class _f{constructor(t,r,n){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let n=t.evalModel||"",s=t.optimizerModel||"",i=r||{},[a,u]=await B(i);if(a.createTrainingSessionHandler){let d=await a.createTrainingSessionHandler(t.checkpointState,t.trainModel,n,s,u);return new _f(d,!!t.optimizerModel,!!t.evalModel)}else throw new Error(ce)}typeNarrowingForRunStep(t,r,n,s,i){let a={},u={};if(typeof n!="object"||n===null||n instanceof De||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let d=!0;if(typeof s=="object"){if(s===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(s instanceof De)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(s)){if(s.length===0)throw new TypeError("'fetches' cannot be an empty array.");d=!1;for(let p of s){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);a[p]=null}if(typeof i=="object"&&i!==null)u=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,g=Object.getOwnPropertyNames(s);for(let l of r)if(g.indexOf(l)!==-1){let b=s[l];(b===null||b instanceof De)&&(p=!0,d=!1,a[l]=b)}if(p){if(typeof i=="object"&&i!==null)u=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else u=s}}else if(typeof s<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of t)if(typeof n[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(d)for(let p of r)a[p]=null;return[a,u]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let n in t)if(Object.hasOwnProperty.call(t,n)){let s=t[n];s instanceof De?r[n]=s:r[n]=new De(s.type,s.data,s.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,n){let[s,i]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,n),a=await this.handler.runTrainStep(t,s,i);return this.convertHandlerReturnTypeToMapOfTensors(a)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,n){if(this.hasEvalModel){let[s,i]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,n),a=await this.handler.runEvalStep(t,s,i);return this.convertHandlerReturnTypeToMapOfTensors(a)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let n=await this.getParametersSize(r);if(t.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}}),xt,Qe=N(()=>{Ke(),xt=Je}),_t={};$(_t,{InferenceSession:()=>Mt,TRACE:()=>ke,TRACE_FUNC_BEGIN:()=>Ge,TRACE_FUNC_END:()=>Ue,Tensor:()=>De,TrainingSession:()=>xt,env:()=>k,registerBackend:()=>le});var Bt=N(()=>{ne(),de(),Et(),re(),x(),G(),He(),C(),Y(),Qe()}),tr=N(()=>{}),jr={};$(jr,{default:()=>Dr});var Cr,Zr,Dr,qr=N(()=>{Ap(),Pr(),zt(),Cr="ort-wasm-proxy-worker",Zr=globalThis.self?.name===Cr,Zr&&(self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Ur(r.wasm).then(()=>{pc(r).then(()=>{postMessage({type:t})},n=>{postMessage({type:t,err:n})})},n=>{postMessage({type:t,err:n})});break;case"init-ep":{let{epName:n,env:s}=r;hc(s,n).then(()=>{postMessage({type:t})},i=>{postMessage({type:t,err:i})});break}case"copy-from":{let{buffer:n}=r,s=Hd(n);postMessage({type:t,out:s});break}case"create":{let{model:n,options:s}=r;fc(n,s).then(i=>{postMessage({type:t,out:i})},i=>{postMessage({type:t,err:i})});break}case"release":mc(r),postMessage({type:t});break;case"run":{let{sessionId:n,inputIndices:s,inputs:i,outputIndices:a,options:u}=r;gc(n,s,i,a,new Array(a.length).fill(null),u).then(d=>{d.some(p=>p[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:d},yc([...i,...d]))},d=>{postMessage({type:t,err:d})});break}case"end-profiling":wc(r),postMessage({type:t});break;default:}}catch(n){postMessage({type:t,err:n})}}),Dr=Zr?null:e=>new Worker(e??we,{type:"module",name:Cr})}),lt={};$(lt,{default:()=>Pe});var j,ge,Pe,rt=N(()=>{ge=(j=import.meta.url,async function(e={}){function t(){return fr.buffer!=Nr.buffer&&Pn(),Nr}function r(){return fr.buffer!=Nr.buffer&&Pn(),er}function n(){return fr.buffer!=Nr.buffer&&Pn(),gr}function s(){return fr.buffer!=Nr.buffer&&Pn(),Xe}function i(){return fr.buffer!=Nr.buffer&&Pn(),Ct}function a(){return fr.buffer!=Nr.buffer&&Pn(),ur}function u(){return fr.buffer!=Nr.buffer&&Pn(),Kr}function d(){return fr.buffer!=Nr.buffer&&Pn(),Zn}var p,g,l=Object.assign({},e),b=new Promise((o,h)=>{p=o,g=h}),M=typeof window=="object",S=typeof importScripts=="function",v=S&&self.name=="em-pthread";l.mountExternalData=(o,h)=>{o.startsWith("./")&&(o=o.substring(2)),(l.Fb||(l.Fb=new Map)).set(o,h)},l.unmountExternalData=()=>{delete l.Fb};var q=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let W=()=>{let o=(w,T,O)=>(...oe)=>{let We=os,it=T?.();oe=w(...oe);let Ft=T?.();return it!==Ft&&(w=Ft,O(it),T=O=null),os!=We?new Promise((Dt,Qt)=>{Bc={resolve:Dt,reject:Qt}}):oe},h=w=>async(...T)=>{try{if(l.Eb)throw Error("Session already started");let O=l.Eb={cc:T[0],errors:[]},oe=await w(...T);if(l.Eb!==O)throw Error("Session mismatch");l.Mb?.flush();let We=O.errors;if(0<We.length){let it=await Promise.all(We);if(it=it.filter(Ft=>Ft),0<it.length)throw Error(it.join(`
`))}return oe}finally{l.Eb=null}};l._OrtCreateSession=o(l._OrtCreateSession,()=>l._OrtCreateSession,w=>l._OrtCreateSession=w),l._OrtRun=h(o(l._OrtRun,()=>l._OrtRun,w=>l._OrtRun=w)),l._OrtRunWithBinding=h(o(l._OrtRunWithBinding,()=>l._OrtRunWithBinding,w=>l._OrtRunWithBinding=w)),l._OrtBindInput=o(l._OrtBindInput,()=>l._OrtBindInput,w=>l._OrtBindInput=w),W=void 0};l.jsepInit=(o,h)=>{if(W?.(),o==="webgpu"){[l.Mb,l.Tb,l.Xb,l.Nb,l.Wb,l.jb,l.Yb,l.$b,l.Ub,l.Vb,l.Zb]=h;let w=l.Mb;l.jsepRegisterBuffer=(T,O,oe,We)=>w.registerBuffer(T,O,oe,We),l.jsepGetBuffer=T=>w.getBuffer(T),l.jsepCreateDownloader=(T,O,oe)=>w.createDownloader(T,O,oe),l.jsepOnReleaseSession=T=>{w.onReleaseSession(T)},l.jsepOnRunStart=T=>w.onRunStart(T),l.ac=(T,O)=>{w.upload(T,O)}}};var F,ee,te=Object.assign({},l),he="./this.program",Ne=(o,h)=>{throw h},Ve="";(M||S)&&(S?Ve=self.location.href:typeof document<"u"&&document.currentScript&&(Ve=document.currentScript.src),j&&(Ve=j),Ve=Ve.startsWith("blob:")?"":Ve.substr(0,Ve.replace(/[?#].*/,"").lastIndexOf("/")+1),S&&(ee=o=>{var h=new XMLHttpRequest;return h.open("GET",o,!1),h.responseType="arraybuffer",h.send(null),new Uint8Array(h.response)}),F=(o,h,w)=>{var T=new XMLHttpRequest;T.open("GET",o,!0),T.responseType="arraybuffer",T.onload=()=>{T.status==200||T.status==0&&T.response?h(T.response):w()},T.onerror=w,T.send(null)});var bt,Vt=console.log.bind(console),Rt=console.error.bind(console),lr=Vt,ar=Rt;if(Object.assign(l,te),te=null,v){let o=function(h){try{var w=h.data,T=w.cmd;if(T==="load"){let O=[];self.onmessage=oe=>O.push(oe),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let oe of O)o(oe);self.onmessage=o};for(let oe of w.handlers)l[oe]&&!l[oe].proxy||(l[oe]=(...We)=>{postMessage({Lb:"callHandler",lc:oe,args:We})},oe=="print"&&(lr=l[oe]),oe=="printErr"&&(ar=l[oe]));fr=w.wasmMemory,Pn(),_r(w.wasmModule)}else if(T==="run"){Vc(w.pthread_ptr,0,0,1,0,0),Oc(w.pthread_ptr),zf(),nh(),Fr||(ef(),Fr=!0);try{Df(w.start_routine,w.arg)}catch(O){if(O!="unwind")throw O}}else T==="cancel"?Qa()&&ac(-1):w.target!=="setimmediate"&&(T==="checkMailbox"?Fr&&Yd():T&&(ar(`worker: received unknown command ${T}`),ar(w)))}catch(O){throw tf(),O}};var _r,Fr=!1;ar=function(...h){h=h.join(" "),console.error(h)},self.alert=function(...h){postMessage({Lb:"alert",text:h.join(" "),nc:Qa()})},l.instantiateWasm=(h,w)=>new Promise(T=>{_r=O=>{O=new WebAssembly.Instance(O,Zp()),w(O),T()}}),self.onunhandledrejection=h=>{throw h.reason||h},self.onmessage=o}l.wasmBinary&&(bt=l.wasmBinary);var fr,Zt,Or,Nr,er,gr,Xe,Ct,ur,Kr,Xr,jn,Zn,zn=!1;function Pn(){var o=fr.buffer;l.HEAP8=Nr=new Int8Array(o),l.HEAP16=gr=new Int16Array(o),l.HEAPU8=er=new Uint8Array(o),l.HEAPU16=Xe=new Uint16Array(o),l.HEAP32=Ct=new Int32Array(o),l.HEAPU32=ur=new Uint32Array(o),l.HEAPF32=Kr=new Float32Array(o),l.HEAPF64=Zn=new Float64Array(o),l.HEAP64=Xr=new BigInt64Array(o),l.HEAPU64=jn=new BigUint64Array(o)}if(!v){if(!((fr=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof q))throw ar("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");Pn()}var vn=[],gn=[],Vs=[],js=0,pi=null;function Hp(){if(--js==0&&pi){var o=pi;pi=null,o()}}function Ha(o){throw ar(o="Aborted("+o+")"),zn=!0,Or=1,o=new WebAssembly.RuntimeError(o+". Build with -sASSERTIONS for more info."),g(o),o}var vc,Kp=o=>o.startsWith("data:application/octet-stream;base64,"),Xp=o=>o.startsWith("file://");function Qp(o){if(o==vc&&bt)return new Uint8Array(bt);if(ee)return ee(o);throw"both async and sync fetching of the wasm failed"}function Yp(o,h,w){return function(T){if(!bt&&(M||S)){if(typeof fetch=="function"&&!Xp(T))return fetch(T,{credentials:"same-origin"}).then(O=>{if(!O.ok)throw`failed to load wasm binary file at '${T}'`;return O.arrayBuffer()}).catch(()=>Qp(T));if(F)return new Promise((O,oe)=>{F(T,We=>O(new Uint8Array(We)),oe)})}return Promise.resolve().then(()=>Qp(T))}(o).then(T=>WebAssembly.instantiate(T,h)).then(w,T=>{ar(`failed to asynchronously prepare wasm: ${T}`),Ha(T)})}function Zp(){return{a:{M:Of,za:Ff,b:Lf,$:oh,z:dh,pa:ch,X:hh,Z:fh,qa:mh,na:_h,ga:gh,ma:wh,J:yh,Y:bh,V:Mh,oa:vh,W:xh,va:Rf,D:Nf,P:Vf,O:Uf,C:Gf,s:qf,p:Hf,E:Kf,y:tm,Q:rm,ta:nm,ja:sm,T:im,aa:am,F:om,ia:Oc,sa:lm,u:um,B:pm,o:hm,m:mm,c:Ic,n:_m,k:ym,Aa:bm,r:Mm,g:vm,v:xm,l:Tm,f:Sm,i:Em,j:Cm,h:$m,e:km,da:Pm,ea:Am,fa:Im,ba:Bh,ca:Lh,S:Fm,d:Om,N:zm,G:Dm,K:Bm,w:Lm,ra:Rm,U:Nm,t:Nh,x:Vm,L:jm,R:Um,ya:Wm,xa:Gm,ka:Uh,la:Wh,_:Cc,A:Gh,I:qh,ha:Hh,H:Kh,a:fr,wa:Ec,ua:Yh,q:Km}}}var xc={859316:(o,h,w,T,O)=>{if(l===void 0||!l.Fb)return 1;if((o=fn(o>>>0)).startsWith("./")&&(o=o.substring(2)),!(o=l.Fb.get(o)))return 2;if(T>>>=0,(h>>>=0)+(w>>>=0)>o.byteLength)return 3;try{let oe=o.subarray(h,h+w);switch(O){case 0:r().set(oe,T>>>0);break;case 1:l.ac(T,oe);break;default:return 4}return 0}catch{return 4}},859999:()=>{l.Ub()},860030:()=>{l.Vb()},860059:()=>{l.Zb()},860084:o=>l.Tb(o),860117:o=>l.Xb(o),860149:(o,h,w)=>{l.Nb(o,h,w,!0)},860188:(o,h,w)=>{l.Nb(o,h,w)},860221:()=>typeof wasmOffsetConverter<"u",860278:o=>{l.jb("Abs",o,void 0)},860329:o=>{l.jb("Neg",o,void 0)},860380:o=>{l.jb("Floor",o,void 0)},860433:o=>{l.jb("Ceil",o,void 0)},860485:o=>{l.jb("Reciprocal",o,void 0)},860543:o=>{l.jb("Sqrt",o,void 0)},860595:o=>{l.jb("Exp",o,void 0)},860646:o=>{l.jb("Erf",o,void 0)},860697:o=>{l.jb("Sigmoid",o,void 0)},860752:(o,h,w)=>{l.jb("HardSigmoid",o,{alpha:h,beta:w})},860831:o=>{l.jb("Log",o,void 0)},860882:o=>{l.jb("Sin",o,void 0)},860933:o=>{l.jb("Cos",o,void 0)},860984:o=>{l.jb("Tan",o,void 0)},861035:o=>{l.jb("Asin",o,void 0)},861087:o=>{l.jb("Acos",o,void 0)},861139:o=>{l.jb("Atan",o,void 0)},861191:o=>{l.jb("Sinh",o,void 0)},861243:o=>{l.jb("Cosh",o,void 0)},861295:o=>{l.jb("Asinh",o,void 0)},861348:o=>{l.jb("Acosh",o,void 0)},861401:o=>{l.jb("Atanh",o,void 0)},861454:o=>{l.jb("Tanh",o,void 0)},861506:o=>{l.jb("Not",o,void 0)},861557:(o,h,w)=>{l.jb("Clip",o,{min:h,max:w})},861626:o=>{l.jb("Clip",o,void 0)},861678:(o,h)=>{l.jb("Elu",o,{alpha:h})},861736:o=>{l.jb("Gelu",o,void 0)},861788:o=>{l.jb("Relu",o,void 0)},861840:(o,h)=>{l.jb("LeakyRelu",o,{alpha:h})},861904:(o,h)=>{l.jb("ThresholdedRelu",o,{alpha:h})},861974:(o,h)=>{l.jb("Cast",o,{to:h})},862032:o=>{l.jb("Add",o,void 0)},862083:o=>{l.jb("Sub",o,void 0)},862134:o=>{l.jb("Mul",o,void 0)},862185:o=>{l.jb("Div",o,void 0)},862236:o=>{l.jb("Pow",o,void 0)},862287:o=>{l.jb("Equal",o,void 0)},862340:o=>{l.jb("Greater",o,void 0)},862395:o=>{l.jb("GreaterOrEqual",o,void 0)},862457:o=>{l.jb("Less",o,void 0)},862509:o=>{l.jb("LessOrEqual",o,void 0)},862568:(o,h,w,T,O)=>{l.jb("ReduceMean",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},862727:(o,h,w,T,O)=>{l.jb("ReduceMax",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},862885:(o,h,w,T,O)=>{l.jb("ReduceMin",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},863043:(o,h,w,T,O)=>{l.jb("ReduceProd",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},863202:(o,h,w,T,O)=>{l.jb("ReduceSum",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},863360:(o,h,w,T,O)=>{l.jb("ReduceL1",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},863517:(o,h,w,T,O)=>{l.jb("ReduceL2",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},863674:(o,h,w,T,O)=>{l.jb("ReduceLogSum",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},863835:(o,h,w,T,O)=>{l.jb("ReduceSumSquare",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},863999:(o,h,w,T,O)=>{l.jb("ReduceLogSumExp",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},864163:o=>{l.jb("Where",o,void 0)},864216:(o,h,w)=>{l.jb("Transpose",o,{perm:h?Array.from(i().subarray(h>>>0,w>>>0)):[]})},864324:(o,h,w,T)=>{l.jb("DepthToSpace",o,{blocksize:h,mode:fn(w),format:T?"NHWC":"NCHW"})},864457:(o,h,w,T)=>{l.jb("DepthToSpace",o,{blocksize:h,mode:fn(w),format:T?"NHWC":"NCHW"})},864590:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe,Mr)=>{l.jb("ConvTranspose",o,{format:Ft?"NHWC":"NCHW",autoPad:h,dilations:[w],group:T,kernelShape:[O],pads:[oe,We],strides:[it],wIsConst:()=>!!t()[Dt>>>0],outputPadding:Qt?Array.from(i().subarray(Qt>>>0,Er>>>0)):[],outputShape:Lr?Array.from(i().subarray(Lr>>>0,Oe>>>0)):[],activation:fn(Mr)})},864991:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe)=>{l.jb("ConvTranspose",o,{format:it?"NHWC":"NCHW",autoPad:h,dilations:Array.from(i().subarray(w>>>0,2+(w>>>0)>>>0)),group:T,kernelShape:Array.from(i().subarray(O>>>0,2+(O>>>0)>>>0)),pads:Array.from(i().subarray(oe>>>0,4+(oe>>>0)>>>0)),strides:Array.from(i().subarray(We>>>0,2+(We>>>0)>>>0)),wIsConst:()=>!!t()[Ft>>>0],outputPadding:Dt?Array.from(i().subarray(Dt>>>0,Qt>>>0)):[],outputShape:Er?Array.from(i().subarray(Er>>>0,Lr>>>0)):[],activation:fn(Oe)})},865556:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe,Mr)=>{l.jb("ConvTranspose",o,{format:Ft?"NHWC":"NCHW",autoPad:h,dilations:[w],group:T,kernelShape:[O],pads:[oe,We],strides:[it],wIsConst:()=>!!t()[Dt>>>0],outputPadding:Qt?Array.from(i().subarray(Qt>>>0,Er>>>0)):[],outputShape:Lr?Array.from(i().subarray(Lr>>>0,Oe>>>0)):[],activation:fn(Mr)})},865957:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe)=>{l.jb("ConvTranspose",o,{format:it?"NHWC":"NCHW",autoPad:h,dilations:Array.from(i().subarray(w>>>0,2+(w>>>0)>>>0)),group:T,kernelShape:Array.from(i().subarray(O>>>0,2+(O>>>0)>>>0)),pads:Array.from(i().subarray(oe>>>0,4+(oe>>>0)>>>0)),strides:Array.from(i().subarray(We>>>0,2+(We>>>0)>>>0)),wIsConst:()=>!!t()[Ft>>>0],outputPadding:Dt?Array.from(i().subarray(Dt>>>0,Qt>>>0)):[],outputShape:Er?Array.from(i().subarray(Er>>>0,Lr>>>0)):[],activation:fn(Oe)})},866522:(o,h)=>{l.jb("GlobalAveragePool",o,{format:h?"NHWC":"NCHW"})},866613:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe)=>{l.jb("AveragePool",o,{format:Oe?"NHWC":"NCHW",auto_pad:h,ceil_mode:w,count_include_pad:T,storage_order:O,dilations:oe?Array.from(i().subarray(oe>>>0,We>>>0)):[],kernel_shape:it?Array.from(i().subarray(it>>>0,Ft>>>0)):[],pads:Dt?Array.from(i().subarray(Dt>>>0,Qt>>>0)):[],strides:Er?Array.from(i().subarray(Er>>>0,Lr>>>0)):[]})},867028:(o,h)=>{l.jb("GlobalAveragePool",o,{format:h?"NHWC":"NCHW"})},867119:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe)=>{l.jb("AveragePool",o,{format:Oe?"NHWC":"NCHW",auto_pad:h,ceil_mode:w,count_include_pad:T,storage_order:O,dilations:oe?Array.from(i().subarray(oe>>>0,We>>>0)):[],kernel_shape:it?Array.from(i().subarray(it>>>0,Ft>>>0)):[],pads:Dt?Array.from(i().subarray(Dt>>>0,Qt>>>0)):[],strides:Er?Array.from(i().subarray(Er>>>0,Lr>>>0)):[]})},867534:(o,h)=>{l.jb("GlobalMaxPool",o,{format:h?"NHWC":"NCHW"})},867621:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe)=>{l.jb("MaxPool",o,{format:Oe?"NHWC":"NCHW",auto_pad:h,ceil_mode:w,count_include_pad:T,storage_order:O,dilations:oe?Array.from(i().subarray(oe>>>0,We>>>0)):[],kernel_shape:it?Array.from(i().subarray(it>>>0,Ft>>>0)):[],pads:Dt?Array.from(i().subarray(Dt>>>0,Qt>>>0)):[],strides:Er?Array.from(i().subarray(Er>>>0,Lr>>>0)):[]})},868032:(o,h)=>{l.jb("GlobalMaxPool",o,{format:h?"NHWC":"NCHW"})},868119:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe)=>{l.jb("MaxPool",o,{format:Oe?"NHWC":"NCHW",auto_pad:h,ceil_mode:w,count_include_pad:T,storage_order:O,dilations:oe?Array.from(i().subarray(oe>>>0,We>>>0)):[],kernel_shape:it?Array.from(i().subarray(it>>>0,Ft>>>0)):[],pads:Dt?Array.from(i().subarray(Dt>>>0,Qt>>>0)):[],strides:Er?Array.from(i().subarray(Er>>>0,Lr>>>0)):[]})},868530:(o,h,w,T,O)=>{l.jb("Gemm",o,{alpha:h,beta:w,transA:T,transB:O})},868634:o=>{l.jb("MatMul",o,void 0)},868688:(o,h,w,T)=>{l.jb("ArgMax",o,{keepDims:!!h,selectLastIndex:!!w,axis:T})},868796:(o,h,w,T)=>{l.jb("ArgMin",o,{keepDims:!!h,selectLastIndex:!!w,axis:T})},868904:(o,h)=>{l.jb("Softmax",o,{axis:h})},868967:(o,h)=>{l.jb("Concat",o,{axis:h})},869027:(o,h,w,T,O)=>{l.jb("Split",o,{axis:h,numOutputs:w,splitSizes:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},869167:o=>{l.jb("Expand",o,void 0)},869221:(o,h)=>{l.jb("Gather",o,{axis:Number(h)})},869292:(o,h)=>{l.jb("GatherElements",o,{axis:Number(h)})},869371:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt)=>{l.jb("Resize",o,{antialias:h,axes:w?Array.from(i().subarray(w>>>0,T>>>0)):[],coordinateTransformMode:fn(O),cubicCoeffA:oe,excludeOutside:We,extrapolationValue:it,keepAspectRatioPolicy:fn(Ft),mode:fn(Dt),nearestMode:fn(Qt)})},869717:(o,h,w,T,O,oe,We)=>{l.jb("Slice",o,{starts:h?Array.from(i().subarray(h>>>0,w>>>0)):[],ends:T?Array.from(i().subarray(T>>>0,O>>>0)):[],axes:oe?Array.from(i().subarray(oe>>>0,We>>>0)):[]})},869933:o=>{l.jb("Tile",o,void 0)},869985:(o,h,w)=>{l.jb("InstanceNormalization",o,{epsilon:h,format:w?"NHWC":"NCHW"})},870099:(o,h,w)=>{l.jb("InstanceNormalization",o,{epsilon:h,format:w?"NHWC":"NCHW"})},870213:o=>{l.jb("Range",o,void 0)},870266:(o,h)=>{l.jb("Einsum",o,{equation:fn(h)})},870347:(o,h,w,T,O)=>{l.jb("Pad",o,{mode:h,value:w,pads:T?Array.from(i().subarray(T>>>0,O>>>0)):[]})},870474:(o,h,w,T,O,oe)=>{l.jb("BatchNormalization",o,{epsilon:h,momentum:w,spatial:!!O,trainingMode:!!T,format:oe?"NHWC":"NCHW"})},870643:(o,h,w,T,O,oe)=>{l.jb("BatchNormalization",o,{epsilon:h,momentum:w,spatial:!!O,trainingMode:!!T,format:oe?"NHWC":"NCHW"})},870812:(o,h,w)=>{l.jb("CumSum",o,{exclusive:Number(h),reverse:Number(w)})},870909:(o,h,w)=>{l.jb("DequantizeLinear",o,{axis:h,blockSize:w})},870999:(o,h,w,T,O,oe,We,it,Ft)=>{l.jb("Attention",o,{numHeads:h,isUnidirectional:w,maskFilterValue:T,scale:O,doRotary:oe,qkvHiddenSizes:We?Array.from(i().subarray(Number(it)>>>0,Number(it)+We>>>0)):[],pastPresentShareBuffer:!!Ft})},871271:o=>{l.jb("BiasAdd",o,void 0)},871326:o=>{l.jb("BiasSplitGelu",o,void 0)},871387:o=>{l.jb("FastGelu",o,void 0)},871443:(o,h,w,T,O,oe,We,it,Ft,Dt,Qt,Er,Lr,Oe,Mr,en)=>{l.jb("Conv",o,{format:Er?"NHWC":"NCHW",auto_pad:h,dilations:w?Array.from(i().subarray(w>>>0,T>>>0)):[],group:O,kernel_shape:oe?Array.from(i().subarray(oe>>>0,We>>>0)):[],pads:it?Array.from(i().subarray(it>>>0,Ft>>>0)):[],strides:Dt?Array.from(i().subarray(Dt>>>0,Qt>>>0)):[],w_is_const:()=>!!t()[Lr>>>0],activation:fn(Oe),activation_params:Mr?Array.from(u().subarray(Mr>>>0,en>>>0)):[]})},871939:o=>{l.jb("Gelu",o,void 0)},871991:(o,h,w,T)=>{l.jb("GroupQueryAttention",o,{numHeads:h,kvNumHeads:w,scale:T})},872104:(o,h,w,T)=>{l.jb("LayerNormalization",o,{axis:h,epsilon:w,simplified:!!T})},872215:(o,h,w,T)=>{l.jb("LayerNormalization",o,{axis:h,epsilon:w,simplified:!!T})},872326:(o,h,w,T,O,oe)=>{l.jb("MatMulNBits",o,{k:h,n:w,accuracyLevel:T,bits:O,blockSize:oe})},872453:(o,h,w,T,O,oe)=>{l.jb("MultiHeadAttention",o,{numHeads:h,isUnidirectional:w,maskFilterValue:T,scale:O,doRotary:oe})},872612:(o,h)=>{l.jb("QuickGelu",o,{alpha:h})},872676:(o,h,w,T,O)=>{l.jb("RotaryEmbedding",o,{interleaved:!!h,numHeads:w,rotaryEmbeddingDim:T,scale:O})},872815:(o,h,w)=>{l.jb("SkipLayerNormalization",o,{epsilon:h,simplified:!!w})},872917:(o,h,w)=>{l.jb("SkipLayerNormalization",o,{epsilon:h,simplified:!!w})},873019:(o,h,w,T)=>{l.jb("GatherBlockQuantized",o,{gatherAxis:h,quantizeAxis:w,blockSize:T})},873140:o=>{l.Yb(o)},873174:(o,h)=>l.$b(o,h,l.Eb.cc,l.Eb.errors)};function Ff(o,h,w){return Ih(async()=>{await l.Wb(o,h,w)})}function Of(){return typeof wasmOffsetConverter<"u"}function Tc(o){this.name="ExitStatus",this.message=`Program terminated with exit(${o})`,this.status=o}var Sc=o=>{o.terminate(),o.onmessage=()=>{}},Jp=o=>{Us.length==0&&(ih(),sh(Us[0]));var h=Us.pop();if(!h)return 6;fi.push(h),is[o.Ab]=h,h.Ab=o.Ab;var w={cmd:"run",start_routine:o.dc,arg:o.Pb,pthread_ptr:o.Ab};return h.postMessage(w,o.jc),0},hi=0,Jr=(o,h,...w)=>{for(var T=2*w.length,O=Wc(),oe=Uc(8*T),We=oe>>>3,it=0;it<w.length;it++){var Ft=w[it];typeof Ft=="bigint"?(Xr[We+2*it]=1n,Xr[We+2*it+1]=Ft):(Xr[We+2*it]=0n,d()[We+2*it+1>>>0]=Ft)}return o=rf(o,0,T,oe,h),oc(O),o};function Ec(o){if(v)return Jr(0,1,o);if(Or=o,!(0<hi)){for(var h of fi)Sc(h);for(h of Us)Sc(h);Us=[],fi=[],is=[],zn=!0}Ne(o,new Tc(o))}function eh(o){if(v)return Jr(1,0,o);Cc(o)}var Cc=o=>{if(Or=o,v)throw eh(o),"unwind";Ec(o)},Us=[],fi=[],th=[],is={},rh=o=>{var h=o.Ab;delete is[h],Us.push(o),fi.splice(fi.indexOf(o),1),o.Ab=0,jc(h)};function nh(){th.forEach(o=>o())}var sh=o=>new Promise(h=>{o.onmessage=O=>{var oe=(O=O.data).cmd;if(O.targetThread&&O.targetThread!=Qa()){var We=is[O.targetThread];We?We.postMessage(O,O.transferList):ar(`Internal error! Worker sent a message "${oe}" to target pthread ${O.targetThread}, but that thread no longer exists!`)}else oe==="checkMailbox"?Yd():oe==="spawnThread"?Jp(O):oe==="cleanupThread"?rh(is[O.thread]):oe==="killThread"?(O=O.thread,oe=is[O],delete is[O],Sc(oe),jc(O),fi.splice(fi.indexOf(oe),1),oe.Ab=0):oe==="cancelThread"?is[O.thread].postMessage({cmd:"cancel"}):oe==="loaded"?(o.loaded=!0,h(o)):oe==="alert"?alert(`Thread ${O.threadId}: ${O.text}`):O.target==="setimmediate"?o.postMessage(O):oe==="callHandler"?l[O.handler](...O.args):oe&&ar(`worker sent an unknown command ${oe}`)},o.onerror=O=>{throw ar(`worker sent an error! ${O.filename}:${O.lineno}: ${O.message}`),O};var w,T=[];for(w of[])l.hasOwnProperty(w)&&T.push(w);o.postMessage({cmd:"load",handlers:T,wasmMemory:fr,wasmModule:Zt})});function ih(){var o=new Worker(new URL(import.meta.url),{type:"module",workerData:"em-pthread",name:"em-pthread"});Us.push(o)}var Qd=o=>{for(;0<o.length;)o.shift()(l)},zf=()=>{var o=Qa(),h=a()[o+52>>>2>>>0];o=a()[o+56>>>2>>>0],sf(h,h-o),oc(h)},Df=(o,h)=>{hi=0,o=af(o,h),0<hi?Or=o:ac(o)};class Bf{constructor(h){this.Ib=h-24}}function Lf(o,h,w){var T=new Bf(o>>>=0);throw h>>>=0,w>>>=0,a()[T.Ib+16>>>2>>>0]=0,a()[T.Ib+4>>>2>>>0]=h,a()[T.Ib+8>>>2>>>0]=w,o}function ah(o,h,w,T){return v?Jr(2,1,o,h,w,T):oh(o,h,w,T)}function oh(o,h,w,T){if(o>>>=0,h>>>=0,w>>>=0,T>>>=0,q===void 0)return ar("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var O=[];return v&&O.length===0?ah(o,h,w,T):(o={dc:w,Ab:o,Pb:T,jc:O},v?(o.Lb="spawnThread",postMessage(o,O),0):Jp(o))}var lh=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,uh=(o,h,w)=>{var T=(h>>>=0)+w;for(w=h;o[w]&&!(w>=T);)++w;if(16<w-h&&o.buffer&&lh)return lh.decode(o.buffer instanceof q?o.slice(h,w):o.subarray(h,w));for(T="";h<w;){var O=o[h++];if(128&O){var oe=63&o[h++];if((224&O)==192)T+=String.fromCharCode((31&O)<<6|oe);else{var We=63&o[h++];65536>(O=(240&O)==224?(15&O)<<12|oe<<6|We:(7&O)<<18|oe<<12|We<<6|63&o[h++])?T+=String.fromCharCode(O):(O-=65536,T+=String.fromCharCode(55296|O>>10,56320|1023&O))}}else T+=String.fromCharCode(O)}return T},fn=(o,h)=>(o>>>=0)?uh(r(),o,h):"";function dh(o,h,w){return v?Jr(3,1,o,h,w):0}function ch(o,h){if(v)return Jr(4,1,o,h)}var $c=o=>{for(var h=0,w=0;w<o.length;++w){var T=o.charCodeAt(w);127>=T?h++:2047>=T?h+=2:55296<=T&&57343>=T?(h+=4,++w):h+=3}return h},ph=(o,h,w,T)=>{if(!(0<T))return 0;var O=w>>>=0;T=w+T-1;for(var oe=0;oe<o.length;++oe){var We=o.charCodeAt(oe);if(55296<=We&&57343>=We&&(We=65536+((1023&We)<<10)|1023&o.charCodeAt(++oe)),127>=We){if(w>=T)break;h[w++>>>0]=We}else{if(2047>=We){if(w+1>=T)break;h[w++>>>0]=192|We>>6}else{if(65535>=We){if(w+2>=T)break;h[w++>>>0]=224|We>>12}else{if(w+3>=T)break;h[w++>>>0]=240|We>>18,h[w++>>>0]=128|We>>12&63}h[w++>>>0]=128|We>>6&63}h[w++>>>0]=128|63&We}}return h[w>>>0]=0,w-O},Ka=(o,h,w)=>ph(o,r(),h,w);function hh(o,h){if(v)return Jr(5,1,o,h)}function fh(o,h,w){if(v)return Jr(6,1,o,h,w)}function mh(o,h,w){return v?Jr(7,1,o,h,w):0}function _h(o,h){if(v)return Jr(8,1,o,h)}function gh(o,h,w){if(v)return Jr(9,1,o,h,w)}function wh(o,h,w,T){if(v)return Jr(10,1,o,h,w,T)}function yh(o,h,w,T){if(v)return Jr(11,1,o,h,w,T)}function bh(o,h,w,T){if(v)return Jr(12,1,o,h,w,T)}function Mh(o){if(v)return Jr(13,1,o)}function vh(o,h){if(v)return Jr(14,1,o,h)}function xh(o,h,w){if(v)return Jr(15,1,o,h,w)}var Th,Ws,Rf=()=>{Ha("")},as=o=>{for(var h="";r()[o>>>0];)h+=Th[r()[o++>>>0]];return h},kc={},Pc={};function gs(o,h,w={}){if(!("argPackAdvance"in h))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(T,O,oe={}){var We=O.name;if(!T)throw new Ws(`type "${We}" must have a positive integer typeid pointer`);if(Pc.hasOwnProperty(T)){if(oe.Rb)return;throw new Ws(`Cannot register type '${We}' twice`)}Pc[T]=O,kc.hasOwnProperty(T)&&(O=kc[T],delete kc[T],O.forEach(it=>it()))}(o,h,w)}var Sh=(o,h,w)=>{switch(h){case 1:return w?T=>t()[T>>>0]:T=>r()[T>>>0];case 2:return w?T=>n()[T>>>1>>>0]:T=>s()[T>>>1>>>0];case 4:return w?T=>i()[T>>>2>>>0]:T=>a()[T>>>2>>>0];case 8:return w?T=>Xr[T>>>3]:T=>jn[T>>>3];default:throw new TypeError(`invalid integer width (${h}): ${o}`)}};function Nf(o,h,w){w>>>=0,gs(o>>>=0,{name:h=as(h>>>0),fromWireType:T=>T,toWireType:function(T,O){if(typeof O!="bigint"&&typeof O!="number")throw O=O===null?"null":(T=typeof O)=="object"||T==="array"||T==="function"?O.toString():""+O,new TypeError(`Cannot convert "${O}" to ${this.name}`);return typeof O=="number"&&(O=BigInt(O)),O},argPackAdvance:Gs,readValueFromPointer:Sh(h,w,h.indexOf("u")==-1),Db:null})}var Gs=8;function Vf(o,h,w,T){gs(o>>>=0,{name:h=as(h>>>0),fromWireType:function(O){return!!O},toWireType:function(O,oe){return oe?w:T},argPackAdvance:Gs,readValueFromPointer:function(O){return this.fromWireType(r()[O>>>0])},Db:null})}var Ac=[],ws=[];function Ic(o){9<(o>>>=0)&&--ws[o+1]==0&&(ws[o]=void 0,Ac.push(o))}var Un=o=>{if(!o)throw new Ws("Cannot use deleted val. handle = "+o);return ws[o]},Wn=o=>{switch(o){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let h=Ac.pop()||ws.length;return ws[h]=o,ws[h+1]=1,h}};function Fc(o){return this.fromWireType(a()[o>>>2>>>0])}var jf={name:"emscripten::val",fromWireType:o=>{var h=Un(o);return Ic(o),h},toWireType:(o,h)=>Wn(h),argPackAdvance:Gs,readValueFromPointer:Fc,Db:null};function Uf(o){return gs(o>>>0,jf)}var Wf=(o,h)=>{switch(h){case 4:return function(w){return this.fromWireType(u()[w>>>2>>>0])};case 8:return function(w){return this.fromWireType(d()[w>>>3>>>0])};default:throw new TypeError(`invalid float width (${h}): ${o}`)}};function Gf(o,h,w){w>>>=0,gs(o>>>=0,{name:h=as(h>>>0),fromWireType:T=>T,toWireType:(T,O)=>O,argPackAdvance:Gs,readValueFromPointer:Wf(h,w),Db:null})}function qf(o,h,w,T,O){if(o>>>=0,w>>>=0,h=as(h>>>0),O===-1&&(O=4294967295),O=it=>it,T===0){var oe=32-8*w;O=it=>it<<oe>>>oe}var We=h.includes("unsigned")?function(it,Ft){return Ft>>>0}:function(it,Ft){return Ft};gs(o,{name:h,fromWireType:O,toWireType:We,argPackAdvance:Gs,readValueFromPointer:Sh(h,w,T!==0),Db:null})}function Hf(o,h,w){function T(oe){var We=a()[oe>>>2>>>0];return oe=a()[oe+4>>>2>>>0],new O(t().buffer,oe,We)}var O=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][h];gs(o>>>=0,{name:w=as(w>>>0),fromWireType:T,argPackAdvance:Gs,readValueFromPointer:T},{Rb:!0})}function Kf(o,h){o>>>=0;var w=(h=as(h>>>0))==="std::string";gs(o,{name:h,fromWireType:function(T){var O=a()[T>>>2>>>0],oe=T+4;if(w)for(var We=oe,it=0;it<=O;++it){var Ft=oe+it;if(it==O||r()[Ft>>>0]==0){if(We=fn(We,Ft-We),Dt===void 0)var Dt=We;else Dt+="\0",Dt+=We;We=Ft+1}}else{for(Dt=Array(O),it=0;it<O;++it)Dt[it]=String.fromCharCode(r()[oe+it>>>0]);Dt=Dt.join("")}return ls(T),Dt},toWireType:function(T,O){O instanceof ArrayBuffer&&(O=new Uint8Array(O));var oe=typeof O=="string";if(!(oe||O instanceof Uint8Array||O instanceof Uint8ClampedArray||O instanceof Int8Array))throw new Ws("Cannot pass non-string to std::string");var We=w&&oe?$c(O):O.length,it=ic(4+We+1),Ft=it+4;if(a()[it>>>2>>>0]=We,w&&oe)Ka(O,Ft,We+1);else if(oe)for(oe=0;oe<We;++oe){var Dt=O.charCodeAt(oe);if(255<Dt)throw ls(Ft),new Ws("String has UTF-16 code units that do not fit in 8 bits");r()[Ft+oe>>>0]=Dt}else for(oe=0;oe<We;++oe)r()[Ft+oe>>>0]=O[oe];return T!==null&&T.push(ls,it),it},argPackAdvance:Gs,readValueFromPointer:Fc,Db(T){ls(T)}})}var Eh=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Xf=(o,h)=>{for(var w=o>>1,T=w+h/2;!(w>=T)&&s()[w>>>0];)++w;if(32<(w<<=1)-o&&Eh)return Eh.decode(r().slice(o,w));for(w="",T=0;!(T>=h/2);++T){var O=n()[o+2*T>>>1>>>0];if(O==0)break;w+=String.fromCharCode(O)}return w},Qf=(o,h,w)=>{if(w??(w=2147483647),2>w)return 0;var T=h;w=(w-=2)<2*o.length?w/2:o.length;for(var O=0;O<w;++O){var oe=o.charCodeAt(O);n()[h>>>1>>>0]=oe,h+=2}return n()[h>>>1>>>0]=0,h-T},Yf=o=>2*o.length,Zf=(o,h)=>{for(var w=0,T="";!(w>=h/4);){var O=i()[o+4*w>>>2>>>0];if(O==0)break;++w,65536<=O?(O-=65536,T+=String.fromCharCode(55296|O>>10,56320|1023&O)):T+=String.fromCharCode(O)}return T},Jf=(o,h,w)=>{if(h>>>=0,w??(w=2147483647),4>w)return 0;var T=h;w=T+w-4;for(var O=0;O<o.length;++O){var oe=o.charCodeAt(O);if(55296<=oe&&57343>=oe&&(oe=65536+((1023&oe)<<10)|1023&o.charCodeAt(++O)),i()[h>>>2>>>0]=oe,(h+=4)+4>w)break}return i()[h>>>2>>>0]=0,h-T},em=o=>{for(var h=0,w=0;w<o.length;++w){var T=o.charCodeAt(w);55296<=T&&57343>=T&&++w,h+=4}return h};function tm(o,h,w){if(o>>>=0,h>>>=0,w=as(w>>>=0),h===2)var T=Xf,O=Qf,oe=Yf,We=it=>s()[it>>>1>>>0];else h===4&&(T=Zf,O=Jf,oe=em,We=it=>a()[it>>>2>>>0]);gs(o,{name:w,fromWireType:it=>{for(var Ft,Dt=a()[it>>>2>>>0],Qt=it+4,Er=0;Er<=Dt;++Er){var Lr=it+4+Er*h;Er!=Dt&&We(Lr)!=0||(Qt=T(Qt,Lr-Qt),Ft===void 0?Ft=Qt:(Ft+="\0",Ft+=Qt),Qt=Lr+h)}return ls(it),Ft},toWireType:(it,Ft)=>{if(typeof Ft!="string")throw new Ws(`Cannot pass non-string to C++ string type ${w}`);var Dt=oe(Ft),Qt=ic(4+Dt+h);return a()[Qt>>>2>>>0]=Dt/h,O(Ft,Qt+4,Dt+h),it!==null&&it.push(ls,Qt),Qt},argPackAdvance:Gs,readValueFromPointer:Fc,Db(it){ls(it)}})}function rm(o,h){gs(o>>>=0,{Sb:!0,name:h=as(h>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var nm=()=>1;function sm(o){Vc(o>>>0,!S,1,!M,131072,!1),nh()}var Ch=o=>{if(!zn)try{if(o(),!(0<hi))try{v?ac(Or):Cc(Or)}catch(h){h instanceof Tc||h=="unwind"||Ne(1,h)}}catch(h){h instanceof Tc||h=="unwind"||Ne(1,h)}};function Oc(o){o>>>=0,typeof Atomics.kc=="function"&&(Atomics.kc(i(),o>>>2,o).value.then(Yd),o+=128,Atomics.store(i(),o>>>2,1))}var Yd=()=>{var o=Qa();o&&(Oc(o),Ch(nf))};function im(o,h){(o>>>=0)==h>>>0?setTimeout(Yd):v?postMessage({targetThread:o,cmd:"checkMailbox"}):(o=is[o])&&o.postMessage({cmd:"checkMailbox"})}var zc=[];function am(o,h,w,T,O){for(h>>>=0,T/=2,zc.length=T,w=O>>>0>>>3,O=0;O<T;O++)zc[O]=Xr[w+2*O]?Xr[w+2*O+1]:d()[w+2*O+1>>>0];return(h?xc[h]:Xm[o])(...zc)}function om(o){o>>>=0,v?postMessage({cmd:"cleanupThread",thread:o}):rh(is[o])}function lm(o){}var Dc=(o,h)=>{var w=Pc[o];if(w===void 0)throw o=Jh(o),w=as(o),ls(o),new Ws(`${h} has unknown type ${w}`);return w},$h=(o,h,w)=>{var T=[];return o=o.toWireType(T,w),T.length&&(a()[h>>>2>>>0]=Wn(T)),o};function um(o,h,w){return h>>>=0,w>>>=0,o=Un(o>>>0),h=Dc(h,"emval::as"),$h(h,w,o)}var Zd=o=>{try{o()}catch(h){Ha(h)}},qs=0,os=null,kh=0,Jd=[],Ph={},Ah={},dm=0,Bc=null,cm=[];function Ih(o){return function(h){if(!zn){if(qs===0){var w=!1,T=!1;h((O=0)=>{if(!zn&&(kh=O,w=!0,T)){qs=2,Zd(()=>uf(os)),typeof Browser<"u"&&Browser.Jb.Qb&&Browser.Jb.resume(),O=!1;try{var oe=function(){var Ft=i()[os+8>>>2>>>0];return Ft=qt[Ah[Ft]],--hi,Ft()}()}catch(Ft){oe=Ft,O=!0}var We=!1;if(!os){var it=Bc;it&&(Bc=null,(O?it.reject:it.resolve)(oe),We=!0)}if(O&&!We)throw oe}}),T=!0,w||(qs=1,os=function(){var O=ic(65548),oe=O+12;a()[O>>>2>>>0]=oe,a()[O+4>>>2>>>0]=oe+65536,oe=Jd[0];var We=Ph[oe];return We===void 0&&(We=dm++,Ph[oe]=We,Ah[We]=oe),oe=We,i()[O+8>>>2>>>0]=oe,O}(),typeof Browser<"u"&&Browser.Jb.Qb&&Browser.Jb.pause(),Zd(()=>of(os)))}else qs===2?(qs=0,Zd(df),ls(os),os=null,cm.forEach(Ch)):Ha(`invalid state: ${qs}`);return kh}}(h=>{o().then(h)})}function pm(o){return o>>>=0,Ih(()=>(o=Un(o)).then(Wn))}var ec=[];function hm(o,h,w,T){return w>>>=0,T>>>=0,(o=ec[o>>>0])(null,h=Un(h>>>0),w,T)}var fm={},tc=o=>{var h=fm[o];return h===void 0?as(o):h};function mm(o,h,w,T,O){return w>>>=0,T>>>=0,O>>>=0,(o=ec[o>>>0])(h=Un(h>>>0),h[w=tc(w)],T,O)}var Fh=()=>typeof globalThis=="object"?globalThis:Function("return this")();function _m(o){return(o>>>=0)==0?Wn(Fh()):(o=tc(o),Wn(Fh()[o]))}var gm=o=>{var h=ec.length;return ec.push(o),h},wm=(o,h)=>{for(var w=Array(o),T=0;T<o;++T)w[T]=Dc(a()[h+4*T>>>2>>>0],"parameter "+T);return w},Oh=(o,h)=>Object.defineProperty(h,"name",{value:o});function ym(o,h,w){var T=(h=wm(o,h>>>0)).shift();o--;var O=`return function (obj, func, destructorsRef, args) {
`,oe=0,We=[];w===0&&We.push("obj");for(var it=["retType"],Ft=[T],Dt=0;Dt<o;++Dt)We.push("arg"+Dt),it.push("argType"+Dt),Ft.push(h[Dt]),O+=`  var arg${Dt} = argType${Dt}.readValueFromPointer(args${oe?"+"+oe:""});
`,oe+=h[Dt].argPackAdvance;return O+=`  var rv = ${w===1?"new func":"func.call"}(${We.join(", ")});
`,T.Sb||(it.push("emval_returnValue"),Ft.push($h),O+=`  return emval_returnValue(retType, destructorsRef, rv);
`),it.push(O+`};
`),o=function(Qt){var Er=Function;if(!(Er instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof Er} which is not a function`);var Lr=Oh(Er.name||"unknownFunctionName",function(){});return Lr.prototype=Er.prototype,Lr=new Lr,(Qt=Er.apply(Lr,Qt))instanceof Object?Qt:Lr}(it)(...Ft),w=`methodCaller<(${h.map(Qt=>Qt.name).join(", ")}) => ${T.name}>`,gm(Oh(w,o))}function bm(o){return o=tc(o>>>0),Wn(l[o])}function Mm(o,h){return h>>>=0,o=Un(o>>>0),h=Un(h),Wn(o[h])}function vm(o){9<(o>>>=0)&&(ws[o+1]+=1)}function xm(){return Wn([])}function Tm(o){o=Un(o>>>0);for(var h=Array(o.length),w=0;w<o.length;w++)h[w]=o[w];return Wn(h)}function Sm(o){return Wn(tc(o>>>0))}function Em(){return Wn({})}function Cm(o){for(var h=Un(o>>>=0);h.length;){var w=h.pop();h.pop()(w)}Ic(o)}function $m(o,h,w){h>>>=0,w>>>=0,o=Un(o>>>0),h=Un(h),w=Un(w),o[h]=w}function km(o,h){return h>>>=0,o=(o=Dc(o>>>0,"_emval_take_value")).readValueFromPointer(h),Wn(o)}function Pm(o,h){o=-9007199254740992>o||9007199254740992<o?NaN:Number(o),h>>>=0,o=new Date(1e3*o),i()[h>>>2>>>0]=o.getUTCSeconds(),i()[h+4>>>2>>>0]=o.getUTCMinutes(),i()[h+8>>>2>>>0]=o.getUTCHours(),i()[h+12>>>2>>>0]=o.getUTCDate(),i()[h+16>>>2>>>0]=o.getUTCMonth(),i()[h+20>>>2>>>0]=o.getUTCFullYear()-1900,i()[h+24>>>2>>>0]=o.getUTCDay(),o=(o.getTime()-Date.UTC(o.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[h+28>>>2>>>0]=o}var Xa=o=>o%4==0&&(o%100!=0||o%400==0),zh=[0,31,60,91,121,152,182,213,244,274,305,335],Dh=[0,31,59,90,120,151,181,212,243,273,304,334];function Am(o,h){o=-9007199254740992>o||9007199254740992<o?NaN:Number(o),h>>>=0,o=new Date(1e3*o),i()[h>>>2>>>0]=o.getSeconds(),i()[h+4>>>2>>>0]=o.getMinutes(),i()[h+8>>>2>>>0]=o.getHours(),i()[h+12>>>2>>>0]=o.getDate(),i()[h+16>>>2>>>0]=o.getMonth(),i()[h+20>>>2>>>0]=o.getFullYear()-1900,i()[h+24>>>2>>>0]=o.getDay();var w=(Xa(o.getFullYear())?zh:Dh)[o.getMonth()]+o.getDate()-1|0;i()[h+28>>>2>>>0]=w,i()[h+36>>>2>>>0]=-60*o.getTimezoneOffset(),w=new Date(o.getFullYear(),6,1).getTimezoneOffset();var T=new Date(o.getFullYear(),0,1).getTimezoneOffset();o=0|(w!=T&&o.getTimezoneOffset()==Math.min(T,w)),i()[h+32>>>2>>>0]=o}function Im(o){o>>>=0;var h=new Date(i()[o+20>>>2>>>0]+1900,i()[o+16>>>2>>>0],i()[o+12>>>2>>>0],i()[o+8>>>2>>>0],i()[o+4>>>2>>>0],i()[o>>>2>>>0],0),w=i()[o+32>>>2>>>0],T=h.getTimezoneOffset(),O=new Date(h.getFullYear(),6,1).getTimezoneOffset(),oe=new Date(h.getFullYear(),0,1).getTimezoneOffset(),We=Math.min(oe,O);return 0>w?i()[o+32>>>2>>>0]=+(O!=oe&&We==T):0<w!=(We==T)&&(O=Math.max(oe,O),h.setTime(h.getTime()+6e4*((0<w?We:O)-T))),i()[o+24>>>2>>>0]=h.getDay(),w=(Xa(h.getFullYear())?zh:Dh)[h.getMonth()]+h.getDate()-1|0,i()[o+28>>>2>>>0]=w,i()[o>>>2>>>0]=h.getSeconds(),i()[o+4>>>2>>>0]=h.getMinutes(),i()[o+8>>>2>>>0]=h.getHours(),i()[o+12>>>2>>>0]=h.getDate(),i()[o+16>>>2>>>0]=h.getMonth(),i()[o+20>>>2>>>0]=h.getYear(),o=h.getTime(),BigInt(isNaN(o)?-1:o/1e3)}function Bh(o,h,w,T,O,oe,We){return v?Jr(16,1,o,h,w,T,O,oe,We):-52}function Lh(o,h,w,T,O,oe){if(v)return Jr(17,1,o,h,w,T,O,oe)}function Fm(o,h,w,T){o>>>=0,h>>>=0,w>>>=0,T>>>=0;var O=new Date().getFullYear(),oe=new Date(O,0,1),We=new Date(O,6,1);O=oe.getTimezoneOffset();var it=We.getTimezoneOffset(),Ft=Math.max(O,it);a()[o>>>2>>>0]=60*Ft,i()[h>>>2>>>0]=+(O!=it),oe=(o=Dt=>Dt.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(oe),We=o(We),it<O?(Ka(oe,w,17),Ka(We,T,17)):(Ka(oe,T,17),Ka(We,w,17))}var Lc=[],Rh=(o,h)=>{Lc.length=0;for(var w;w=r()[o++>>>0];){var T=w!=105;h+=(T&=w!=112)&&h%8?4:0,Lc.push(w==112?a()[h>>>2>>>0]:w==106?Xr[h>>>3]:w==105?i()[h>>>2>>>0]:d()[h>>>3>>>0]),h+=T?8:4}return Lc};function Om(o,h,w){return o>>>=0,h=Rh(h>>>0,w>>>0),xc[o](...h)}function zm(o,h,w){return o>>>=0,h=Rh(h>>>0,w>>>0),xc[o](...h)}var Dm=()=>{},Bm=()=>Date.now();function Lm(o,h){return ar(fn(o>>>0,h>>>0))}var Nh,Rm=()=>{throw hi+=1,"unwind"};function Nm(){return 4294901760}Nh=()=>performance.timeOrigin+performance.now();var Vm=()=>navigator.hardwareConcurrency;function jm(){return Ha("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function Um(o){o>>>=0;var h=r().length;if(o<=h||4294901760<o)return!1;for(var w=1;4>=w;w*=2){var T=h*(1+.2/w);T=Math.min(T,o+100663296);var O=Math;T=Math.max(o,T);e:{O=(O.min.call(O,4294901760,T+(65536-T%65536)%65536)-fr.buffer.byteLength+65535)/65536;try{fr.grow(O),Pn();var oe=1;break e}catch{}oe=void 0}if(oe)return!0}return!1}var rc=()=>(Ha("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),od={},Vh=o=>{o.forEach(h=>{rc()})};function Wm(){var o=Error().stack.toString().split(`
`);return o[0]=="Error"&&o.shift(),Vh(o),od.Ob=rc(),od.bc=o,od.Ob}function Gm(o,h,w){if(o>>>=0,h>>>=0,od.Ob==o)var T=od.bc;else(T=Error().stack.toString().split(`
`))[0]=="Error"&&T.shift(),Vh(T);for(var O=3;T[O]&&rc()!=o;)++O;for(o=0;o<w&&T[o+O];++o)i()[h+4*o>>>2>>>0]=rc();return o}var Rc,Nc={},jh=()=>{if(!Rc){var o,h={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:he};for(o in Nc)Nc[o]===void 0?delete h[o]:h[o]=Nc[o];var w=[];for(o in h)w.push(`${o}=${h[o]}`);Rc=w}return Rc};function Uh(o,h){if(v)return Jr(18,1,o,h);o>>>=0,h>>>=0;var w=0;return jh().forEach((T,O)=>{var oe=h+w;for(O=a()[o+4*O>>>2>>>0]=oe,oe=0;oe<T.length;++oe)t()[O++>>>0]=T.charCodeAt(oe);t()[O>>>0]=0,w+=T.length+1}),0}function Wh(o,h){if(v)return Jr(19,1,o,h);o>>>=0,h>>>=0;var w=jh();a()[o>>>2>>>0]=w.length;var T=0;return w.forEach(O=>T+=O.length+1),a()[h>>>2>>>0]=T,0}function Gh(o){return v?Jr(20,1,o):52}function qh(o,h,w,T){return v?Jr(21,1,o,h,w,T):52}function Hh(o,h,w,T){return v?Jr(22,1,o,h,w,T):70}var qm=[null,[],[]];function Kh(o,h,w,T){if(v)return Jr(23,1,o,h,w,T);h>>>=0,w>>>=0,T>>>=0;for(var O=0,oe=0;oe<w;oe++){var We=a()[h>>>2>>>0],it=a()[h+4>>>2>>>0];h+=8;for(var Ft=0;Ft<it;Ft++){var Dt=r()[We+Ft>>>0],Qt=qm[o];Dt===0||Dt===10?((o===1?lr:ar)(uh(Qt,0)),Qt.length=0):Qt.push(Dt)}O+=it}return a()[T>>>2>>>0]=O,0}var Xh=[31,29,31,30,31,30,31,31,30,31,30,31],Qh=[31,28,31,30,31,30,31,31,30,31,30,31],Hm=(o,h)=>{t().set(o,h>>>0)};function Yh(o,h,w,T){function O(Oe,Mr,en){for(Oe=typeof Oe=="number"?Oe.toString():Oe||"";Oe.length<Mr;)Oe=en[0]+Oe;return Oe}function oe(Oe,Mr){return O(Oe,Mr,"0")}function We(Oe,Mr){function en(pf){return 0>pf?-1:0<pf?1:0}var mi;return(mi=en(Oe.getFullYear()-Mr.getFullYear()))===0&&(mi=en(Oe.getMonth()-Mr.getMonth()))===0&&(mi=en(Oe.getDate()-Mr.getDate())),mi}function it(Oe){switch(Oe.getDay()){case 0:return new Date(Oe.getFullYear()-1,11,29);case 1:return Oe;case 2:return new Date(Oe.getFullYear(),0,3);case 3:return new Date(Oe.getFullYear(),0,2);case 4:return new Date(Oe.getFullYear(),0,1);case 5:return new Date(Oe.getFullYear()-1,11,31);case 6:return new Date(Oe.getFullYear()-1,11,30)}}function Ft(Oe){var Mr=Oe.Bb;for(Oe=new Date(new Date(Oe.Cb+1900,0,1).getTime());0<Mr;){var en=Oe.getMonth(),mi=(Xa(Oe.getFullYear())?Xh:Qh)[en];if(!(Mr>mi-Oe.getDate())){Oe.setDate(Oe.getDate()+Mr);break}Mr-=mi-Oe.getDate()+1,Oe.setDate(1),11>en?Oe.setMonth(en+1):(Oe.setMonth(0),Oe.setFullYear(Oe.getFullYear()+1))}return en=new Date(Oe.getFullYear()+1,0,4),Mr=it(new Date(Oe.getFullYear(),0,4)),en=it(en),0>=We(Mr,Oe)?0>=We(en,Oe)?Oe.getFullYear()+1:Oe.getFullYear():Oe.getFullYear()-1}o>>>=0,h>>>=0,w>>>=0,T>>>=0;var Dt=a()[T+40>>>2>>>0];for(var Qt in T={hc:i()[T>>>2>>>0],fc:i()[T+4>>>2>>>0],Gb:i()[T+8>>>2>>>0],Kb:i()[T+12>>>2>>>0],Hb:i()[T+16>>>2>>>0],Cb:i()[T+20>>>2>>>0],ub:i()[T+24>>>2>>>0],Bb:i()[T+28>>>2>>>0],oc:i()[T+32>>>2>>>0],ec:i()[T+36>>>2>>>0],ic:Dt?fn(Dt):""},w=fn(w),Dt={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})w=w.replace(new RegExp(Qt,"g"),Dt[Qt]);var Er="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Lr="January February March April May June July August September October November December".split(" ");for(Qt in Dt={"%a":Oe=>Er[Oe.ub].substring(0,3),"%A":Oe=>Er[Oe.ub],"%b":Oe=>Lr[Oe.Hb].substring(0,3),"%B":Oe=>Lr[Oe.Hb],"%C":Oe=>oe((Oe.Cb+1900)/100|0,2),"%d":Oe=>oe(Oe.Kb,2),"%e":Oe=>O(Oe.Kb,2," "),"%g":Oe=>Ft(Oe).toString().substring(2),"%G":Ft,"%H":Oe=>oe(Oe.Gb,2),"%I":Oe=>((Oe=Oe.Gb)==0?Oe=12:12<Oe&&(Oe-=12),oe(Oe,2)),"%j":Oe=>{for(var Mr=0,en=0;en<=Oe.Hb-1;Mr+=(Xa(Oe.Cb+1900)?Xh:Qh)[en++]);return oe(Oe.Kb+Mr,3)},"%m":Oe=>oe(Oe.Hb+1,2),"%M":Oe=>oe(Oe.fc,2),"%n":()=>`
`,"%p":Oe=>0<=Oe.Gb&&12>Oe.Gb?"AM":"PM","%S":Oe=>oe(Oe.hc,2),"%t":()=>"	","%u":Oe=>Oe.ub||7,"%U":Oe=>oe(Math.floor((Oe.Bb+7-Oe.ub)/7),2),"%V":Oe=>{var Mr=Math.floor((Oe.Bb+7-(Oe.ub+6)%7)/7);if(2>=(Oe.ub+371-Oe.Bb-2)%7&&Mr++,Mr)Mr==53&&((en=(Oe.ub+371-Oe.Bb)%7)==4||en==3&&Xa(Oe.Cb)||(Mr=1));else{Mr=52;var en=(Oe.ub+7-Oe.Bb-1)%7;(en==4||en==5&&Xa(Oe.Cb%400-1))&&Mr++}return oe(Mr,2)},"%w":Oe=>Oe.ub,"%W":Oe=>oe(Math.floor((Oe.Bb+7-(Oe.ub+6)%7)/7),2),"%y":Oe=>(Oe.Cb+1900).toString().substring(2),"%Y":Oe=>Oe.Cb+1900,"%z":Oe=>{var Mr=0<=(Oe=Oe.ec);return Oe=Math.abs(Oe)/60,(Mr?"+":"-")+("0000"+(Oe/60*100+Oe%60)).slice(-4)},"%Z":Oe=>Oe.ic,"%%":()=>"%"},w=w.replace(/%%/g,"\0\0"),Dt)w.includes(Qt)&&(w=w.replace(new RegExp(Qt,"g"),Dt[Qt](T)));return Qt=function(Oe){var Mr=Array($c(Oe)+1);return ph(Oe,Mr,0,Mr.length),Mr}(w=w.replace(/\0\0/g,"%")),Qt.length>h?0:(Hm(Qt,o),Qt.length-1)}function Km(o,h,w,T){return Yh(o>>>0,h>>>0,w>>>0,T>>>0)}v||function(){for(var o=l.numThreads-1;o--;)ih();vn.unshift(()=>{js++,function(h){v?h():Promise.all(Us.map(sh)).then(h)}(()=>Hp())})}();for(var Zh=Array(256),nc=0;256>nc;++nc)Zh[nc]=String.fromCharCode(nc);Th=Zh,Ws=l.BindingError=class extends Error{constructor(o){super(o),this.name="BindingError"}},l.InternalError=class extends Error{constructor(o){super(o),this.name="InternalError"}},ws.push(0,1,void 0,1,null,1,!0,1,!1,1),l.count_emval_handles=()=>ws.length/2-5-Ac.length;var Xm=[Ec,eh,ah,dh,ch,hh,fh,mh,_h,gh,wh,yh,bh,Mh,vh,xh,Bh,Lh,Uh,Wh,Gh,qh,Hh,Kh],qt=function(){function o(w,T){return qt=w.exports,qt=function(){var O=qt,oe={};for(let[We,it]of Object.entries(O))oe[We]=typeof it=="function"?(...Ft)=>{Jd.push(We);try{return it(...Ft)}finally{zn||(Jd.pop(),os&&qs===1&&Jd.length===0&&(qs=0,hi+=1,Zd(lf),typeof Fibers<"u"&&Fibers.pc()))}}:it;return oe}(),qt=function(){var O=qt,oe=it=>Ft=>it(Ft)>>>0,We=it=>()=>it()>>>0;return(O=Object.assign({},O)).Ca=oe(O.Ca),O.fb=We(O.fb),O.gb=oe(O.gb),O.emscripten_main_runtime_thread_id=We(O.emscripten_main_runtime_thread_id),O.sb=oe(O.sb),O.tb=We(O.tb),O}(),th.push(qt.ib),gn.unshift(qt.Ba),Zt=T,Hp(),qt}var h=Zp();if(js++,l.instantiateWasm)try{return l.instantiateWasm(h,o)}catch(w){ar(`Module.instantiateWasm callback failed with error: ${w}`),g(w)}return vc||(vc=l.locateFile?Kp("ort-wasm-simd-threaded.jsep.wasm")?"ort-wasm-simd-threaded.jsep.wasm":l.locateFile?l.locateFile("ort-wasm-simd-threaded.jsep.wasm",Ve):Ve+"ort-wasm-simd-threaded.jsep.wasm":new URL(R("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),R.b).href),function(w,T){var O=vc;return bt||typeof WebAssembly.instantiateStreaming!="function"||Kp(O)||Xp(O)||typeof fetch!="function"?Yp(O,w,T):fetch(O,{credentials:"same-origin"}).then(oe=>WebAssembly.instantiateStreaming(oe,w).then(T,function(We){return ar(`wasm streaming compile failed: ${We}`),ar("falling back to ArrayBuffer instantiation"),Yp(O,w,T)}))}(h,function(w){o(w.instance,w.module)}).catch(g),{}}(),Jh=o=>(Jh=qt.Ca)(o),ef=()=>(ef=qt.Da)();l._OrtInit=(o,h)=>(l._OrtInit=qt.Ea)(o,h),l._OrtGetLastError=(o,h)=>(l._OrtGetLastError=qt.Fa)(o,h),l._OrtCreateSessionOptions=(o,h,w,T,O,oe,We,it,Ft,Dt)=>(l._OrtCreateSessionOptions=qt.Ga)(o,h,w,T,O,oe,We,it,Ft,Dt),l._OrtAppendExecutionProvider=(o,h)=>(l._OrtAppendExecutionProvider=qt.Ha)(o,h),l._OrtAddFreeDimensionOverride=(o,h,w)=>(l._OrtAddFreeDimensionOverride=qt.Ia)(o,h,w),l._OrtAddSessionConfigEntry=(o,h,w)=>(l._OrtAddSessionConfigEntry=qt.Ja)(o,h,w),l._OrtReleaseSessionOptions=o=>(l._OrtReleaseSessionOptions=qt.Ka)(o),l._OrtCreateSession=(o,h,w)=>(l._OrtCreateSession=qt.La)(o,h,w),l._OrtReleaseSession=o=>(l._OrtReleaseSession=qt.Ma)(o),l._OrtGetInputOutputCount=(o,h,w)=>(l._OrtGetInputOutputCount=qt.Na)(o,h,w),l._OrtGetInputName=(o,h)=>(l._OrtGetInputName=qt.Oa)(o,h),l._OrtGetOutputName=(o,h)=>(l._OrtGetOutputName=qt.Pa)(o,h),l._OrtFree=o=>(l._OrtFree=qt.Qa)(o),l._OrtCreateTensor=(o,h,w,T,O,oe)=>(l._OrtCreateTensor=qt.Ra)(o,h,w,T,O,oe),l._OrtGetTensorData=(o,h,w,T,O)=>(l._OrtGetTensorData=qt.Sa)(o,h,w,T,O),l._OrtReleaseTensor=o=>(l._OrtReleaseTensor=qt.Ta)(o),l._OrtCreateRunOptions=(o,h,w,T)=>(l._OrtCreateRunOptions=qt.Ua)(o,h,w,T),l._OrtAddRunConfigEntry=(o,h,w)=>(l._OrtAddRunConfigEntry=qt.Va)(o,h,w),l._OrtReleaseRunOptions=o=>(l._OrtReleaseRunOptions=qt.Wa)(o),l._OrtCreateBinding=o=>(l._OrtCreateBinding=qt.Xa)(o),l._OrtBindInput=(o,h,w)=>(l._OrtBindInput=qt.Ya)(o,h,w),l._OrtBindOutput=(o,h,w,T)=>(l._OrtBindOutput=qt.Za)(o,h,w,T),l._OrtClearBoundOutputs=o=>(l._OrtClearBoundOutputs=qt._a)(o),l._OrtReleaseBinding=o=>(l._OrtReleaseBinding=qt.$a)(o),l._OrtRunWithBinding=(o,h,w,T,O)=>(l._OrtRunWithBinding=qt.ab)(o,h,w,T,O),l._OrtRun=(o,h,w,T,O,oe,We,it)=>(l._OrtRun=qt.bb)(o,h,w,T,O,oe,We,it),l._OrtEndProfiling=o=>(l._OrtEndProfiling=qt.cb)(o),l._JsepOutput=(o,h,w)=>(l._JsepOutput=qt.db)(o,h,w),l._JsepGetNodeName=o=>(l._JsepGetNodeName=qt.eb)(o);var sc,Qa=()=>(Qa=qt.fb)(),ic=l._malloc=o=>(ic=l._malloc=qt.gb)(o),ls=l._free=o=>(ls=l._free=qt.hb)(o),Vc=(o,h,w,T,O,oe)=>(Vc=qt.kb)(o,h,w,T,O,oe),tf=()=>(tf=qt.lb)(),rf=(o,h,w,T,O)=>(rf=qt.mb)(o,h,w,T,O),jc=o=>(jc=qt.nb)(o),ac=o=>(ac=qt.ob)(o),nf=()=>(nf=qt.pb)(),sf=(o,h)=>(sf=qt.qb)(o,h),oc=o=>(oc=qt.rb)(o),Uc=o=>(Uc=qt.sb)(o),Wc=()=>(Wc=qt.tb)(),af=l.dynCall_ii=(o,h)=>(af=l.dynCall_ii=qt.vb)(o,h),of=o=>(of=qt.wb)(o),lf=()=>(lf=qt.xb)(),uf=o=>(uf=qt.yb)(o),df=()=>(df=qt.zb)();function cf(){0<js||(v?(p(l),v||Qd(gn),startWorker(l)):(Qd(vn),0<js||sc||(sc=!0,l.calledRun=!0,zn||(v||Qd(gn),p(l),v||Qd(Vs)))))}return l.___start_em_js=873286,l.___stop_em_js=873508,l.stackSave=()=>Wc(),l.stackRestore=o=>oc(o),l.stackAlloc=o=>Uc(o),l.UTF8ToString=fn,l.stringToUTF8=Ka,l.lengthBytesUTF8=$c,pi=function o(){sc||cf(),sc||(pi=o)},cf(),b}),Pe=ge,globalThis.self?.name==="em-pthread"&&ge()}),we,nt,gt,ft,St,mt,It,Lt,zt=N(()=>{tr(),we=import.meta.url??(typeof document<"u"?document.currentScript?.src:typeof self<"u"?self.location?.href:void 0),nt=typeof location>"u"?void 0:location.origin,gt=(e,t)=>{try{let r=t??we;return(r?new URL(e,r):new URL(e)).origin===nt}catch{return!1}},ft=async e=>{let t=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(t)},St=(qr(),I(jr)).default,mt=async()=>{if(!we)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(gt(we))return[void 0,St()];let e=await ft(we);return[e,St(e)]},It=(rt(),I(lt)).default,Lt=async(e,t,r)=>[void 0,It]}),Ut,be,et,ot,Ht,$r,Ur,vr,Pr=N(()=>{zt(),be=!1,et=!1,ot=!1,Ht=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},$r=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Ur=async e=>{if(be)return Promise.resolve();if(et)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(ot)throw new Error("previous call to 'initializeWebAssembly()' failed.");et=!0;let t=e.initTimeout,r=e.numThreads;if(!$r())throw new Error("WebAssembly SIMD is not supported in the current environment.");let n=Ht();r>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+r+", but this will not work unless you enable crossOriginIsolated mode. See http://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=r=1);let s=e.wasmPaths,i=typeof s=="string"?s:void 0,a=s?.mjs,u=a?.href??a,d=s?.wasm,p=d?.href??d,g=e.wasmBinary,[l,b]=await Lt(u,i,r>1),M=!1,S=[];if(t>0&&S.push(new Promise(v=>{setTimeout(()=>{M=!0,v()},t)})),S.push(new Promise((v,q)=>{let W={numThreads:r};g?W.wasmBinary=g:(p||i)&&(W.locateFile=(F,ee)=>p??(i??ee)+F),b(W).then(F=>{et=!1,be=!0,Ut=F,v(),l&&URL.revokeObjectURL(l)},F=>{et=!1,ot=!0,q(F)})})),await Promise.race(S),M)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},vr=()=>{if(be&&Ut)return Ut;throw new Error("WebAssembly is not initialized yet.")}}),Ar,Dn,Wr,Gn=N(()=>{Pr(),Ar=(e,t)=>{let r=vr(),n=r.lengthBytesUTF8(e)+1,s=r._malloc(n);return r.stringToUTF8(e,s,n),t.push(s),s},Dn=(e,t,r,n)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([s,i])=>{let a=t?t+s:s;if(typeof i=="object")Dn(i,a+".",r,n);else if(typeof i=="string"||typeof i=="number")n(a,i.toString());else if(typeof i=="boolean")n(a,i?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof i}`)})},Wr=e=>{let t=vr(),r=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let s=t.HEAP32[n/4],i=t.HEAPU32[n/4+1],a=i?t.UTF8ToString(i):"";throw new Error(`${e} ERROR_CODE: ${s}, ERROR_MESSAGE: ${a}`)}finally{t.stackRestore(r)}}}),Bn,Hs=N(()=>{Pr(),Gn(),Bn=e=>{let t=vr(),r=0,n=[],s=e||{};try{if(e?.logSeverityLevel===void 0)s.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)s.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(s.terminate=!1);let i=0;return e?.tag!==void 0&&(i=Ar(e.tag,n)),r=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,i),r===0&&Wr("Can't create run options."),e?.extra!==void 0&&Dn(e.extra,"",new WeakSet,(a,u)=>{let d=Ar(a,n),p=Ar(u,n);t._OrtAddRunConfigEntry(r,d,p)!==0&&Wr(`Can't set a run config entry: ${a} - ${u}.`)}),[r,n]}catch(i){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(a=>t._free(a)),i}}}),ys,bs,Ms,vs,qn,Ks=N(()=>{Pr(),Gn(),ys=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},bs=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Ms=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},vs=(e,t,r)=>{for(let n of t){let s=typeof n=="string"?n:n.name;switch(s){case"webnn":if(s="WEBNN",typeof n!="string"){let a=n?.deviceType;if(a){let u=Ar("deviceType",r),d=Ar(a,r);vr()._OrtAddSessionConfigEntry(e,u,d)!==0&&Wr(`Can't set a session config entry: 'deviceType' - ${a}.`)}}break;case"webgpu":if(s="JS",typeof n!="string"){let a=n;if(a?.preferredLayout){if(a.preferredLayout!=="NCHW"&&a.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${a.preferredLayout}`);let u=Ar("preferredLayout",r),d=Ar(a.preferredLayout,r);vr()._OrtAddSessionConfigEntry(e,u,d)!==0&&Wr(`Can't set a session config entry: 'preferredLayout' - ${a.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${s}`)}let i=Ar(s,r);vr()._OrtAppendExecutionProvider(e,i)!==0&&Wr(`Can't append execution provider: ${s}.`)}},qn=e=>{let t=vr(),r=0,n=[],s=e||{};Ms(s);try{let i=ys(s.graphOptimizationLevel??"all"),a=bs(s.executionMode??"sequential"),u=typeof s.logId=="string"?Ar(s.logId,n):0,d=s.logSeverityLevel??2;if(!Number.isInteger(d)||d<0||d>4)throw new Error(`log serverity level is not valid: ${d}`);let p=s.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let g=typeof s.optimizedModelFilePath=="string"?Ar(s.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(i,!!s.enableCpuMemArena,!!s.enableMemPattern,a,!!s.enableProfiling,0,u,d,p,g),r===0&&Wr("Can't create session options."),s.executionProviders&&vs(r,s.executionProviders,n),s.enableGraphCapture!==void 0){if(typeof s.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${s.enableGraphCapture}`);let l=Ar("enableGraphCapture",n),b=Ar(s.enableGraphCapture.toString(),n);t._OrtAddSessionConfigEntry(r,l,b)!==0&&Wr(`Can't set a session config entry: 'enableGraphCapture' - ${s.enableGraphCapture}.`)}if(s.freeDimensionOverrides)for(let[l,b]of Object.entries(s.freeDimensionOverrides)){if(typeof l!="string")throw new Error(`free dimension override name must be a string: ${l}`);if(typeof b!="number"||!Number.isInteger(b)||b<0)throw new Error(`free dimension override value must be a non-negative integer: ${b}`);let M=Ar(l,n);t._OrtAddFreeDimensionOverride(r,M,b)!==0&&Wr(`Can't set a free dimension override: ${l} - ${b}.`)}return s.extra!==void 0&&Dn(s.extra,"",new WeakSet,(l,b)=>{let M=Ar(l,n),S=Ar(b,n);t._OrtAddSessionConfigEntry(r,M,S)!==0&&Wr(`Can't set a session config entry: ${l} - ${b}.`)}),[r,n]}catch(i){throw r!==0&&t._OrtReleaseSessionOptions(r),n.forEach(a=>t._free(a)),i}}}),us,In,Hn,Ln,Jn,ds,cs,Kt=N(()=>{us=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},In=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},Hn=(e,t)=>{let r=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],n=typeof t=="number"?t:t.reduce((s,i)=>s*i,1);return r>0?Math.ceil(n*r):void 0},Ln=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Jn=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},ds=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",cs=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}}),es,xs=N(()=>{tr(),es=async e=>{if(typeof e=="string"){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let s=t.body.getReader(),i;try{i=new ArrayBuffer(n)}catch(u){if(u instanceof RangeError){let d=Math.ceil(n/65536);i=new WebAssembly.Memory({initial:d,maximum:d}).buffer}else throw u}let a=0;for(;;){let{done:u,value:d}=await s.read();if(u)break;let p=d.byteLength;new Uint8Array(i,a,p).set(d),a+=p}return new Uint8Array(i,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),Ts,ps,Ss,Es,hs,Cs,Gr,wn=N(()=>{Kt(),Ts=["V","I","W","E","F"],ps=(e,t)=>{console.log(`[${Ts[e]},${new Date().toISOString()}]${t}`)},hs=(e,t)=>{Ss=e,Es=t},Cs=(e,t)=>{let r=Jn(e),n=Jn(Ss);r>=n&&ps(r,typeof t=="function"?t():t)},Gr=(...e)=>{Es&&Cs(...e)}}),ye,_=N(()=>{Kt(),ye=(e,t)=>new(Ln(t))(e)}),P=N(()=>{}),H,ie,pe,ze,wt,Tt,vt,Ot,Jt,Rr=N(()=>{wn(),P(),H=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),ie=[],pe=e=>Math.ceil(e/16)*16,ze=e=>{for(let t=0;t<ie.length;t++){let r=ie[t];if(e<=r)return r}return Math.ceil(e/16)*16},wt=1,Tt=()=>wt++,vt=async(e,t,r,n)=>{let s=pe(r),i=e.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(t,0,i,0,s),e.flush(),await i.mapAsync(GPUMapMode.READ);let u=i.getMappedRange();if(n){let d=n();return d.set(new Uint8Array(u,0,r)),d}else return new Uint8Array(u.slice(0,r))}finally{i.destroy()}},Ot=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map;for(let[t]of H)ie.push(t),this.freeBuffers.set(t,[]),this.freeUniformBuffers.set(t,[])}upload(e,t){let r=t.buffer,n=t.byteOffset,s=t.byteLength,i=pe(s),a=this.storageCache.get(e);if(!a)throw new Error("gpu data for uploading does not exist");if(a.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${a.originalSize}, data size=${s}`);let u=this.backend.device.createBuffer({mappedAtCreation:!0,size:i,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),d=u.getMappedRange();new Uint8Array(d).set(new Uint8Array(r,n,s)),u.unmap();let p=this.backend.getCommandEncoder();this.backend.endComputePass(),p.copyBufferToBuffer(u,0,a.gpuData.buffer,0,i),Gr("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`),this.buffersForUploadingPending.push(u)}memcpy(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(t);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(r.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=pe(r.originalSize),i=this.backend.getCommandEncoder();this.backend.endComputePass(),i.copyBufferToBuffer(r.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(e,t,r){let n;if(r){if(n=this.externalBuffers.get(r),n===void 0)throw new Error("previous buffer is not registered");if(e===r)return Gr("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`);this.externalBuffers.delete(r)}else n=Tt();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:e},originalSize:t}),this.externalBuffers.set(e,n),Gr("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, registered.`),n}unregisterExternalBuffer(e){let t=this.externalBuffers.get(e);t!==void 0&&(this.storageCache.delete(t),this.externalBuffers.delete(e),Gr("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${t}`))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let r=ze(e),n,s=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,i=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||i){let u=(s?this.freeBuffers:this.freeUniformBuffers).get(r);u?u.length>0?n=u.pop():n=this.backend.device.createBuffer({size:r,usage:t}):n=this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});let a={id:Tt(),type:0,buffer:n};return this.storageCache.set(a.id,{gpuData:a,originalSize:e}),Gr("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${a.id}`),a}get(e){return this.storageCache.get(e)?.gpuData}release(e){let t=this.storageCache.get(e);if(!t)throw new Error("releasing data does not exist");return Gr("verbose",()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("data does not exist");await vt(this.backend,r.gpuData.buffer,r.originalSize,t)}refreshPendingBuffers(){for(let e of this.buffersForUploadingPending)e.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let t=H.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let r=this.freeBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let r=this.freeUniformBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(e){let t=this.capturedPendingBuffers.get(e);t&&(t.forEach(r=>{r.destroy()}),this.capturedPendingBuffers.delete(e))}},Jt=(...e)=>new Ot(...e)}),nr,Wt,pr=N(()=>{nr=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},Wt=e=>new nr(e)}),xn,sn,Fe,Tn,xr,nn,yn,Xt=N(()=>{xn=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},sn=class{static calcShape(e,t,r=!1){let n=e.length,s=t.length;if(n===0)return t;if(s===0)return e;let i=Math.max(e.length,t.length),a=new Array(i);if(r){if(n<2||s<2)return;let u=xn.calcMatMulShape([e[n-2],e[n-1]],[t[s-2],t[s-1]]);if(u===void 0)return;[a[i-2],a[i-1]]=u}for(let u=r?3:1;u<=i;u++){let d=n-u<0?1:e[n-u],p=s-u<0?1:t[s-u];if(d!==p&&d>1&&p>1)return;let g=Math.max(d,p);if(d&&p)a[i-u]=Math.max(d,p);else{if(g>1)return;a[i-u]=0}}return a}static isValidBroadcast(e,t){let r=e.length,n=t.length;if(r>n)return!1;for(let s=1;s<=r;s++)if(e[r-s]!==1&&e[r-s]!==t[n-s])return!1;return!0}},Fe=class lc{static size(t){return lc.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let n=t.length;if(n===0)return[];let s=new Array(n),i=n-1;for(;i>=0;){if(t[i]%r===0){s[i]=t[i]/r;break}if(r%t[i]!==0)throw new Error("cannot convert shape");s[i]=1,r/=t[i],i--}for(i--;i>=0;i--)s[i]=t[i];return s}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return lc.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return lc.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let s=1;for(let i=r;i<n;i++){if(t[i]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");s*=t[i]}return s}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let s=r-3;s>=0;--s)n[s]=n[s+1]*t[s+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((s,i)=>s+r[i]+r[i+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,s)=>n===r[s])}},Tn=class ud{static adjustPoolAttributes(t,r,n,s,i,a){if(!t&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let u=0;u<r.length-2;u++)u>=n.length?n.push(r[u+2]):n[u]=r[u+2];for(let u=0;u<n.length;u++)if(u<s.length){if(s[u]<0)throw new Error("strides should be greater than or equal to 1")}else s.push(1);for(let u=0;u<n.length;u++)if(u<i.length){if(i[u]<0)throw new Error("dilations should be greater than or equal to 1")}else i.push(1);for(let u=0;u<n.length*2;u++)if(u<a.length){if(a[u]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let u=0;u<n.length;u++){if(n[u]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[u]>=n[u]||a[u+n.length]>=n[u])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,n,s,i,a,u){if(u){if(i.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(s.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let d=0;d<t.length-2;d++)ud.adjustPadAndReturnShape(t[d+(a?1:2)],r[d],n[d],s[d],i,d,d+t.length-2,u)}}static computePoolOutputShape(t,r,n,s,i,a,u){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let d=[r[0],r[1]];return ud.computeShapeHelper(t,r,d,n,s,i,a,u),d}static computeConvOutputShape(t,r,n,s,i,a,u){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let d=[t[0],r[0]];return ud.computeShapeHelper(!1,t,d,n,s,i,a,u),d}static computeShapeHelper(t,r,n,s,i,a,u,d){if(t)for(let p=0;p<r.length-2;p++)n.push(1);else for(let p=0;p<r.length-2;p++)n.push(ud.adjustPadAndReturnShape(r[p+2],s[p],i[p],a[p],u,p,p+r.length-2,d))}static adjustPadAndReturnShape(t,r,n,s,i,a,u,d){let p=n*(s-1)+1;if(d&&d!=="NOTSET")switch(d){case"VALID":return i[a]=0,i[u]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let g=((t+r-1)/r-1)*r+s-t;return i[a]=Math.floor(d==="SAME_LOWER"?(g+1)/2:g/2),i[u]=g-i[a],Math.floor((t+g-s)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+i[a]+i[u]-p)/r+1)}},xr=class{static getShapeOfGemmResult(e,t,r,n,s){if(e.length!==2||r.length!==2)throw new Error("shape need to be of size 2");let i,a,u;t?(i=e[1],a=e[0]):(i=e[0],a=e[1]);let d=-1;if(n?(u=r[0],d=1):(u=r[1],d=0),r[d]!==a)throw new Error("dimension mismatch");if(i<=0||u<=0||a<=0)throw new Error("invalid shape specified");if(s&&!sn.isValidBroadcast(s,[i,u]))throw new Error("gemm: invalid bias shape for broadcast");return[i,u,a]}},nn=-34028234663852886e22,yn=34028234663852886e22}),bn,un,kr,Tr,At,wr,Br,Hr,Mn,Nt,Xs,Ze,jt,_i,gi,Za,fs,sr=N(()=>{Kt(),Xt(),bn=64,un=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},kr=(e,t=1)=>{let r=un(e,t);return typeof r=="string"?r:r[0]},Tr=(e,t=1)=>{let r=un(e,t);return typeof r=="string"?r:r[1]},At=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:Fe.computeStrides(r)})}),t},wr=e=>e%4===0?4:e%2===0?2:1,Br=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Hr=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}<f32>(${r})`,Mn=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Nt=(e,t,r,n)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?n==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Xs=(e,t,r,n,s)=>{let i=typeof r=="number",a=i?r:r.length,u=[...new Array(a).keys()],d=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,p=un(t,s),g=typeof p=="string"?p:p[1],l=typeof p=="string"?p:p[0],b={indices:d,value:g,storage:l,tensor:t},M=Xe=>typeof Xe=="string"?Xe:`${Xe}u`,S={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},v=i?"uniforms.":"",q=`${v}${e}_shape`,W=`${v}${e}_strides`,F="";for(let Xe=0;Xe<a-1;Xe++)F+=`
    let dim${Xe} = current / ${Nt(W,Xe,a)};
    let rest${Xe} = current % ${Nt(W,Xe,a)};
    indices[${Xe}] = dim${Xe};
    current = rest${Xe};
    `;F+=`indices[${a-1}] = current;`;let ee=a<2?"":`
  fn o2i_${e}(offset: u32) -> ${b.indices} {
    var indices: ${b.indices};
    var current = offset;
    ${F}
    return indices;
  }`,te=Xe=>(S.offsetToIndices=!0,a<2?Xe:`o2i_${e}(${Xe})`),he=[];if(a>=2)for(let Xe=a-1;Xe>=0;Xe--)he.push(`${Nt(W,Xe,a)} * (indices[${Xe}])`);let Ne=a<2?"":`
  fn i2o_${e}(indices: ${b.indices}) -> u32 {
    return ${he.join("+")};
  }`,Ve=Xe=>(S.indicesToOffset=!0,a<2?Xe:`i2o_${e}(${Xe})`),bt=(...Xe)=>a===0?"0u":`${b.indices}(${Xe.map(M).join(",")})`,Vt=(Xe,Ct)=>a<2?`${Xe}`:`${Nt(Xe,Ct,a)}`,Rt=(Xe,Ct,ur)=>a<2?`${Xe}=${ur};`:`${Nt(Xe,Ct,a)}=${ur};`,lr={},ar=(Xe,Ct)=>{S.broadcastedIndicesToOffset=!0;let ur=`${Ct.name}broadcastedIndicesTo${e}Offset`;if(ur in lr)return`${ur}(${Xe})`;let Kr=[];for(let Xr=a-1;Xr>=0;Xr--){let jn=Ct.indicesGet("outputIndices",Xr+Ct.rank-a);Kr.push(`${Vt(W,Xr)} * (${jn} % ${Vt(q,Xr)})`)}return lr[ur]=`fn ${ur}(outputIndices: ${Ct.type.indices}) -> u32 {
             return ${Kr.length>0?Kr.join("+"):"0u"};
           }`,`${ur}(${Xe})`},_r=(Xe,Ct)=>(()=>{if(b.storage===b.value)return`${e}[${Xe}]=${Ct};`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`${e}[${Xe}]=vec2<u32>(u32(${Ct}), select(0u, 0xFFFFFFFFu, ${Ct} < 0));`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`${e}[${Xe}]=vec2<u32>(u32(${Ct}), 0u);`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`${e}[${Xe}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${Ct}));`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),Fr=Xe=>(()=>{if(b.storage===b.value)return`${e}[${Xe}]`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`i32(${e}[${Xe}].x)`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`u32(${e}[${Xe}].x)`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${Xe}] & 0xFFu), bool(${e}[${Xe}] & 0xFF00u), bool(${e}[${Xe}] & 0xFF0000u), bool(${e}[${Xe}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),fr=a<2?"":`
  fn get_${e}ByIndices(indices: ${b.indices}) -> ${g} {
    return ${Fr(`i2o_${e}(indices)`)};
  }`,Zt=a<2?"":(()=>{let Xe=u.map(ur=>`d${ur}: u32`).join(", "),Ct=u.map(ur=>`d${ur}`).join(", ");return`
  fn get_${e}(${Xe}) -> ${g} {
    return get_${e}ByIndices(${bt(Ct)});
  }`})(),Or=(...Xe)=>{if(Xe.length!==a)throw new Error(`indices length must be ${a}`);let Ct=Xe.map(M).join(",");return a===0?Fr("0u"):a===1?Fr(Ct[0]):(S.get=!0,S.getByIndices=!0,S.indicesToOffset=!0,`get_${e}(${Ct})`)},Nr=Xe=>a<2?Fr(Xe):(S.getByIndices=!0,S.indicesToOffset=!0,`get_${e}ByIndices(${Xe})`),er=a<2?"":`
  fn set_${e}ByIndices(indices: ${b.indices}, value: ${g}) {
    ${_r(`i2o_${e}(indices)`,"value")}
  }`,gr=a<2?"":(()=>{let Xe=u.map(ur=>`d${ur}: u32`).join(", "),Ct=u.map(ur=>`d${ur}`).join(", ");return`
  fn set_${e}(${Xe}, value: ${g}) {
    set_${e}ByIndices(${bt(Ct)}, value);
  }`})();return{impl:()=>{let Xe=[],Ct=!1;return S.offsetToIndices&&(Xe.push(ee),Ct=!0),S.indicesToOffset&&(Xe.push(Ne),Ct=!0),S.broadcastedIndicesToOffset&&(Object.values(lr).forEach(ur=>Xe.push(ur)),Ct=!0),S.set&&(Xe.push(gr),Ct=!0),S.setByIndices&&(Xe.push(er),Ct=!0),S.get&&(Xe.push(Zt),Ct=!0),S.getByIndices&&(Xe.push(fr),Ct=!0),!i&&Ct&&Xe.unshift(`const ${q} = ${b.indices}(${r.join(",")});`,`const ${W} = ${b.indices}(${Fe.computeStrides(r).join(",")});`),Xe.join(`
`)},type:b,offsetToIndices:te,indicesToOffset:Ve,broadcastedIndicesToOffset:ar,indices:bt,indicesGet:Vt,indicesSet:Rt,set:(...Xe)=>{if(Xe.length!==a+1)throw new Error(`indices length must be ${a}`);let Ct=Xe[a];if(typeof Ct!="string")throw new Error("value must be string");let ur=Xe.slice(0,a).map(M).join(",");return a===0?_r("0u",Ct):a===1?_r(ur[0],Ct):(S.set=!0,S.setByIndices=!0,S.indicesToOffset=!0,`set_${e}(${ur}, ${Ct})`)},setByOffset:_r,setByIndices:(Xe,Ct)=>a<2?_r(Xe,Ct):(S.setByIndices=!0,S.indicesToOffset=!0,`set_${e}ByIndices(${Xe}, ${Ct});`),get:Or,getByOffset:Fr,getByIndices:Nr,usage:n,name:e,strides:W,shape:q,rank:a}},Ze=(e,t,r,n=1)=>Xs(e,t,r,"input",n),jt=(e,t,r,n=1)=>Xs(e,t,r,"output",n),_i=(e,t,r,n=1)=>Xs(e,t,r,"internal",n),gi=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=bn){let t=typeof e=="number"?e:e[0],r=typeof e=="number"?1:e[1],n=typeof e=="number"?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||r>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*r*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,i=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,a=s?`let global_idx = global_id.x;
         let local_idx = local_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${t*r*n}u + local_idx;`;return`@compute @workgroup_size(${t}, ${r}, ${n})
  fn main(${i}) {
    ${a}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let r=e.usage==="input"?"read":"read_write",n=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${r}> ${e.name}: array<${n}>;`}declareVariables(...e){return e.map(t=>this.declareVariable(t,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(t=>this.registerInternalVariable(t)),this}registerUniform(e,t,r=1){return this.uniforms.push({name:e,type:t,length:r}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:t,type:r,length:n}of this.uniforms)if(n&&n>4)r==="f16"?e.push(`@align(16) ${t}:array<mat2x4<${r}>, ${Math.ceil(n/8)}>`):e.push(`${t}:array<vec4<${r}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?r:`vec${n}<${r}>`;e.push(`${t}:${s}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=t=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(t)];return this.uniforms.map(t=>[e(t.type),t.length??1])}},Za=(e,t)=>new gi(e,t),fs=(e,t)=>{let r=e.length,n=[];for(let s=0;s<r;s++){let i=r-1-s,a=e[i]||1;(t[t.length-1-s]||1)>1&&a===1&&n.unshift(i)}return n}}),Ja,wi,ts,eo,dd,Fn,cd,to,rs=N(()=>{Kt(),Xt(),pr(),sr(),Ja=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},wi=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,ts=(e,t)=>Fe.sortBasedOnPerm(e,wi(e.length,t)),eo=(e,t,r,n)=>{let s=[];s.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let i=0;i<t;++i)s.push(r.indicesSet("a",e[i],`i[${i}]`));return s.push("return a;}"),s.join(`
`)},dd=(e,t)=>{let r=[],n=[];for(let s=0;s<e.length;++s)e[s]!==1&&r.push(e[s]),e[t[s]]!==1&&n.push(t[s]);return{newShape:r,newPerm:n}},Fn=(e,t)=>{let r=e.dataType,n=e.dims.length,s=wi(n,t),i=ts(e.dims,s),{newShape:a,newPerm:u}=dd(e.dims,s),d=Fe.areEqual(u,[2,3,1]),p=Fe.areEqual(u,[3,1,2]),g=a.length===2&&u[0]>u[1]||d||p,l=g?a:e.dims,b=i;g&&(l=d?[a[0],a[1]*a[2]]:p?[a[0]*a[1],a[2]]:a,b=[l[1],l[0]]);let M=Ze("a",r,l.length),S=jt("output",r,b.length),v=16,q;return g?q=W=>`
  ${W.registerUniform("output_size","u32").declareVariables(M,S)}
  var<workgroup> tile : array<array<${S.type.value}, ${v+1}>, ${v}>;
  ${W.mainStart([v,v,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${v} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${v}u + local_id.x;
    let input_row = workgroup_id_x * ${v}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${M.getByIndices(`${M.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${v}u + local_id.x;
    let output_row = workgroup_id_y * ${v}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${S.setByIndices(`${S.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`:q=W=>`
  ${W.registerUniform("output_size","u32").declareVariables(M,S)}

  ${eo(s,n,M,S)}

  ${W.mainStart()}
    ${W.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${S.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${S.setByOffset("global_idx",M.getByIndices("aIndices"))}
  }`,{name:g?"TransposeShared":"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:()=>{let W=Fe.size(i);return{outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:g?{x:Math.ceil(b[1]/v),y:Math.ceil(b[0]/v)}:{x:Math.ceil(W/64)},programUniforms:[{type:12,data:W},...At(l,b)]}},getShaderSource:q}},cd=(e,t)=>{Ja(e.inputs),e.compute(Fn(e.inputs[0],t.perm))},to=e=>Wt({perm:e.perm})}),ro,no,so,io,ao,yi,oo,lo,bi,uo,En,Mi,co,po,vi,ho,fo,xi,mo,_o,Ti,pd=N(()=>{Kt(),Xt(),sr(),Oi(),rs(),ro={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},no={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},so={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},io={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},ao=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},yi=(e,t)=>{let r=[],n=e.length;for(let i=0;i<n;i++)t.indexOf(i)===-1&&r.push(e[i]);let s=t.map(i=>e[i]);return[r,s]},oo=(e,t)=>{let r=e.length+t.length,n=[],s=0;for(let i=0;i<r;i++)t.indexOf(i)===-1?n.push(e[s++]):n.push(1);return n},lo=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},bi=(e,t)=>{let r=[];if(!lo(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},uo=(e,t,r,n,s,i,a)=>{let u=r[0].dims,d=Fe.size(i),p=Fe.size(a),g=Ze("_A",r[0].dataType,u),l=jt("output",s,i),b=32,M=`
          var<workgroup> aBestValues : array<f32, ${b}>;
       `;return{name:e,shaderCache:t,getShaderSource:S=>`
        ${S.registerUniform("reduceSize","u32").declareVariables(g,l)}
        ${M}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${S.mainStart(b)}

          let outputIndex = global_idx / ${b};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${so[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${b}) {
           let candidate = f32(${g.getByOffset("offset + k")});
           bestValue = ${ro[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${b}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${no[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${l.setByOffset("outputIndex",`${n==="mean"?`${l.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${l.type.storage}(${io[n]})`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:i,dataType:s}],dispatchGroup:{x:d},programUniforms:[{type:12,data:p}]})}},En=(e,t,r,n)=>{let s=e.inputs.length===1?r:Ei(e.inputs,r),i=s.axes;i.length===0&&!s.noopWithEmptyAxes&&(i=e.inputs[0].dims.map((M,S)=>S));let a=Fe.normalizeAxes(i,e.inputs[0].dims.length),u=a,d=e.inputs[0],p=bi(u,e.inputs[0].dims.length);p.length>0&&(d=e.compute(Fn(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],u=ao(u.length,d.dims.length));let[g,l]=yi(d.dims,u),b=g;s.keepDims&&(b=oo(g,a)),e.compute(uo(t,{hint:s.cacheKey,inputDependencies:["type"]},[d],n,e.inputs[0].dataType,b,l),{inputs:[d]})},Mi=(e,t)=>{En(e,"ReduceMeanShared",t,"mean")},co=(e,t)=>{En(e,"ReduceL1Shared",t,"l1")},po=(e,t)=>{En(e,"ReduceL2Shared",t,"l2")},vi=(e,t)=>{En(e,"ReduceLogSumExpShared",t,"logSumExp")},ho=(e,t)=>{En(e,"ReduceMaxShared",t,"max")},fo=(e,t)=>{En(e,"ReduceMinShared",t,"min")},xi=(e,t)=>{En(e,"ReduceProdShared",t,"prod")},mo=(e,t)=>{En(e,"ReduceSumShared",t,"sum")},_o=(e,t)=>{En(e,"ReduceSumSquareShared",t,"sumSquare")},Ti=(e,t)=>{En(e,"ReduceLogSumShared",t,"logSum")}}),Cn,Si,Qs,Ei,Sn,go,wo,Ci,yo,bo,$i,Mo,vo,ki,xo,$n,Pi,To,So,Ai,Eo,Co,Ii,$o,ko,Fi,Oi=N(()=>{Kt(),Xt(),pr(),sr(),pd(),Cn=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Si=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Qs=(e,t,r,n,s,i,a=!1,u=!1)=>{let d=[],p=r[0].dims,g=p.length,l=Fe.normalizeAxes(s,g),b=!u&&l.length===0;p.forEach((v,q)=>{b||l.indexOf(q)>=0?a&&d.push(1):d.push(v)});let M=d.length,S=Fe.size(d);return{name:e,shaderCache:t,getShaderSource:v=>{let q=[],W=Ze("_A",r[0].dataType,g),F=jt("output",i,M),ee=n(W,F,l),te=ee[2];for(let he=0,Ne=0;he<g;he++)b||l.indexOf(he)>=0?(a&&Ne++,te=`for(var j${he}: u32 = 0; j${he} < ${p[he]}; j${he}++) {
                  ${ee[2].includes("last_index")?`let last_index = j${he};`:""}
                  ${W.indicesSet("input_indices",he,`j${he}`)}
                  ${te}
                }`):(q.push(`${W.indicesSet("input_indices",he,F.indicesGet("output_indices",Ne))};`),Ne++);return`

        ${v.registerUniform("output_size","u32").declareVariables(W,F)}

        ${v.mainStart()}
          ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${W.type.indices};
          let output_indices = ${F.offsetToIndices("global_idx")};

          ${q.join(`
`)}
          ${ee[0]}       // init ops for reduce max/min
          ${ee[1]}
          ${te}
          ${ee[3]}
          ${ee.length===4?F.setByOffset("global_idx","value"):ee.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:d,dataType:i}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:[{type:12,data:S},...At(p,d)]})}},Ei=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),Wt({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},Sn=(e,t,r,n)=>{let s=e.inputs,i=s.length===1?r:Ei(s,r);e.compute(Qs(t,{hint:i.cacheKey,inputDependencies:["rank"]},[s[0]],i.noopWithEmptyAxes&&i.axes.length===0?Si:n,i.axes,s[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},go=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceLogSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,"value = log(value);"])},wo=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceL1",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${r.getByIndices("input_indices")});`,""])},Ci=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceL2",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},yo=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceLogSumExp",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${r.getByIndices("input_indices")});`,"value = log(value);"])},bo=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceMax",t,(r,n,s)=>{let i=[];for(let a=0;a<r.rank;a++)(s.indexOf(a)>=0||s.length===0)&&i.push(r.indicesSet("input_indices",a,0));return[`${i.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = max(value, ${r.getByIndices("input_indices")});`,""]})},$i=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceMean",t,(r,n,s)=>{let i=1;for(let a=0;a<r.rank;a++)(s.indexOf(a)>=0||s.length===0)&&(i*=e.inputs[0].dims[a]);return["var sum = f32(0);","",`sum += f32(${r.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${i});`]})},Mo=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceMin",t,(r,n,s)=>{let i=[];for(let a=0;a<r.rank;a++)(s.indexOf(a)>=0||s.length===0)&&i.push(`input_indices[${a}] = 0;`);return[`${i.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = min(value, ${r.getByIndices("input_indices")});`,""]})},vo=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceProd",t,(r,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${r.getByIndices("input_indices")};`,""])},ki=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,""])},xo=(e,t)=>{Cn(e.inputs),Sn(e,"ReduceSumSquare",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += t * t;`,""])},$n=(e,t,r)=>{if(t.length===0)return r;let n=1,s=1;for(let i=0;i<t.length;i++)t.indexOf(i)===-1?n*=e[i]:s*=e[i];return s<32&&n>1024},Pi=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$i(e,t):Mi(e,t)},To=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wo(e,t):co(e,t)},So=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ci(e,t):po(e,t)},Ai=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yo(e,t):vi(e,t)},Eo=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bo(e,t):ho(e,t)},Co=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Mo(e,t):fo(e,t)},Ii=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vo(e,t):xi(e,t)},$o=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ki(e,t):mo(e,t)},ko=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xo(e,t):_o(e,t)},Fi=(e,t)=>{$n(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?go(e,t):Ti(e,t)}}),zi,Di,Po,Bi,Ao=N(()=>{Kt(),pr(),Oi(),zi=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Di=(e,t)=>{zi(e.inputs);let r=(n,s,i)=>{let a=[];for(let u=0;u<n.rank;u++)(i.indexOf(u)>=0||i.length===0)&&a.push(`input_indices[${u}] = 0;`);return[`${a.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",s.setByOffset("global_idx","best_index")]};e.compute(Qs("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Po=(e,t)=>{zi(e.inputs);let r=(n,s,i)=>{let a=[];for(let u=0;u<n.rank;u++)(i.indexOf(u)>=0||i.length===0)&&a.push(`input_indices[${u}] = 0;`);return[`${a.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",s.setByOffset("global_idx","best_index")]};e.compute(Qs("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Bi=e=>Wt(e)}),Io,Fo,Li,Oo,$s,Ri,zo,Ni=N(()=>{Kt(),Xt(),P(),sr(),Io=(e,t)=>{let r=e[0],n=e[1],s=e[2],i=e[3],a=e[4],u=e[5];if(a&&u)throw new Error("Attention cannot have both past and attention_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let d=r.dims[0],p=r.dims[1],g=r.dims[2];if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==g)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(s.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let l=s.dims[0]/3,b=l,M=b;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let ee of t.qkvHiddenSizes)if(ee%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");l=t.qkvHiddenSizes[0],b=t.qkvHiddenSizes[1],M=t.qkvHiddenSizes[2]}let S=p;if(l!==b)throw new Error("qkv_hidden_sizes first element should be same as the second");if(s.dims[0]!==l+b+M)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let v=0;if(a){if(b!==M)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(a.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(a.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(a.dims[1]!==d)throw new Error('Input "past" second dimension must be batch_size');if(a.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(a.dims[4]!==b/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(v=a.dims[3])}let q=S+v,W=-1,F=0;if(i)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(u){if(u.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(u.dims[0]!==d||u.dims[1]!==t.numHeads||u.dims[2]!==p||u.dims[3]!==q)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:d,sequenceLength:p,pastSequenceLength:v,kvSequenceLength:S,totalSequenceLength:q,maxSequenceLength:W,inputHiddenSize:g,hiddenSize:l,vHiddenSize:M,headSize:Math.floor(l/t.numHeads),vHeadSize:Math.floor(M/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:F,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Fo=(e,t,r)=>{let n=wr(r),s=64,i=r/n;i<s&&(s=32);let a=Math.ceil(r/n/s),u=[{type:1,data:1/r},{type:12,data:i},{type:12,data:a}],d=kr(e.dataType,n),p=Tr(1,n),g=["type"],l=b=>{let M=jt("x",e.dataType,e.dims,n),S=Tr(e.dataType),v=[{name:"d_inv",type:"f32"},{name:"d_comp",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${s}>;
  var<workgroup> thread_sum: array<f32, ${s}>;
  ${b.registerUniforms(v).declareVariables(M)}
  ${b.mainStart([s,1,1])}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${s}) * uniforms.d_comp + local_offset;

    var thread_max_vector = ${p}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
      thread_max_vector = max(${p}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(n){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${n}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${s}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${p}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
      sum_vector += exp(${p}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(n){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${n}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${s}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
        x[offset + i] = ${M.type.value}(${S}(uniforms.d_inv));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
        var f32input = ${p}(x[offset + i]);
        x[offset + i] = ${M.type.value}(exp(f32input - max_value) / sum);
      }
    }
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${s};${d};${n}`,inputDependencies:g},getShaderSource:l,getRunData:()=>({outputs:[],dispatchGroup:{x:t},programUniforms:u})}},Li=(e,t,r,n,s,i,a,u)=>{let d=u+i.kvSequenceLength,p=[i.batchSize,i.numHeads,i.sequenceLength,d],g=i.kvNumHeads===void 0&&e>1&&n,l=g?[i.batchSize,i.numHeads,d,i.headSize]:void 0,b=a.scale===0?1/Math.sqrt(i.headSize):a.scale,M=wr(i.headSize),S=i.headSize/M,v=12,q={x:Math.ceil(d/v),y:Math.ceil(i.sequenceLength/v),z:i.batchSize*i.numHeads},W=[{type:12,data:i.sequenceLength},{type:12,data:S},{type:12,data:d},{type:12,data:i.numHeads},{type:1,data:b},{type:12,data:u},{type:12,data:i.kvSequenceLength}],F=g&&n&&Fe.size(n.dims)>0,ee=["type","type"];F&&ee.push("type"),s&&ee.push("type");let te=[{dims:p,dataType:t.dataType,gpuDataType:0}];g&&te.push({dims:l,dataType:t.dataType,gpuDataType:0});let he=Ne=>{let Ve=Ze("q",t.dataType,t.dims,M),bt=Ze("key",r.dataType,r.dims,M),Vt=[Ve,bt];if(F){let Fr=Ze("past_key",n.dataType,n.dims,M);Vt.push(Fr)}s&&Vt.push(Ze("attention_bias",s.dataType,s.dims));let Rt=jt("output",t.dataType,p),lr=[Rt];g&&lr.push(jt("present_key",t.dataType,l,M));let ar=Tr(1,M),_r=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}];return`
  const TILE_SIZE = ${v}u;

  var<workgroup> tileQ: array<${Ve.type.storage}, ${v*v}>;
  var<workgroup> tileK: array<${Ve.type.storage}, ${v*v}>;
  ${Ne.registerUniforms(_r).declareVariables(...Vt,...lr)}
  ${Ne.mainStart([v,v,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    ${F&&g?`
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx;
    let pastKeyOffset = uniforms.past_sequence_length * uniforms.K * headIdx;`:`
    let kOffset = uniforms.N * uniforms.K * headIdx + n * uniforms.K;`}
    ${g?"let presentKeyOffset = headIdx * uniforms.N * uniforms.K;":""}
    var value = ${ar}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${F&&g?`
              if (n + local_id.y < uniforms.past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else {
                tileK[idx] =
                         key[kOffset + (n + local_id.y - uniforms.past_sequence_length) * uniforms.K + w + local_id.x];
              }`:"tileK[idx] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];"}
      ${g?"present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];":""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
        value += ${ar}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(M){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${M}`)}})()};
        output[outputIdx] = ${Rt.type.value} (sum * uniforms.alpha) + ${s?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${M};${s!==void 0};${n!==void 0};${e}`,inputDependencies:ee},getRunData:()=>({outputs:te,dispatchGroup:q,programUniforms:W}),getShaderSource:he}},Oo=(e,t,r,n,s,i)=>{let a=i+s.kvSequenceLength,u=s.nReps?s.nReps:1,d=s.vHiddenSize*u,p=s.kvNumHeads==null&&e>1&&n,g=p?[s.batchSize,s.numHeads,a,s.headSize]:void 0,l=[s.batchSize,s.sequenceLength,d],b=12,M={x:Math.ceil(s.vHeadSize/b),y:Math.ceil(s.sequenceLength/b),z:s.batchSize*s.numHeads},S=[{type:12,data:s.sequenceLength},{type:12,data:a},{type:12,data:s.vHeadSize},{type:12,data:s.numHeads},{type:12,data:d},{type:12,data:i},{type:12,data:s.kvSequenceLength}],v=p&&n&&Fe.size(n.dims)>0,q=["type","type"];v&&q.push("type");let W=[{dims:l,dataType:t.dataType,gpuDataType:0}];p&&W.push({dims:g,dataType:t.dataType,gpuDataType:0});let F=ee=>{let te=Ze("probs",t.dataType,t.dims),he=Ze("v",r.dataType,r.dims),Ne=[te,he];v&&Ne.push(Ze("past_value",n.dataType,n.dims));let Ve=[jt("output",t.dataType,l)];p&&Ve.push(jt("present_value",t.dataType,g));let bt=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}];return`
  const TILE_SIZE = ${b}u;
  var<workgroup> tileQ: array<${te.type.value}, ${b*b}>;
  var<workgroup> tileK: array<${te.type.value}, ${b*b}>;
  ${ee.registerUniforms(bt).declareVariables(...Ne,...Ve)}
  ${ee.mainStart([b,b,1])}
   let headIdx = workgroup_id.z;
   let m = global_id.y;
   let n = global_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   ${v&&p?`
    let pastValueOffset = headIdx * uniforms.N * uniforms.past_sequence_length + n;
    let vOffset = headIdx * uniforms.N * uniforms.kv_sequence_length + n;
      `:`
   let offsetB = headIdx * uniforms.N * uniforms.K + n;
            `}
    ${p?"let presentValueOffset = headIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${te.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${v&&p?`
        if (w + local_id.y < uniforms.past_sequence_length) {
          tileK[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else {
          tileK[idx] = v[vOffset + (w + local_id.y - uniforms.past_sequence_length) * uniforms.N];
        }
      `:`
        tileK[idx] = v[offsetB + (w + local_id.y) * uniforms.N];
      `}
        ${p?"present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileK[idx];":""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${n!==void 0};${e}`,inputDependencies:q},getRunData:()=>({outputs:W,dispatchGroup:M,programUniforms:S}),getShaderSource:F}},$s=(e,t,r,n,s,i,a,u,d,p,g)=>{let l=Math.min(e.outputCount,1+(a?1:0)+(u?1:0)),b=p.kvNumHeads!==void 0||l>1?p.pastSequenceLength:0,M=b+p.kvSequenceLength,S=d&&Fe.size(d.dims)>0?d:void 0,v=[t,r];p.kvNumHeads===void 0&&l>1&&a&&Fe.size(a.dims)>0&&v.push(a),S&&v.push(S);let q=e.compute(Li(l,t,r,a,S,p,g,b),{inputs:v,outputs:p.kvNumHeads===void 0&&l>1?[-1,1]:[-1]})[0];e.compute(Fo(q,p.batchSize*p.numHeads*p.sequenceLength,M),{inputs:[q],outputs:[]});let W=[q,n];p.kvNumHeads===void 0&&l>1&&u&&Fe.size(u.dims)>0&&W.push(u),e.compute(Oo(l,q,n,u,p,b),{inputs:W,outputs:p.kvNumHeads===void 0&&l>1?[0,2]:[0]})},Ri=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,s=t.inputHiddenSize,i=t.headSize,a=12,u={x:Math.ceil(t.headSize/a),y:Math.ceil(t.sequenceLength/a),z:t.batchSize*t.numHeads},d=[e.inputs[0],e.inputs[1],e.inputs[2]],p=[{type:12,data:n},{type:12,data:s},{type:12,data:i},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],g=l=>{let b=jt("output_q",d[0].dataType,r),M=jt("output_k",d[0].dataType,r),S=jt("output_v",d[0].dataType,r),v=Ze("input",d[0].dataType,d[0].dims),q=Ze("weight",d[1].dataType,d[1].dims),W=Ze("bias",d[2].dataType,d[2].dims),F=v.type.storage,ee=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${a}u;
  var<workgroup> tileInput: array<${F}, ${a*a}>;
  var<workgroup> tileWeightQ: array<${F}, ${a*a}>;
  var<workgroup> tileWeightK: array<${F}, ${a*a}>;
  var<workgroup> tileWeightV: array<${F}, ${a*a}>;
  ${l.registerUniforms(ee).declareVariables(v,q,W,b,M,S)}
  ${l.mainStart([a,a,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${F}(0);
    var valueK = ${F}(0);
    var valueV = ${F}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:p}),getShaderSource:g},{inputs:d,outputs:[-1,-1,-1]})},zo=(e,t)=>{let r=Io(e.inputs,t),[n,s,i]=Ri(e,r);return $s(e,n,s,i,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}}),Vi,Do,Bo,ji,hd=N(()=>{Bt(),Kt(),Xt(),pr(),sr(),Vi=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,s,i)=>{let a=s.length;if(a!==n.length)throw new Error(`${i}: num dimensions != ${a}`);s.forEach((u,d)=>{if(u!==n[d])throw new Error(`${i}: dim[${d}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,"Invalid input scale"),r(e[2].dims,n,"Invalid input B"),r(e[3].dims,n,"Invalid input mean"),r(e[4].dims,n,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Do=(e,t)=>{let{epsilon:r,spatial:n,format:s}=t,i=e[0].dims,a=n?wr(i[i.length-1]):1,u=s==="NHWC"&&i.length>1?a:1,d=Fe.size(i)/a,p=n,g=p?i.length:i,l=Ze("x",e[0].dataType,e[0].dims,a),b=Ze("scale",e[1].dataType,e[1].dims,u),M=Ze("bias",e[2].dataType,e[2].dims,u),S=Ze("inputMean",e[3].dataType,e[3].dims,u),v=Ze("inputVar",e[4].dataType,e[4].dims,u),q=jt("y",e[0].dataType,g,a),W=()=>{let ee="";if(n)ee=`let cOffset = ${i.length===1?"0u":s==="NHWC"?`outputIndices[${i.length-1}] / ${a}`:"outputIndices[1]"};`;else if(s==="NCHW")ee=`
            ${q.indicesSet("outputIndices","0","0")}
            let cOffset = ${q.indicesToOffset("outputIndices")};`;else{ee=`var cIndices = ${b.type.indices}(0);
                       cIndices[0] = outputIndices[${i.length-1}];`;for(let te=1;te<b.rank;te++)ee+=`cIndices[${te}] = outputIndices[${te}];`;ee+=`let cOffset = ${b.indicesToOffset("cIndices")};`}return ee},F=ee=>`
  const epsilon = ${r};
  ${ee.registerUniform("outputSize","u32").declareVariables(l,b,M,S,v,q)}
  ${ee.mainStart()}
  ${ee.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${q.offsetToIndices(`global_idx * ${a}`)};
    ${W()}
    let scale = ${b.getByOffset("cOffset")};
    let bias = ${M.getByOffset("cOffset")};
    let inputMean = ${S.getByOffset("cOffset")};
    let inputVar = ${v.getByOffset("cOffset")};
    let x = ${l.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${q.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${a}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:F,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:p?[{type:12,data:d},...At(i)]:[{type:12,data:d}]})}},Bo=e=>Wt(e),ji=(e,t)=>{let{inputs:r,outputCount:n}=e,s=Bo({...t,outputCount:n});if(k.webgpu.validateInputContent&&Vi(r,s),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Do(r,s))}}),Lo,Ro,No,Vo=N(()=>{Xt(),sr(),Lo=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Ro=e=>{let t=e[0].dims,r=e[0].dims[2],n=Fe.size(t)/4,s=e[0].dataType,i=Ze("input",s,t,4),a=Ze("bias",s,[r],4),u=Ze("residual",s,t,4),d=jt("output",s,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:p=>`
  const channels = ${r}u / 4;
  ${p.declareVariables(i,a,u,d)}

  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${i.getByOffset("global_idx")}
      + ${a.getByOffset("global_idx % channels")} + ${u.getByOffset("global_idx")};
    ${d.setByOffset("global_idx","value")}
  }`}},No=e=>{Lo(e.inputs),e.compute(Ro(e.inputs))}}),jo,Sr,Uo,Wo,Ui,Go,qo,Ho,Ko,Wi,Xo,Qo,Gi,Yo,Zo,qi,ks,Jo,Ps,el,tl,Hi,rl,nl,Ys,sl,il,Ki,Xi,al,Qi,ol,ll,ul,Yi,Zi,dl,Ji,Zs,cl,pl,ea,hl,fl,ta,ra=N(()=>{Kt(),Xt(),pr(),sr(),jo=(e,t,r,n,s,i,a)=>{let u=Math.ceil(t/4),d="";typeof s=="string"?d=`${s}(a)`:d=s("a");let p=Ze("inputData",r,[u],4),g=jt("outputData",n,[u],4),l=[{name:"vec_size",type:"u32"}];return a&&l.push(...a),`
      ${e.registerUniforms(l).declareVariables(p,g)}

  ${i??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${p.getByOffset("global_idx")};
    ${g.setByOffset("global_idx",d)}
  }`},Sr=(e,t,r,n,s,i=e.dataType,a,u)=>{let d=[{type:12,data:Math.ceil(Fe.size(e.dims)/4)}];return a&&d.push(...a),{name:t,shaderCache:{hint:s,inputDependencies:["type"]},getShaderSource:p=>jo(p,Fe.size(e.dims),e.dataType,i,r,n,u),getRunData:p=>({outputs:[{dims:e.dims,dataType:i}],dispatchGroup:{x:Math.ceil(Fe.size(p[0].dims)/64/4)},programUniforms:d})}},Uo=e=>{e.compute(Sr(e.inputs[0],"Abs","abs"))},Wo=e=>{e.compute(Sr(e.inputs[0],"Acos","acos"))},Ui=e=>{e.compute(Sr(e.inputs[0],"Acosh","acosh"))},Go=e=>{e.compute(Sr(e.inputs[0],"Asin","asin"))},qo=e=>{e.compute(Sr(e.inputs[0],"Asinh","asinh"))},Ho=e=>{e.compute(Sr(e.inputs[0],"Atan","atan"))},Ko=e=>{e.compute(Sr(e.inputs[0],"Atanh","atanh"))},Wi=e=>Wt(e),Xo=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Sr(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Qo=e=>{let t,r,n=e.length>=2&&e[1].data!==0,s=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:t=n?e[1].getFloat32Array()[0]:-34028234663852886e22,r=s?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:t=n?e[1].getUint16Array()[0]:64511,r=s?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return Wt({min:t,max:r})},Gi=(e,t)=>{let r=t||Qo(e.inputs),n=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"Clip",s=>`clamp(${s}, vec4<${n}>(uniforms.min), vec4<${n}>(uniforms.max))`,void 0,r.cacheKey,void 0,[{type:e.inputs[0].dataType,data:r.min},{type:e.inputs[0].dataType,data:r.max}],[{name:"min",type:n},{name:"max",type:n}]),{inputs:[0]})},Yo=e=>{e.compute(Sr(e.inputs[0],"Ceil","ceil"))},Zo=e=>{e.compute(Sr(e.inputs[0],"Cos","cos"))},qi=e=>{e.compute(Sr(e.inputs[0],"Cosh","cosh"))},ks=e=>Wt(e),Jo=(e,t)=>{let r=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},Ps=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,el=e=>{let t=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Ps(t)))},tl=e=>{e.compute(Sr(e.inputs[0],"Exp","exp"))},Hi=e=>{e.compute(Sr(e.inputs[0],"Floor","floor"))},rl=e=>{let t=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Ps(t)))},nl=(e,t)=>{let r=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},Ys=e=>{e.compute(Sr(e.inputs[0],"Not",t=>`!${t}`))},sl=e=>{e.compute(Sr(e.inputs[0],"Neg",t=>`-${t}`))},il=e=>{e.compute(Sr(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Ki=e=>{let t=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},Xi=e=>{e.compute(Sr(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},al=e=>Wt(e),Qi=(e,t)=>{let r=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"HardSigmoid",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},ol=e=>{e.compute(Sr(e.inputs[0],"Sin","sin"))},ll=e=>{e.compute(Sr(e.inputs[0],"Sinh","sinh"))},ul=e=>{e.compute(Sr(e.inputs[0],"Sqrt","sqrt"))},Yi=e=>{e.compute(Sr(e.inputs[0],"Tan","tan"))},Zi=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,dl=e=>{e.compute(Sr(e.inputs[0],"Tanh",Zi))},Ji=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${Zi("v")};
}
`,Zs=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,cl=e=>{let t=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"FastGelu",Zs,Ji(t),void 0,e.inputs[0].dataType))},pl=(e,t)=>{let r=Tr(e.inputs[0].dataType);return e.compute(Sr(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},ea=e=>{e.compute(Sr(e.inputs[0],"Log","log"))},hl=(e,t)=>`
const alpha = vec4<${e}>(${t});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,fl=e=>`quick_gelu_impl(${e})`,ta=(e,t)=>{let r=Tr(e.inputs[0].dataType);e.compute(Sr(e.inputs[0],"QuickGelu",fl,hl(r,t.alpha),t.cacheKey,e.inputs[0].dataType))}}),ml,na,_l,fd=N(()=>{Xt(),sr(),ra(),ml=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},na=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=Ze("input",e[0].dataType,e[0].dims,4),n=Ze("bias",e[0].dataType,[e[0].dims[2]],4),s=jt("output",e[0].dataType,t,4),i=Fe.size(t)/4,a=kr(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:u=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${u.declareVariables(r,n,s)}

  ${Ps(a)}

  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes(i)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${s.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},_l=e=>{ml(e.inputs),e.compute(na(e.inputs))}}),sa,gl,kn,ia,wl,yl,bl,Ml,Js,vl,xl,Tl,aa,md=N(()=>{Kt(),Xt(),sr(),sa=(e,t,r,n,s,i,a,u,d,p,g,l)=>{let b,M;typeof u=="string"?b=M=(F,ee)=>`${u}((${F}),(${ee}))`:typeof u=="function"?b=M=u:(b=u.scalar,M=u.vector);let S=jt("outputData",g,n.length,4),v=Ze("aData",d,t.length,4),q=Ze("bData",p,r.length,4),W;if(s)if(i){let F=Fe.size(t)===1,ee=Fe.size(r)===1,te=t.length>0&&t[t.length-1]%4===0,he=r.length>0&&r[r.length-1]%4===0;F||ee?W=S.setByOffset("global_idx",M(F?`${v.type.value}(${v.getByOffset("0")}.x)`:v.getByOffset("global_idx"),ee?`${q.type.value}(${q.getByOffset("0")}.x)`:q.getByOffset("global_idx"))):W=`
            let outputIndices = ${S.offsetToIndices("global_idx * 4u")};
            let offsetA = ${v.broadcastedIndicesToOffset("outputIndices",S)};
            let offsetB = ${q.broadcastedIndicesToOffset("outputIndices",S)};
            ${S.setByOffset("global_idx",M(a||te?v.getByOffset("offsetA / 4u"):`${v.type.value}(${v.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||he?q.getByOffset("offsetB / 4u"):`${q.type.value}(${q.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else W=S.setByOffset("global_idx",M(v.getByOffset("global_idx"),q.getByOffset("global_idx")));else{if(!i)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let F=(ee,te,he="")=>{let Ne=`aData[indexA${te}][componentA${te}]`,Ve=`bData[indexB${te}][componentB${te}]`;return`
            let outputIndices${te} = ${S.offsetToIndices(`global_idx * 4u + ${te}u`)};
            let offsetA${te} = ${v.broadcastedIndicesToOffset(`outputIndices${te}`,S)};
            let offsetB${te} = ${q.broadcastedIndicesToOffset(`outputIndices${te}`,S)};
            let indexA${te} = offsetA${te} / 4u;
            let indexB${te} = offsetB${te} / 4u;
            let componentA${te} = offsetA${te} % 4u;
            let componentB${te} = offsetB${te} % 4u;
            ${ee}[${te}] = ${he}(${b(Ne,Ve)});
          `};g===9?W=`
            var data = vec4<u32>(0);
            ${F("data",0,"u32")}
            ${F("data",1,"u32")}
            ${F("data",2,"u32")}
            ${F("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:W=`
            ${F("outputData[global_idx]",0)}
            ${F("outputData[global_idx]",1)}
            ${F("outputData[global_idx]",2)}
            ${F("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(v,q,S)}

        ${l??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${W}
      }`},gl=(e,t,r,n,s,i,a=r.dataType)=>{let u=!Fe.areEqual(r.dims,n.dims),d=r.dims,p=Fe.size(r.dims),g=!1,l=!1,b=[u];if(u){let M=sn.calcShape(r.dims,n.dims,!1);if(!M)throw new Error("Can't perform binary op on the given tensors");d=M,p=Fe.size(d);let S=Fe.size(r.dims)===1,v=Fe.size(n.dims)===1,q=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,W=n.dims.length>0&&n.dims[n.dims.length-1]%4===0;b.push(S),b.push(v),b.push(q),b.push(W);let F=1;for(let ee=1;ee<d.length;ee++){let te=r.dims[r.dims.length-ee]??1,he=n.dims[n.dims.length-ee]??1;if(te===he)F*=te;else break}F%4===0?(l=!0,g=!0):(S||v||q||W)&&(g=!0)}else g=!0;return b.push(g),{name:e,shaderCache:{hint:t+b.map(M=>M.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:M=>sa(M,r.dims,n.dims,d,g,u,l,s,r.dataType,n.dataType,a,i),getRunData:()=>({outputs:[{dims:d,dataType:a}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:[{type:12,data:Math.ceil(Fe.size(d)/4)},...At(r.dims,n.dims,d)]})}},kn=(e,t,r,n,s,i)=>{e.compute(gl(t,s??"",e.inputs[0],e.inputs[1],r,n,i))},ia=e=>{kn(e,"Add",(t,r)=>`${t}+${r}`)},wl=e=>{kn(e,"Div",(t,r)=>`${t}/${r}`)},yl=e=>{kn(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},bl=e=>{kn(e,"Mul",(t,r)=>`${t}*${r}`)},Ml=e=>{let t=Ze("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;kn(e,"Pow",{scalar:(r,n)=>`pow_custom(${r},${n})`,vector:(r,n)=>`pow_vector_custom(${r},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Js=e=>{kn(e,"Sub",(t,r)=>`${t}-${r}`)},vl=e=>{kn(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},xl=e=>{kn(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Tl=e=>{kn(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},aa=e=>{kn(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}}),Sl,oa,El,Cl,$l,kl,Pl=N(()=>{Kt(),Xt(),pr(),sr(),Sl=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,n=e[r],s=n.dataType,i=n.dims.length;e.forEach((a,u)=>{if(u!==r){if(a.dataType!==s)throw new Error("input tensors should be one type");if(a.dims.length!==i)throw new Error("input tensors should have the same shape");a.dims.forEach((d,p)=>{if(p!==t&&d!==n.dims[p])throw new Error("non concat dimensions must match")})}})},oa=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,El=(e,t)=>{let r=e.length,n=[];for(let s=0;s<r;++s){let i=t.setByOffset("global_idx",e[s].getByIndices("indices"));r===1?n.push(i):s===0?n.push(`if (inputIndex == ${s}u) { ${i} }`):s===r-1?n.push(`else { ${i} }`):n.push(`else if (inputIndex == ${s}) { ${i} }`)}return n.join(`
`)},Cl=(e,t,r,n)=>{let s=Fe.size(r),i=new Array(e.length),a=new Array(e.length),u=0,d=[],p=[],g=[{type:12,data:s}];for(let v=0;v<e.length;++v)u+=e[v].dims[t],i[v]=u,p.push(e[v].dims.length),a[v]=Ze(`input${v}`,n,p[v]),d.push("rank"),g.push({type:12,data:i[v]});for(let v=0;v<e.length;++v)g.push(...At(e[v].dims));g.push(...At(r));let l=jt("output",n,r.length),b=l.indicesGet("indices",t),M=Array.from(Array(i.length).keys()).map(v=>`uniforms.sizeInConcatAxis${v}`).join(","),S=v=>`

  ${(()=>{v.registerUniform("outputSize","u32");for(let q=0;q<e.length;q++)v.registerUniform(`sizeInConcatAxis${q}`,"u32");return v.declareVariables(...a,l)})()}

  ${oa(i.length,M)}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${l.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${b});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${i.length}u>(${M});
      ${b} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${El(a,l)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:r,dataType:n}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:g}),getShaderSource:S}},$l=(e,t)=>{let r=e.inputs,n=r[0].dims,s=Fe.normalizeAxis(t.axis,n.length);Sl(r,s);let i=n.slice();i[s]=r.reduce((u,d)=>u+(d.dims.length>s?d.dims[s]:0),0);let a=r.filter(u=>Fe.size(u.dims)>0);e.compute(Cl(a,s,i,r[0].dataType),{inputs:a})},kl=e=>Wt({axis:e.axis})}),Kn,Xn,Rn,la,Qn=N(()=>{Kt(),Xt(),Kn=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},Xn=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},Rn=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},la=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[r,n]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:n}}else if(t==="Clip"){let[r,n]=e?.activation_params||[nn,yn];return{activation:t,clipMax:n,clipMin:r}}else if(t==="LeakyRelu"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}}),an,ua,ei=N(()=>{an=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},ua=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),ti,Al=N(()=>{ti=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),Il,Fl,ri,da,Ol,As,zl,ca,Is=N(()=>{Kt(),Xt(),sr(),Qn(),ei(),Il=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,Fl=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,ri=(e,t,r="f32",n,s=!1,i=32,a=!1,u=32)=>{let d=t[1]*e[1],p=t[0]*e[0],g=s?d:i,l=s?i:d,b=g/t[0],M=i/t[1];if(!((s&&b===4&&e[1]===4||!s&&(b===3||b===4))&&g%t[0]===0&&i%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${s} is true, innerElementSize ${b} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${b} must be 3 or 4.
  tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${b}<${r}>, ${g/b}>, ${l}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${i}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${b};
const tileInner = ${i};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${a?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${d};

  let num_tiles = ${a?`${Math.ceil(u/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${a?`i32(globalId.z) * ${u}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${M};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${Il(s,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${M}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${b===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Fl(s,b)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},da=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,Ol=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",As=(e,t,r="f32",n,s=!1,i=32,a=!1,u=32,d=!1)=>{let p=e[1]*t[1],g=e[0]*t[0],l=s?p:i,b=s?i:p;if(!(b%t[1]===0&&l%t[0]===0&&i%t[1]===0))throw new Error(`tileAHight ${b} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}, tileInner ${i} must be divisible by workgroupSize[1]${t[1]}`);let M=b/t[1],S=l/t[0],v=i/t[1],q=d?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${p};
    let globalColStart = i32(workgroupId.x) * ${g};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${b}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {
          ${da(s,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${s?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${p};

let tileRowA = i32(localId.y) * ${M};
let tileColA = i32(localId.x) * ${S};
let tileRowB = i32(localId.y) * ${v};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${M}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${S}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${da(s,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Ol(s)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${l}>, ${b}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${g}>, ${i}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${i};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${a?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${a?`${Math.ceil(u/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${a?`i32(globalId.z) * ${u}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;
    ${q}
  }
`},zl=(e,t,r,n,s,i=!1)=>{let[a,u,d]=s,[p,g,l,b]=n,M=fs(a,d),S=fs(u,d),v=kr(n[0].type.tensor),q=()=>{let F=g.rank,ee=p.rank,te=`var aIndices: ${g.type.indices};`;for(let he=F-2-1,Ne=ee-1;he>=0;he--,Ne--)te+=`
aIndices[${he}] = ${ee>1?`batchIndices[${Ne}]`:"batchIndices"};`;return M.forEach(he=>{te+=`
aIndices[${he}] = 0;`}),te+=`
aIndices[${F-2}] = u32(row);
                   aIndices[${F-1}] = u32(colIn);`,te},W=()=>{let F=l.rank,ee=p.rank,te=`var bIndices: ${l.type.indices};`;for(let he=F-2-1,Ne=ee-1;he>=0;he--,Ne--)te+=`
bIndices[${he}] = ${ee>1?`batchIndices[${Ne}]`:"batchIndices"};`;return S.forEach(he=>{te+=`
bIndices[${he}] = 0;`}),te+=`
bIndices[${F-2}] = u32(row);
                   bIndices[${F-1}] = u32(colIn);`,te};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${an(e,v)} {
      var value = ${an(e,v)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        ${q()}
        value = ${g.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${an(e,v)} {
      var value = ${an(e,v)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        ${W()}
        value = ${l.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${an(e,v)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${i?"bias[colIn]":`${an(e,v)}(bias[row])`};`:""}
        ${r}
        ${b.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},ca=(e,t,r,n,s=!1,i)=>{let a=e[0].dims,u=e[1].dims,d=a.slice(0,-2),p=u.slice(0,-2),g=n?n.slice(0,-2):r.slice(0,-2),l=Fe.size(g),b=a[a.length-2],M=a[a.length-1],S=u[u.length-1],v=M%4===0&&S%4===0,q=b<=8?[4,1,1]:[4,4,1],W=[8,8,1],F=[Math.ceil(S/W[0]/q[0]),Math.ceil(b/W[1]/q[1]),Math.ceil(l/W[2]/q[2])],ee=v?4:1,te=[...d,b,M/ee],he=te.length,Ne=[...p,M,S/ee],Ve=Ne.length,bt=[l,b,S/ee],Vt=[{type:6,data:b},{type:6,data:S},{type:6,data:M}];Xn(t,Vt),Vt.push(...At(g,te,Ne));let Rt=["rank","rank"],lr=e.length>2;lr&&(Vt.push(...At(e[2].dims)),Rt.push("rank")),Vt.push(...At(bt));let ar=_r=>{let Fr=g.length,fr=_i("batchDims",e[0].dataType,Fr,1),Zt=kr(e[0].dataType),Or=Ze("a",e[0].dataType,he,ee),Nr=Ze("b",e[1].dataType,Ve,ee),er=jt("result",e[0].dataType,bt.length,ee),gr=[Or,Nr];if(lr){let Xr=s?ee:1;gr.push(Ze("bias",e[2].dataType,e[2].dims.length,Xr))}let Xe=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Rn(t,Xe);let Ct=kr(er.type.tensor),ur=Kn(t,er.type.value,Ct),Kr=zl(ee,lr,ur,[fr,Or,Nr,er],[d,p,g],s);return`
  ${_r.registerUniforms(Xe).registerInternalVariables(fr).declareVariables(...gr,er)}
  ${Kr}
  ${v?ri(q,W,Zt,fr):As(q,W,Zt,fr)}
                   `};return{name:"MatMul",shaderCache:{hint:`${q};${t.activation};${v};${s}`,inputDependencies:Rt},getRunData:()=>({outputs:[{dims:i?i(r):r,dataType:e[0].dataType}],dispatchGroup:{x:F[0],y:F[1],z:F[2]},programUniforms:Vt}),getShaderSource:ar}}}),Dl,Bl,ns=N(()=>{Kt(),wn(),sr(),Qn(),ei(),Al(),Is(),Dl=(e,t,r,n,s=!1,i,a=4,u=4,d=4,p="f32")=>{let g=Vt=>{switch(Vt){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${Vt} is not supported.`)}},l=Vt=>{switch(Vt){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${Vt} is not supported.`)}},b=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,M=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,S=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",v=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",q=e?"row":"col",W=e?"col":"row",F=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${q} / outWidth;
    let outCol = ${q} % outWidth;

    let WRow = ${W} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${W} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${W} % inChannels;
    var resData = ${an(a,p)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${S} && xCol >= 0 && xCol < ${v}) {
      ${b}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${g(a)}
    }
    return resData;`,ee=e?t&&n?`
    let col = colIn * ${a};
    ${F}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${F}
    }
    return ${an(a,p)}(0.0);`:n&&r?`
    let col = colIn * ${a};
    ${F}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${F}
    }
    return ${an(a,p)}(0.0);`,te=`${l(u)}`,he=an(d,p),Ne=an(e?a:u,p),Ve=an(e?u:a,p),bt=Kn(i,he,p);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${Ne} {
      ${e?ee:te}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Ve} {
      ${e?te:ee}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${he}) {
      let col = colIn * ${d};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${M}
      ${ua(s)}
      ${bt}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Bl=(e,t,r,n,s,i,a,u,d)=>{let p=t.format==="NHWC",g=p?e[0].dims[3]:e[0].dims[1],l=r[0],b=p?r[2]:r[3],M=p?r[1]:r[2],S=p?r[3]:r[1],v=p&&(g%4===0||g%3===0)&&S%4===0,q=p?S:b*M,W=p?b*M:S,F=[8,8,1],ee=n<=8?[4,1,1]:[4,4,1],te=[Math.ceil(q/F[0]/ee[0]),Math.ceil(W/F[1]/ee[1]),Math.ceil(l/F[2]/ee[2])];Gr("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${te}`);let he=v?p&&g%4!==0?3:4:1,Ne=F[1]*ee[1],Ve=F[0]*ee[0],bt=Math.max(F[0]*he,F[1]),Vt=n%Ne===0,Rt=s%Ve===0,lr=i%bt===0,ar=v?[he,4,4]:[1,1,1],_r=[{type:6,data:n},{type:6,data:s},{type:6,data:i},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];Xn(t,_r),_r.push(...At(e[0].dims,e[1].dims));let Fr=["rank","rank"];a&&(_r.push(...At(e[2].dims)),Fr.push("rank")),_r.push(...At(r));let fr=Zt=>{let Or=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Rn(t,Or);let Nr=v?4:1,er=kr(e[0].dataType),gr=`
      fn setOutputAtIndex(flatIndex : i32, value : ${v?`vec4<${er}>`:er}) {
        result[flatIndex] = ${v?`vec4<${er}>`:er}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${v?`vec4<${er}>`:er}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${v?"/ 4":""}, value);
      }`,Xe=Ze("x",e[0].dataType,e[0].dims.length,he===3?1:he),Ct=Ze("w",e[1].dataType,e[1].dims.length,Nr),ur=[Xe,Ct],Kr=jt("result",e[0].dataType,r.length,Nr);if(a){let Xr=Ze("bias",e[2].dataType,e[2].dims.length,Nr);ur.push(Xr),gr+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?`vec4<${er}>`:er} {
          return bias[coords.${p?"w":"y"}${v?"/ 4":""}];
        }`}return`
        ${ti("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${Zt.registerUniforms(Or).declareVariables(...ur,Kr)}
        ${gr}
        ${Dl(p,Vt,Rt,lr,a,t,ar[0],ar[1],ar[2],er)}
        ${v?ri(ee,F,er,void 0,!p,bt):As(ee,F,er,void 0,!p,bt,!1,void 0,u)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${he};${v};${Vt};${Rt};${lr};${Ne};${Ve};${bt}`,inputDependencies:Fr},getRunData:()=>({outputs:[{dims:d?d(r):r,dataType:e[0].dataType}],dispatchGroup:{x:te[0],y:te[1],z:te[2]},programUniforms:_r}),getShaderSource:fr}}}),Ll,pa,Fs,Rl,ni,Nl,Vl,jl,_d=N(()=>{Kt(),wn(),Xt(),sr(),Qn(),ei(),Ll=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t},pa=e=>typeof e=="number"?[e,e,e]:e,Fs=(e,t)=>t<=1?e:e+(e-1)*(t-1),Rl=(e,t,r,n=1)=>{let s=Fs(t,n);return Math.floor((e[0]*(r-1)-r+s)/2)},ni=(e,t,r,n,s)=>{s==null&&(s=Rl(e,t[0],n[0]));let i=[0,0,0,r];for(let a=0;a<3;a++)e[a]+2*s>=t[a]&&(i[a]=Math.trunc((e[a]-t[a]+2*s)/n[a]+1));return i},Nl=(e,t,r,n,s,i,a,u,d,p)=>{let g,l,b,M;if(e==="VALID"&&(e=0),typeof e=="number"){g={top:e,bottom:e,left:e,right:e,front:e,back:e};let S=ni([t,r,n,1],[u,d,p],1,[s,i,a],e);l=S[0],b=S[1],M=S[2]}else if(Array.isArray(e)){if(!e.every((v,q,W)=>v===W[0]))throw Error(`Unsupported padding parameter: ${e}`);g={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let S=ni([t,r,n,1],[u,d,p],1,[s,i,a],e[0]);l=S[0],b=S[1],M=S[2]}else if(e==="SAME_UPPER"){l=Math.ceil(t/s),b=Math.ceil(r/i),M=Math.ceil(n/a);let S=(l-1)*s+u-t,v=(b-1)*i+d-r,q=(M-1)*a+p-n,W=Math.floor(S/2),F=S-W,ee=Math.floor(v/2),te=v-ee,he=Math.floor(q/2),Ne=q-he;g={top:ee,bottom:te,left:he,right:Ne,front:W,back:F}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:g,outDepth:l,outHeight:b,outWidth:M}},Vl=(e,t,r,n,s,i=!1,a="channelsLast")=>{let u,d,p,g,l;if(a==="channelsLast")[u,d,p,g,l]=e;else if(a==="channelsFirst")[u,l,d,p,g]=e;else throw new Error(`Unknown dataFormat ${a}`);let[b,,M,S,v]=t,[q,W,F]=pa(r),[ee,te,he]=pa(n),Ne=Fs(M,ee),Ve=Fs(S,te),bt=Fs(v,he),{padInfo:Vt,outDepth:Rt,outHeight:lr,outWidth:ar}=Nl(s,d,p,g,q,W,F,Ne,Ve,bt),_r=i?b*l:b,Fr=[0,0,0,0,0];return a==="channelsFirst"?Fr=[u,_r,Rt,lr,ar]:a==="channelsLast"&&(Fr=[u,Rt,lr,ar,_r]),{batchSize:u,dataFormat:a,inDepth:d,inHeight:p,inWidth:g,inChannels:l,outDepth:Rt,outHeight:lr,outWidth:ar,outChannels:_r,padInfo:Vt,strideDepth:q,strideHeight:W,strideWidth:F,filterDepth:M,filterHeight:S,filterWidth:v,effectiveFilterDepth:Ne,effectiveFilterHeight:Ve,effectiveFilterWidth:bt,dilationDepth:ee,dilationHeight:te,dilationWidth:he,inShape:e,outShape:Fr,filterShape:t}},jl=(e,t,r,n,s,i)=>{let a=i==="channelsLast";a?e[0].dims[3]:e[0].dims[1];let u=[64,1,1],d={x:r.map((q,W)=>W)},p=[Math.ceil(Ll(d.x.map(q=>r[q]))/u[0]),1,1];Gr("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${p}`);let g=1,l=Fe.size(r),b=[{type:12,data:l},{type:12,data:n},{type:12,data:s},{type:12,data:t.strides},{type:12,data:t.dilations}];Xn(t,b),b.push(...At(e[0].dims,e[1].dims));let M=["rank","rank"],S=e.length===3;S&&(b.push(...At(e[2].dims)),M.push("rank")),b.push(...At(r));let v=q=>{let W=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:n.length},{name:"pads",type:"u32",length:s.length},{name:"strides",type:"u32",length:t.strides.length},{name:"dilations",type:"u32",length:t.dilations.length}];Rn(t,W);let F=1,ee=kr(e[0].dataType),te=Ze("x",e[0].dataType,e[0].dims.length,g),he=Ze("W",e[1].dataType,e[1].dims.length,F),Ne=[te,he],Ve=jt("result",e[0].dataType,r.length,F),bt="";if(S){let lr=Ze("bias",e[2].dataType,e[2].dims.length,F);Ne.push(lr),bt+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${ee} {
          return bias[${a?Nt("coords",4,5):Nt("coords",1,5)}];
        }`}let Vt=an(g,ee),Rt=Kn(t,Vt,ee);return`
            ${bt}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${te.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${he.getByIndices("aIndices")};
            }
          ${q.registerUniforms(W).declareVariables(...Ne,Ve)}
          ${q.mainStart()}
          ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${Ve.offsetToIndices("global_idx")};
              let batch = ${Nt("coords",0,te.rank)};
              let d2 = ${a?Nt("coords",te.rank-1,te.rank):Nt("coords",1,te.rank)};
              let xFRCCorner = vec3<u32>(${a?Nt("coords",1,te.rank):Nt("coords",2,te.rank)},
              ${a?Nt("coords",2,te.rank):Nt("coords",3,te.rank)},
              ${a?Nt("coords",3,te.rank):Nt("coords",4,te.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${a?Nt("uniforms.x_shape",1,te.rank):Nt("uniforms.x_shape",2,te.rank)};
              let xShapeZ = ${a?Nt("uniforms.x_shape",2,te.rank):Nt("uniforms.x_shape",3,te.rank)};
              let xShapeW = ${a?Nt("uniforms.x_shape",3,te.rank):Nt("uniforms.x_shape",4,te.rank)};
              let xShapeU = ${a?Nt("uniforms.x_shape",4,te.rank):Nt("uniforms.x_shape",1,te.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${a?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${a?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${a?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${a?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${S?"value = value + getBiasByOutputCoords(coords)":""};
              ${Rt}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${t.cacheKey};${a};${g};${S}`,inputDependencies:M},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:p[0],y:p[1],z:p[2]},programUniforms:b}),getShaderSource:v}}}),si,Ul,gd=N(()=>{Kt(),Xt(),sr(),Qn(),si=(e,t,r,n)=>{let s=e.length>2,i=s?"value += b[output_channel];":"",a=e[0].dims,u=e[1].dims,d=t.format==="NHWC",p=d?r[3]:r[1],g=p/t.group,l=d&&g>=4?wr(p):1,b=Fe.size(r)/l,M=[{type:12,data:b},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:g}];Xn(t,M),M.push(...At(a,[u[0],u[1],u[2],u[3]/l]));let S=s?["rank","rank","rank"]:["rank","rank"];M.push(...At([r[0],r[1],r[2],r[3]/l]));let v=q=>{let W=jt("output",e[0].dataType,r.length,l),F=kr(W.type.tensor),ee=Kn(t,W.type.value,F),te=Ze("x",e[0].dataType,a.length),he=Ze("w",e[1].dataType,u.length,l),Ne=[te,he];s&&Ne.push(Ze("b",e[2].dataType,e[2].dims,l));let Ve=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];Rn(t,Ve);let bt=d?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${te.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${he.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${te.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${he.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${q.registerUniforms(Ve).declareVariables(...Ne,W)}

  ${q.mainStart()}
    ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${W.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${d?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${d?1:2}], outputIndices[${d?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${l} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${d?2:1}];

    var value: ${W.type.value} = ${W.type.value}(0);
    ${bt}
    ${i}
    ${ee}
    ${W.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${t.cacheKey}_${l}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:n?n(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:M}),getShaderSource:v}},Ul=(e,t,r,n)=>{let s=e.length>2,i=wr(r[3]),a=wr(r[2]),u=Fe.size(r)/i/a,d=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/i],p=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/i],g=[r[0],r[1],r[2],r[3]/i],l=[{type:12,data:u},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];Xn(t,l),l.push(...At(d,p,g));let b=(a-1)*t.strides[1]+p[1],M=S=>{let v=jt("output",e[0].dataType,g.length,i),q=kr(v.type.tensor),W=Kn(t,v.type.value,q),F=Ze("x",e[0].dataType,d.length,i),ee=Ze("w",e[1].dataType,p.length,i),te=[F,ee];s&&te.push(Ze("b",e[2].dataType,e[2].dims,i));let he=s?"value += b[output_channel];":"",Ne=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Rn(t,Ne),`
  ${S.registerUniforms(Ne).declareVariables(...te,v)}
  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${a}u;
    let col = (index1 % width1) * ${a}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${F.type.value}, ${b}>;
    var values: array<${v.type.value}, ${a}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${p[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${b}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${F.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${F.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${p[1]}; w_width++) {
          let w_val = ${ee.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${a}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${a}u; i++) {
      var value = values[i];
      ${he}
      ${W}
      ${v.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${i};${a};${b};${p[0]};${p[1]}`,inputDependencies:s?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n?n(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:l}),getShaderSource:M}}}),ha,Os,Wl,Gl=N(()=>{Kt(),Xt(),Is(),sr(),Qn(),ha=(e,t,r,n,s=!1,i)=>{let a=e[0].dims,u=e[1].dims,d=a[a.length-2],p=u[u.length-1],g=a[a.length-1],l=wr(p),b=wr(g),M=wr(d),S=Fe.size(r)/l/M,v=e.length>2,q=n?n.slice(0,-2):r.slice(0,-2),W=[Fe.size(q),d,p],F=[{type:12,data:S},{type:12,data:d},{type:12,data:p},{type:12,data:g}];Xn(t,F),F.push(...At(q,a,u)),v&&F.push(...At(e[2].dims)),F.push(...At(W));let ee=te=>{let he=_i("batch_dims",e[0].dataType,q.length),Ne=Ze("a",e[0].dataType,a.length,b),Ve=Ze("b",e[1].dataType,u.length,l),bt=jt("output",e[0].dataType,W.length,l),Vt=kr(bt.type.tensor),Rt=Kn(t,bt.type.value,Vt),lr=[Ne,Ve],ar="";if(v){let gr=s?l:1;lr.push(Ze("bias",e[2].dataType,e[2].dims.length,gr)),ar=`${s?`value += bias[col / ${gr}];`:`value += ${bt.type.value}(bias[row + i]);`}`}let _r=a.slice(0,-2),Fr=u.slice(0,-2),fr=fs(_r,q),Zt=fs(Fr,q),Or=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Rn(t,Or);let Nr=(gr,Xe)=>{let Ct=gr.rank,ur=gr.name;if(Ct===2)return`var ${ur}_indices = ${gr.type.indices}(0u, 0u);`;let Kr=he.rank,Xr=`var ${ur}_indices: ${gr.type.indices};`;for(let jn=Ct-2-1,Zn=Kr-1;jn>=0;jn--,Zn--)Xr+=`
${ur}_indices[${jn}] = ${Kr>1?`batch_indices[${Zn}]`:"batch_indices"};`;return Xe.forEach(jn=>{Xr+=`
${ur}_indices[${jn}] = 0;`}),Xr+=`${ur}_indices[${Ct-2}] = 0u;
                     ${ur}_indices[${Ct-1}] = 0u;`,Xr},er=()=>{let gr=`var a_data: ${Ne.type.value};`;for(let Xe=0;Xe<b;Xe++)gr+=`
              let b_data${Xe} = b[(b_offset + (k + ${Xe}) * uniforms.N + col) / ${l}];`;for(let Xe=0;Xe<M;Xe++){gr+=`a_data = a[(a_offset + (row + ${Xe}) * uniforms.K + k) / ${b}];`;for(let Ct=0;Ct<b;Ct++)gr+=`
            values[${Xe}] = fma(${Ve.type.value}(a_data${b===1?"":`[${Ct}]`}), b_data${Ct}, values[${Xe}]);
`}return gr};return`
  ${te.registerUniforms(Or).registerInternalVariables(he).declareVariables(...lr,bt)}
  ${te.mainStart()}
    ${te.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${l})) * ${l};
    var index1 = global_idx / (uniforms.N / ${l});
    let stride1 = uniforms.M / ${M};
    let row = (index1 % stride1) * ${M};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${he.offsetToIndices("batch")};`}
    ${Nr(Ne,fr)}
    let a_offset = ${Ne.indicesToOffset("a_indices")};
    ${Nr(Ve,Zt)}
    let b_offset = ${Ve.indicesToOffset("b_indices")};
    var values: array<${bt.type.value}, ${M}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${b}) {
      ${er()}
    }
    for (var i = 0u; i < ${M}u; i++) {
      var value = values[i];
      ${ar}
      ${Rt}
      let cur_indices = ${bt.type.indices}(batch, row + i, col);
      let offset = ${bt.indicesToOffset("cur_indices")};
      ${bt.setByOffset(`offset / ${l}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${l};${b};${M};${s}`,inputDependencies:v?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:i?i(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:F}),getShaderSource:ee}},Os=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Wl=e=>{Os(e.inputs);let t=sn.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&n<8?e.compute(ha(e.inputs,{activation:""},t)):e.compute(ca(e.inputs,{activation:""},t))}}),ql,ii,ai,oi,fa,ma,wd,Hl,_a,yd=N(()=>{Xt(),ns(),_d(),Is(),gd(),Qn(),Gl(),rs(),ql=(e,t,r,n,s,i)=>{let a=e[0],u=e.slice(i?1:2,i?3:4),d=u.length,p=t[0],g=t.slice(2).map((b,M)=>b+(b-1)*(r[M]-1)),l=u.map((b,M)=>b+n[M]+n[M+d]).map((b,M)=>Math.floor((b-g[M]+s[M])/s[M]));return l.splice(0,0,a),l.splice(i?3:1,0,p),l},ii=[2,3,1,0],ai=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},oi=(e,t)=>{let r=e.kernelShape.slice();for(let i=2;i<t[1].dims.length;++i)r[i-2]===0&&(r[i-2]=t[1].dims[i]);let n=e.pads.slice();Tn.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format==="NHWC",e.autoPad);let s=Object.assign({},e);return Object.assign(s,{kernelShape:r,pads:n}),s},fa=e=>{let t=la(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],s=e.dilations,i=e.group,a=e.kernel_shape,u=e.pads,d=e.strides,p=e.w_is_const();return{autoPad:n,format:r,dilations:s,group:i,kernelShape:a,pads:u,strides:d,wIsConst:p,...t,cacheKey:`${e.format};${t.activation};`}},ma=(e,t,r,n)=>{let s=r.format==="NHWC",i=ql(t[0].dims,t[1].dims,r.dilations,r.pads,r.strides,s);if(r.group!==1){let Ne=[t[0]];if(s){let Ve=e.kernelCustomData.wT??e.compute(Fn(t[1],ii),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Ve),Ne.push(Ve)}else Ne.push(t[1]);t.length===3&&Ne.push(t[2]),!e.adapterInfo.isArchitecture("ampere")&&s&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1?e.compute(Ul(Ne,r,i,n),{inputs:Ne}):e.compute(si(Ne,r,i,n),{inputs:Ne});return}let a=t.length===3,u=t[0].dims[s?1:2],d=t[0].dims[s?2:3],p=t[0].dims[s?3:1],g=t[1].dims[2],l=t[1].dims[3],b=i[s?1:2],M=i[s?2:3],S=i[s?3:1],v=s&&g===u&&l===d&&r.pads[0]===0&&r.pads[1]===0;if(v||g===1&&l===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let Ne=i[0],Ve,bt,Vt,Rt=[];if(s){let _r=e.kernelCustomData.wT??e.compute(Fn(t[1],ii),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=_r),v){let Fr=u*d*p;Ve=t[0].reshape([1,Ne,Fr]),bt=_r.reshape([1,Fr,S]),Vt=[1,Ne,S]}else Ve=t[0].reshape([Ne,u*d,p]),bt=_r.reshape([1,p,S]),Vt=[Ne,b*M,S];Rt.push(Ve),Rt.push(bt)}else Ve=t[0].reshape([Ne,p,u*d]),bt=t[1].reshape([1,S,p]),Vt=[Ne,S,b*M],Rt.push(bt),Rt.push(Ve);a&&Rt.push(t[2]);let lr=Vt[2],ar=Rt[0].dims[Rt[0].dims.length-1];lr<8&&ar<8?e.compute(ha(Rt,r,i,Vt,s,n),{inputs:Rt}):e.compute(ca(Rt,r,i,Vt,s,n),{inputs:Rt});return}let q=!0,W=e.kernelCustomData.wT??e.compute(Fn(t[1],ii),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=W);let F=[t[0],W];a&&F.push(t[2]);let ee=s?b*M:S,te=s?S:b*M,he=g*l*p;e.compute(Bl(F,r,i,ee,te,he,a,q,n),{inputs:F})},wd=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let s=[0,t.pads[0],0,t.pads[1]],i=[1].concat(t.strides),a=[1].concat(t.dilations),u=[1].concat(t.kernelShape),d=oi({...t,pads:s,strides:i,dilations:a,kernelShape:u},n);ma(e,n,d,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]])},Hl=(e,t,r)=>{let n=r.format==="NHWC"?"channelsLast":"channelsFirst",s=oi(r,t),i=r.autoPad==="NOTSET"?r.pads:r.autoPad,a=Vl(t[0].dims,t[1].dims,r.strides,r.dilations,i,!1,n);e.compute(jl(t,s,a.outShape,[a.filterDepth,a.filterHeight,a.filterWidth],[a.padInfo.front,a.padInfo.top,a.padInfo.left],n))},_a=(e,t)=>{if(ai(e.inputs,t),e.inputs[0].dims.length===3)wd(e,t);else if(e.inputs[0].dims.length===5)Hl(e,e.inputs,t);else{let r=oi(t,e.inputs);ma(e,e.inputs,r)}}}),ms,Kl,bd=N(()=>{Kt(),wn(),sr(),Qn(),ei(),Al(),Is(),ms=(e,t=!1,r,n,s=4)=>{let i=q=>{switch(q){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return ${n}(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${q} is not supported.`)}},a=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,u=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,d=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",p=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",g=e?"row":"col",l=e?"col":"row",b=`
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${l} / (uniforms.filter_dims[1] * inChannels);
      let WCol = ${l} / inChannels % uniforms.filter_dims[1];
      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(${d}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${l} % inChannels;
      ${a}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${s}];`,M=e?`
      let col = colIn * ${s};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
        ${b}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${s};
      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
        ${b}
      }
      return ${n}(0.0);`,S=`
      let col = colIn * ${s};
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);
      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];
      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${i(s)}
      }
      return ${n}(0.0);
      `,v=Kn(r,n);return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?M:S}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?S:M}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${s};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${u}
      ${ua(t)}
      ${v}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${s}] = value;
    }
  }`},Kl=(e,t,r,n,s,i,a,u)=>{let d=t.format==="NHWC",p=d?e[0].dims[3]:e[0].dims[1],g=r[0],l=d?r[2]:r[3],b=d?r[1]:r[2],M=d?r[3]:r[1],S=d&&p%4===0&&p%3&&M%4===0,v=d?M:l*b,q=d?l*b:M,W=[8,8,1],F=n<=8?[4,1,1]:[4,4,1],ee=[Math.ceil(v/W[0]/F[0]),Math.ceil(q/W[1]/F[1]),Math.ceil(g/W[2]/F[2])];Gr("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${ee}`);let te=S?4:1,he=Math.max(W[0]*te,W[1]),Ne=S?4:1,Ve=[t.kernelShape[d?1:2],t.kernelShape[d?2:3]],bt=[Ve[0]+(t.dilations[0]<=1?0:(Ve[0]-1)*(t.dilations[0]-1)),Ve[1]+(t.dilations[1]<=1?0:(Ve[1]-1)*(t.dilations[1]-1))],Vt=[bt[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),bt[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],Rt=[{type:6,data:n},{type:6,data:s},{type:6,data:i},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:Ve},{type:6,data:Vt}];Xn(t,Rt),Rt.push(...At(e[0].dims,e[1].dims));let lr=["rank","rank"];a&&(Rt.push(...At(e[2].dims)),lr.push("rank")),Rt.push(...At(r));let ar=_r=>{let Fr=Ze("x",e[0].dataType,e[0].dims.length,Ne),fr=Ze("w",e[1].dataType,e[1].dims.length,1),Zt=jt("result",e[0].dataType,r.length,Ne),Or=[Fr,fr],Nr="";if(a){let Xe=Ze("bias",e[2].dataType,e[2].dims.length,Ne);Or.push(Xe),Nr+=`
          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${Xe.type.value} {
            return bias[coords.${d?"w":"y"}${S?"/ 4":""}];
          }`}let er=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:Ve.length},{name:"pads",type:"i32",length:Vt.length}];Rn(t,er);let gr=kr(e[0].dataType,1);if(gr!=="f16"&&gr!=="f32")throw new Error(`elemType ${gr} is not supported.`);return`
        ${ti("uniforms.result_strides")}
        ${_r.registerUniforms(er).declareVariables(...Or,Zt)};
        ${Nr}
        ${ms(d,a,t,Fr.type.value,te)}
        ${S?ri(F,W,gr,void 0,!d,he):As(F,W,gr,void 0,!d,he,!1,void 0,u)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${F};${W};${S}`,inputDependencies:lr},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:ee[0],y:ee[1],z:ee[2]},programUniforms:Rt}),getShaderSource:ar}}}),Xl,ga,Md=N(()=>{Kt(),wn(),Xt(),sr(),Xl=(e,t,r,n,s,i=!1,a,u,d=!1)=>{let p=d?1:2,g=d?2:3,l=d?3:1,b=i?2:1,M=`
  fn setOutputAtIndex(flatIndex : u32, value : ${i?`vec4<${a}>`:a}) {
    result[flatIndex] = ${i?`vec4<${a}>`:a}(value);
  }`;n&&(M+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${i?`vec4<${a}>`:a} {
      return bias[coords.${d?"w":"y"}${i?"/ 4":""}];
    }`);let S=i?4:1,v=Ze("W",t[1].dataType,t[1].dims.length,S),q=Ze("Dy",t[0].dataType,t[0].dims.length,S),W=[q,v];n&&W.push(Ze("bias",t[2].dataType,[r[l]].length,S));let F=jt("result",t[0].dataType,r.length,S),ee=`{
        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];
        let r = ${s?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];
        let c = ${s?"global_id.y":"workgroup_id.y"} * ${b};
        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${a}>, ${b}>;
        for (var i = 0; i < ${b}; i++) {
          dotProd[i] = vec4<${a}>(0.0);
        }
        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {
          var dyR = (${a}(dyCorner.x) + ${a}(wR)) / ${a}(uniforms.strides.x);
          let wRPerm = uniforms.filter_dims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${a}(uniforms.Dy_shape[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {
            let dyC = (${a}(dyCorner.y) + ${a}(wC)) / ${a}(uniforms.strides.y);
            let dyC2 = (${a}(dyCorner.y) + 1.0 + ${a}(wC)) / ${a}(uniforms.strides.y);
            let wCPerm = uniforms.filter_dims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${a}(uniforms.Dy_shape[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${a}(uniforms.Dy_shape[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${q.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${a}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${q.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${a}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = uniforms.Dy_shape[${l}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${q.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${a}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${v.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${q.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${a}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${b}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${a}>(0.0)`};
          ${F.set("batch","r","c + i","d1","value")};
        }
      }`,te=`
          let outputIndices = ${F.offsetToIndices("global_idx")};
          let batch = ${F.indicesGet("outputIndices",0)};
          let d1 = ${F.indicesGet("outputIndices",l)};
          let r = ${F.indicesGet("outputIndices",p)};
          let c = ${F.indicesGet("outputIndices",g)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / uniforms.output_channels_per_group;
          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${a}(0.0);
          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
            if (wR % uniforms.dilations.x != 0) {
              continue;
            }
            let dyR = (${a}(dyRCorner) + ${a}(wR)) / ${a}(uniforms.strides[0]);
            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
            if (dyR < 0.0 || dyR >= ${a}(uniforms.Dy_shape[${p}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
              if (wC % uniforms.dilations.y != 0) {
                continue;
              }
              let dyC = (${a}(dyCCorner) + ${a}(wC)) / ${a}(uniforms.strides.y);
              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
              if (dyC < 0.0 || dyC >= ${a}(uniforms.Dy_shape[${g}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * uniforms.input_channels_per_group;
              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {
                let xValue = ${d?q.get("batch","idyR","idyC","inputChannel"):q.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${v.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":`${a}(0.0)`};
          ${F.setByOffset("global_idx","value")};
        `;return`
  ${e.registerUniforms(u).declareVariables(...W,F)}
  ${M}

    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
  ${i?ee:te}}`},ga=(e,t,r)=>{let n=e.length>2,s=t.outputShape,i=Fe.size(s),a=[Math.ceil(i/64),1,1];Gr("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${a}`);let u=t.format==="NHWC",d=["rank","rank"],p=[t.strides[0],t.strides[1]],g=[t.kernelShape[u?1:2],t.kernelShape[u?2:3]],l=[t.dilations[0],t.dilations[1]],b=[g[0]+(t.dilations[0]<=1?0:(t.kernelShape[u?1:2]-1)*(t.dilations[0]-1)),g[1]+(t.dilations[1]<=1?0:(t.kernelShape[u?2:3]-1)*(t.dilations[1]-1))],M=[b[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),b[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],S=!1,v=t.group,q=e[1].dims,W=q[0]/v,F=q[1],ee=[{type:12,data:i},{type:12,data:p},{type:12,data:g},{type:12,data:l},{type:12,data:b},{type:6,data:M},{type:12,data:W},{type:12,data:F},...At(e[0].dims,e[1].dims)];n&&(ee.push(...At(e[2].dims)),d.push("rank")),ee.push(...At(s));let te=a[1]===1&&a[2]===1,he=Ne=>{let Ve=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:p.length},{name:"filter_dims",type:"u32",length:g.length},{name:"dilations",type:"u32",length:g.length},{name:"effective_filter_dims",type:"u32",length:b.length},{name:"pads",type:"i32",length:M.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],bt=kr(e[0].dataType);return`${Xl(Ne,e,s,n,te,S,bt,Ve,u)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:d},getRunData:()=>({dispatchGroup:{x:a[0],y:a[1],z:a[2]},outputs:[{dims:r?r(s):s,dataType:e[0].dataType}],programUniforms:ee}),getShaderSource:he}}}),li,vd,Ql,wa,Yl,Zl,Jl,ya,eu,tu,ru=N(()=>{bd(),Md(),Qn(),rs(),li=(e,t,r,n,s,i)=>(e-1)*t+r+(n-1)*s+1-i,vd=(e,t,r,n,s)=>{let i=Math.floor(e/2);t==="SAME_UPPER"?(r[n]=i,r[s]=e-i):t==="SAME_LOWER"&&(r[n]=e-i,r[s]=i)},Ql=(e,t,r,n,s,i,a,u,d,p)=>{let g=e.length-2,l=p.length===0;if(d.length===0)for(let S=0;S<g;++S)d.push(0);let b=e[0],M=t[u?3:1]*s;for(let S=0,v=e.length-g-(u?1:0);S<g;++S,++v){let q=e[v],W=l?q*a[S]:p[S],F=li(q,a[S],i[S],t[v],r[S],W);vd(F,n,i,S,S+g),l&&p.push(a[S]*(q-1)+d[S]+(t[v]-1)*r[S]+1-i[S]-i[S+g])}p.splice(0,0,b),p.splice(u?3:1,0,M)},wa=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((l,b)=>l*b,1)===0){r.length=0;for(let l=2;l<t[1].dims.length;++l)r.push(t[1].dims[l])}let n=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let s=e.pads.slice(),i=e.outputShape.slice(),a=e.outputPadding.slice(),u=t[0].dims,d=e.dilations.slice();if(d.reduce((l,b)=>l+b,0)===0){let l=t[0].dims.length-2;d=new Array(l).fill(1)}let p=e.strides.slice();if(p.reduce((l,b)=>l+b,0)===0){let l=t[0].dims.length-2;p=new Array(l).fill(1)}Ql(u,r,d,e.autoPad,e.group,s,p,n,a,i);let g=Object.assign({},e);return Object.assign(g,{kernelShape:r,pads:s,outputPadding:a,outputShape:i,dilations:d,strides:p}),g},Yl=e=>{let t=la(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],s=e.dilations,i=e.group,a=e.kernelShape,u=e.pads,d=e.strides,p=e.wIsConst(),g=e.outputPadding,l=e.outputShape;return{autoPad:n,format:r,dilations:s,group:i,kernelShape:a,outputPadding:g,outputShape:l,pads:u,strides:d,wIsConst:p,...t,cacheKey:`${e.format};${t.activation};`}},Zl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let s=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==s))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.reduce((a,u)=>a+u,0)>0&&t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.reduce((a,u)=>a+u,0)>0&&t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.reduce((a,u)=>a+u,0)>0&&t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.outputPadding.length!==i&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${i}D`);if(t.kernelShape.reduce((a,u)=>a+u,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Jl=[2,3,1,0],ya=(e,t,r)=>{let n=wa(r,t),s=r.format==="NHWC",i=n.outputShape,a=i[s?3:1],u=t[0].dims[s?3:1];if(n.group!==1||a===1&&u===1){e.compute(ga(t,n));return}let d=i[s?1:2],p=i[s?2:3],g=t[1].dims[2],l=t[1].dims[3],b=s?d*p:a,M=s?a:d*p,S=g*l*u,v=!0,q=e.kernelCustomData.wT??e.compute(Fn(t[1],Jl),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=q);let W=[t[0],q],F=t.length===3;F&&(!s&&t[2].dims.length===1?W.push(t[2].reshape([t[2].dims[0],1,1])):W.push(t[2])),e.compute(Kl(W,n,i,b,M,S,F,v),{inputs:W})},eu=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let s=t.kernelShape;(s.length===0||s[0]===0)&&(s=[e.inputs[1].dims[2]]);let i=t.dilations;(i.length===0||i[0]===0)&&(i=[1]);let a=t.strides;(a.length===0||a[0]===0)&&(a=[1]);let u=t.pads;u.length===0&&(u=[0,0]),u=[0,u[0],0,u[1]],a=[1].concat(a),i=[1].concat(i),s=[1].concat(s);let d=wa({...t,pads:u,strides:a,dilations:i,kernelShape:s},n);e.compute(ga(n,d,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},tu=(e,t)=>{Zl(e.inputs,t),e.inputs[0].dims.length===3?eu(e,t):ya(e,e.inputs,t)}}),nu,su,ba,xd=N(()=>{Kt(),Xt(),pr(),sr(),nu=(e,t,r,n)=>{let s=Fe.size(t),i=t.length,a=Ze("input",e,i),u=jt("output",e,i),d=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=Fe.normalizeAxis(d,i),g=l=>{let b=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,M=Nt("uniforms.input_shape","uniforms.axis",i),S=n.reverse?b+(n.exclusive?" + 1":""):"0",v=n.reverse?M:b+(n.exclusive?"":" + 1");return`
                ${l.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,u)}
                ${l.mainStart()}
                  ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${u.offsetToIndices("global_idx")};
                  var sum = ${u.type.value}(0);
                  let first : i32 = ${S};
                  let last : i32 = ${v};
                  for (var i : i32 = first; i < last; i++) {
                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${a.getByIndices("inputIndices")};
                  }
                  ${u.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},{type:12,data:p},...At(t,t)]}),getShaderSource:g}},su=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,s=e.inputs[1];e.compute(nu(n,r,s,t),{inputs:[0]})},ba=e=>{let t=e.exclusive===1,r=e.reverse===1;return Wt({exclusive:t,reverse:r})}}),iu,ui,au,ou,lu,Td=N(()=>{Kt(),Xt(),pr(),sr(),iu=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},ui=(e,t,r,n)=>{let s=[];s.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let i=0;i<t;++i)s.push(r.indicesSet("a",e[i],`i[${i}]`));return s.push("return a;}"),s.join(`
`)},au=(e,t)=>{let r,n,s,i,a,u,d=t.format==="NHWC",p=t.blocksize,g=t.mode==="DCR";d?([r,n,s,i]=e.dims,a=g?[r,n,s,p,p,i/p**2]:[r,n,s,i/p**2,p,p],u=g?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([r,n,s,i]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],a=g?[r,p,p,i/p**2,n,s]:[r,i/p**2,p,p,n,s],u=g?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let l=e.reshape(a),b=l.dims.length,M=e.dataType,S=Ze("a",M,b),v=jt("output",M,b),q=W=>`
  ${W.registerUniform("output_size","u32").declareVariables(S,v)}

  ${ui(u,b,S,v)}

  ${W.mainStart()}
    ${W.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${v.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${v.setByOffset("global_idx",S.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:W=>{let F=d?[r,n*p,s*p,i/p**2]:[r,i/p**2,n*p,s*p],ee=Fe.size(F),te=l.dims,he=Fe.sortBasedOnPerm(te,u);return{outputs:[{dims:F,dataType:W[0].dataType}],dispatchGroup:{x:Math.ceil(ee/64)},programUniforms:[{type:12,data:ee},...At(te,he)]}},getShaderSource:q}},ou=(e,t)=>{iu(e.inputs),e.compute(au(e.inputs[0],t))},lu=e=>Wt({blocksize:e.blocksize,mode:e.mode,format:e.format})}),zs,ss,uu,du,cu,Ma,pu,va,xa,hu,fu,mu=N(()=>{Kt(),Xt(),pr(),sr(),zs="[a-zA-Z]|\\.\\.\\.",ss="("+zs+")+",uu="^"+ss+"$",du="("+ss+",)*"+ss,cu="^"+du+"$",Ma=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let r=this.symbolToIndices.get(e);r===void 0?r=[t]:r.push(t),this.symbolToIndices.set(e,r)}},pu=class{constructor(e,t){this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[r,n]=t.includes("->")?t.split("->",2):[t,""];if(!r.match(RegExp(cu)))throw new Error("Invalid LHS term");if(r.split(",").forEach((s,i)=>{let a=e[i].dims.slice();if(!s.match(RegExp(uu)))throw new Error("Invalid LHS term");let u=this.processTerm(s,!0,a,i);this.lhs.push(u)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([s,i])=>i.count===1||s==="...").map(([s])=>s).join("");else if(!n.match(RegExp(ss)))throw new Error("Invalid RHS");n.match(RegExp(zs,"g"))?.forEach(s=>{if(s==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(s);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(e,t,r){let n=this.symbolToInfo.get(e);if(n!==void 0){if(n.dimValue!==t&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(r)}else n={count:1,dimValue:t,inputIndices:[r]};this.symbolToInfo.set(e,n)}processTerm(e,t,r,n=-1){let s=r.length,i=!1,a=[],u=0;if(!e.match(RegExp(uu))&&!t&&e!=="")throw new Error("Invalid LHS term");let d=e.match(RegExp(zs,"g")),p=new Ma(n);return d?.forEach((g,l)=>{if(g==="..."){if(i)throw new Error("Only one ellipsis is allowed per input term");i=!0;let b=s-d.length+1;if(b<0)throw new Error("Ellipsis out of bounds");if(a=r.slice(u,u+b),this.hasEllipsis){if(this.ellipsisDims.length!==a.length||this.ellipsisDims.toString()!==a.toString())throw new Error("Ellipsis dimensions mismatch")}else if(t)this.hasEllipsis=!0,this.ellipsisDims=a;else throw new Error("Ellipsis must be specified in the LHS");for(let M=0;M<a.length;M++){let S=String.fromCharCode(48+M);p.addSymbol(S,l+M),this.addSymbol(S,r[u++],n)}}else p.addSymbol(g,l+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(g,r[u++],n)}),p}},va=e=>e+"_max",xa=(e,t,r,n)=>{let s=e.map(p=>p.length).map((p,g)=>Ze(`input${g}`,t,p)),i=Fe.size(n),a=jt("output",t,n.length),u=[...r.symbolToInfo.keys()].filter(p=>!r.rhs.symbolToIndices.has(p)),d=p=>{let g=[],l="var prod = 1.0;",b="var sum = 0.0;",M="sum += prod;",S=[],v=[],q=[],W=[],F=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((te,he)=>{if(r.rhs.symbolToIndices.has(he)){let Ne=r.rhs.symbolToIndices.get(he)?.[0];Ne!==void 0&&r.lhs.forEach((Ve,bt)=>{if(te.inputIndices.includes(bt)){let Vt=Ve.symbolToIndices.get(he);if(Vt===void 0)throw new Error("Invalid symbol error");Vt.forEach(Rt=>{g.push(`${s[bt].indicesSet(`input${bt}Indices`,Rt,a.indicesGet("outputIndices",Ne))}`)})}})}else r.lhs.forEach((Ne,Ve)=>{if(te.inputIndices.includes(Ve)){let bt=Ne.symbolToIndices.get(he);if(bt===void 0)throw new Error("Invalid symbol error");bt.forEach(Vt=>{S.push(`${s[Ve].indicesSet(`input${Ve}Indices`,Vt,`${he}`)}`)}),W.push(`prod *= ${s[Ve].getByIndices(`input${Ve}Indices`)};`)}}),v.push(`for(var ${he}: u32 = 0; ${he} < uniforms.${va(he)}; ${he}++) {`),q.push("}")});let ee=F?[...g,`let sum = ${s.map((te,he)=>te.getByIndices(`input${he}Indices`)).join(" * ")};`]:[...g,b,...v,...S,l,...W,M,...q];return`
            ${p.registerUniforms(u.map(te=>({name:`${va(te)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...s,a)}

            ${p.mainStart()}
            ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${a.offsetToIndices("global_idx")};
            ${s.map((te,he)=>`var input${he}Indices: ${s[he].type.indices};`).join(`
`)}
            ${ee.join(`
`)};
            ${a.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let p=u.filter(l=>r.symbolToInfo.has(l)).map(l=>({type:12,data:r.symbolToInfo.get(l)?.dimValue||0}));p.push({type:12,data:i});let g=e.map((l,b)=>[...At(l)]).reduce((l,b)=>l.concat(b),p);return g.push(...At(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:g}},getShaderSource:d}},hu=(e,t)=>{let r=new pu(e.inputs,t.equation),n=r.outputDims,s=e.inputs.map((i,a)=>i.dims);e.compute(xa(s,e.inputs[0].dataType,r,n))},fu=e=>{let t=e.equation.replace(/\s+/g,"");return Wt({equation:t})}}),Sd,_u,Ta,Sa,gu,Ed=N(()=>{Kt(),Xt(),sr(),Sd=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,s=t.length<r.length?0:t.length-r.length;for(;n<r.length&&s<t.length;++n,++s)if(r[n]!==t[s]&&r[n]!==1&&t[s]!==1)throw new Error("Expand requires shape to be broadcastable to input")},_u=(e,t)=>{let r=e.length-t.length,n=[];for(let s=0;s<r;++s)n.push(e[s]);for(let s=0;s<t.length;++s)n.push(t[s]===1?e[s+r]:t[s]);return n},Ta=(e,t)=>e.length>t.length?_u(e,t):_u(t,e),Sa=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=Ta(t,r),s=e[0].dataType,i=s===9?4:1,a=Math.ceil(Fe.size(n)/i),u=p=>{let g=Ze("input",s,t.length,i),l=jt("output",s,n.length,i),b;if(s===9){let M=(S,v,q="")=>`
          let outputIndices${v} = ${l.offsetToIndices(`outputOffset + ${v}u`)};
          let offset${v} = ${g.broadcastedIndicesToOffset(`outputIndices${v}`,l)};
          let index${v} = offset${v} / 4u;
          let component${v} = offset${v} % 4u;
          ${S}[${v}] = ${q}(${g.getByOffset(`index${v}`)}[component${v}]);
        `;b=`
        let outputOffset = global_idx * ${i};
        var data = vec4<u32>(0);
        ${M("data",0,"u32")}
        ${M("data",1,"u32")}
        ${M("data",2,"u32")}
        ${M("data",3,"u32")}
        ${l.setByOffset("global_idx","data")}
      }`}else b=`
        let outputIndices = ${l.offsetToIndices("global_idx")};
        let inputOffset = ${g.broadcastedIndicesToOffset("outputIndices",l)};
        ${l.setByOffset("global_idx",g.getByOffset("inputOffset"))}
      }`;return`
    ${p.registerUniform("vec_size","u32").declareVariables(g,l)}
    ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${b}`},d=[{type:12,data:a},...At(t,n)];return{name:"Expand",shaderCache:{hint:`${n.length}`,inputDependencies:["rank"]},getShaderSource:u,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:d})}},gu=e=>{Sd(e.inputs),e.compute(Sa(e.inputs),{inputs:[0]})}}),Ea,wu,Cd=N(()=>{Kt(),Xt(),sr(),ra(),Ea=e=>{let t=e[0].dataType,r=Fe.size(e[0].dims),n=Fe.size(e[1].dims),s=n%4===0,i=a=>{let u=Ze("x",t,[1],4),d=Ze("bias",t,[1],4),p=jt("y",t,[1],4),g=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],l=M=>`
      let bias${M}_offset: u32 = (global_idx * 4 + ${M}) % uniforms.bias_size;
      let bias${M} = ${d.getByOffset(`bias${M}_offset / 4`)}[bias${M}_offset % 4];`,b=s?`
      let bias = ${d.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${l(0)}${l(1)}${l(2)}${l(3)}
      let bias = ${u.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(g).declareVariables(u,d,p)}

    ${Ji(Tr(t))}

    ${a.mainStart(bn)}
      ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${u.getByOffset("global_idx")};
      ${b}
      let x_in = x + bias;
      ${p.setByOffset("global_idx",Zs("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${s}`,inputDependencies:["type","type"]},getShaderSource:i,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(r/bn/4)}})}},wu=e=>{e.inputs.length<2||Fe.size(e.inputs[1].dims)===0?cl(e):e.compute(Ea(e.inputs))}}),Ca,yu,bu,$a,$d=N(()=>{Kt(),Xt(),pr(),sr(),Ca=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},yu=(e,t)=>{let r=e[0].dims,n=e[1].dims,s=r.length,i=Fe.normalizeAxis(t.axis,s),a=r.slice(0);a.splice(i,1,...n);let u=r[i],d=e[0].dataType===9?4:1,p=Math.ceil(Fe.size(a)/d),g=[{type:12,data:p},{type:6,data:u},{type:12,data:i},...At(e[0].dims,e[1].dims,a)],l=b=>{let M=Ze("data",e[0].dataType,e[0].dims.length,d),S=Ze("inputIndices",e[1].dataType,e[1].dims.length),v=jt("output",e[0].dataType,a.length,d),q=F=>{let ee=n.length,te=`var indicesIndices${F}  = ${S.type.indices}(0);`;for(let he=0;he<ee;he++)te+=`${ee>1?`indicesIndices${F}[${he}]`:`indicesIndices${F}`} = ${a.length>1?`outputIndices${F}[uniforms.axis + ${he}]`:`outputIndices${F}`};`;te+=`
          var idx${F} = ${S.getByIndices(`indicesIndices${F}`)};
          if (idx${F} < 0) {
            idx${F} = idx${F} + uniforms.axisDimLimit;
          }
          var dataIndices${F} : ${M.type.indices};
        `;for(let he=0,Ne=0;he<s;he++)he===i?(te+=`${s>1?`dataIndices${F}[${he}]`:`dataIndices${F}`} = u32(idx${F});`,Ne+=ee):(te+=`${s>1?`dataIndices${F}[${he}]`:`dataIndices${F}`} = ${a.length>1?`outputIndices${F}[${Ne}]`:`outputIndices${F}`};`,Ne++);return te},W;if(e[0].dataType===9){let F=(ee,te,he="")=>`
          let outputIndices${te} = ${v.offsetToIndices(`outputOffset + ${te}u`)};
          ${q(te)};
          let offset${te} = ${M.indicesToOffset(`dataIndices${te}`)};
          let index${te} = offset${te} / 4u;
          let component${te} = offset${te} % 4u;
          ${ee}[${te}] = ${he}(${M.getByOffset(`index${te}`)}[component${te}]);
        `;W=`
        let outputOffset = global_idx * ${d};
        var value = vec4<u32>(0);
        ${F("value",0,"u32")}
        ${F("value",1,"u32")}
        ${F("value",2,"u32")}
        ${F("value",3,"u32")}
        ${v.setByOffset("global_idx","value")}
      `}else W=`
      let outputIndices = ${v.offsetToIndices("global_idx")};
      ${q("")};
      let value = ${M.getByIndices("dataIndices")};
      ${v.setByOffset("global_idx","value")};
      `;return`
      ${b.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(M,S,v)}
      ${b.mainStart()}
        ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${W}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:g}),getShaderSource:l}},bu=e=>Wt({axis:e.axis}),$a=(e,t)=>{let r=e.inputs;Ca(r),e.compute(yu(e.inputs,t))}}),Mu,vu,xu,Ir,uc=N(()=>{Kt(),Xt(),pr(),sr(),Mu=(e,t)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let r=Fe.normalizeAxis(t.quantizeAxis,e[0].dims.length),n=t.blockSize,s=e[0],i=e[2],a=e.length===4?e[3]:void 0;if(i.dims.length!==s.dims.length||!s.dims.map((u,d)=>d===r?Math.ceil(u/n)===i.dims[d]:u===i.dims[d]).reduce((u,d)=>u&&d,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(a){if(a.dataType!==s.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(a.dims.length!==i.dims.length||!a.dims.map((u,d)=>u===i.dims[d]).reduce((u,d)=>u&&d,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},vu=(e,t)=>{let r=e[0].dims,n=e[1].dims,s=r.length,i=Fe.normalizeAxis(t.gatherAxis,s),a=Fe.normalizeAxis(t.quantizeAxis,s),u=r.slice(0);u.splice(i,1,...n);let d=Fe.size(u),p=e[2].dataType,g=e[0].dataType===22,l=[{type:12,data:d},{type:12,data:a},{type:12,data:i},{type:12,data:t.blockSize},...At(...e.map((M,S)=>M.dims),u)],b=M=>{let S=Ze("data",e[0].dataType,e[0].dims.length),v=Ze("inputIndices",e[1].dataType,e[1].dims.length),q=Ze("scales",e[2].dataType,e[2].dims.length),W=e.length>3?Ze("zeroPoint",e[3].dataType,e[3].dims.length):void 0,F=jt("output",p,u.length),ee=[S,v,q];W&&ee.push(W);let te=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${M.registerUniforms(te).declareVariables(...ee,F)}
        ${M.mainStart()}
        let output_indices = ${F.offsetToIndices("global_idx")};
        var indices_indices = ${v.type.indices}(0);
        ${n.length>1?`
          for (var i: u32 = 0; i < ${n.length}; i++) {
            let index = ${F.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${v.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${F.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${S.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${F.indicesGet("output_indices","i")};
          ${S.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${v.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${r[i]};
        }
        ${S.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${u.length}; i++) {
          let index = ${F.indicesGet("output_indices",`i + ${n.length} - 1`)};
          ${S.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${S.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${S.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${g?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${q.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${q.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${q.getByIndices("scale_indices")};
        ${W?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${W.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${W.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${g?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${Tr(p)}(quantized_data - zero_point) * scale;
        ${F.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${t.cacheKey};${e.filter((M,S)=>S!==1).map(M=>M.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(M,S)=>"rank")},getRunData:()=>({outputs:[{dims:u,dataType:p}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:l}),getShaderSource:b}},xu=(e,t)=>{let r=e.inputs;Mu(r,t),e.compute(vu(e.inputs,t))},Ir=e=>Wt({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),kd,Pd,ka,Tu,Ad=N(()=>{Kt(),Xt(),pr(),sr(),kd=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Pd=(e,t)=>{let r=e[0].dims,n=e[0].dataType,s=r.length,i=e[1].dims,a=e[1].dataType,u=Fe.normalizeAxis(t.axis,s),d=r[u],p=i.slice(0),g=Fe.size(p),l=Ze("input",n,s),b=Ze("indicesInput",a,i.length),M=jt("output",n,p.length),S=[{type:12,data:g},{type:6,data:d},{type:12,data:u}];return S.push(...At(r,i,p)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:S}),getShaderSource:v=>`
      ${v.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(l,b,M)}
      ${v.mainStart()}
      ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${M.offsetToIndices("global_idx")};

      var idx = ${b.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${l.type.indices}(outputIndices);
      ${l.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${l.getByIndices("inputIndices")};

      ${M.setByOffset("global_idx","value")};
  }`}},ka=e=>Wt({axis:e.axis}),Tu=(e,t)=>{let r=e.inputs;kd(r),e.compute(Pd(e.inputs,t))}}),Su,Eu,Pa,Aa,Id=N(()=>{Kt(),Xt(),sr(),Su=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Eu=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[s,i,a]=xr.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),u=[s,i];if(!u)throw new Error("Can't use gemm on the given tensors");let d=Fe.size(u),p=[{type:12,data:d},{type:12,data:s},{type:12,data:i},{type:12,data:a},{type:1,data:t.alpha},{type:1,data:t.beta}],g=["type","type"];e.length===3&&(p.push(...At(e[2].dims)),g.push("rank")),p.push(...At(u));let l=b=>{let M="";t.transA&&t.transB?M="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?M="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?M="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(M="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let S=t.alpha===1?"":"value *= uniforms.alpha;",v=Ze("a",e[0].dataType,e[0].dims),q=Ze("b",e[1].dataType,e[1].dims),W=v.type.value,F=null,ee=[v,q];e.length===3&&(F=Ze("c",e[2].dataType,e[2].dims.length),ee.push(F));let te=jt("output",e[0].dataType,u.length);ee.push(te);let he=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${b.registerUniforms(he).declareVariables(...ee)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${W}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${M}
    }

    ${S}
    ${F!=null?`let cOffset = ${F.broadcastedIndicesToOffset("vec2(m, n)",te)}; value += ${W}(uniforms.beta) * ${F.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:p}),getShaderSource:l}},Pa=e=>{let t=e.transA,r=e.transB,n=e.alpha,s=e.beta;return{transA:t,transB:r,alpha:n,beta:s,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Aa=(e,t)=>{Su(e.inputs),e.compute(Eu(e.inputs,t))}}),pn,Ia,Fd,Cu,$u,Ds,ku,Pu=N(()=>{Kt(),Xt(),pr(),P(),Ni(),sr(),rs(),pn=(e,t)=>e.length>t&&e[t].dims.length>0?e[t]:void 0,Ia=(e,t)=>{let r=e[0],n=pn(e,1),s=pn(e,2),i=pn(e,3),a=pn(e,4),u=pn(e,5),d=pn(e,6),p=pn(e,7);if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let g=r.dims[0],l=r.dims[1],b=r.dims.length===3?r.dims[2]:t.numHeads*r.dims[4],M=l,S=0,v=0,q=Math.floor(b/t.numHeads);if(d&&p&&Fe.size(d.dims)&&Fe.size(p.dims)){if(d.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(d.dims[0]!==g||d.dims[1]!==t.numHeads||d.dims[3]!==q)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(p.dims[0]!==g||p.dims[1]!==t.numHeads||p.dims[3]!==q)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(d.dims[2]!==p.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(p.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');S=d.dims[2],v=d.dims[2]}else if(d&&Fe.size(d.dims)||p&&Fe.size(p.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let W;if(n&&Fe.size(n.dims)>0){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');W=2,M=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==q)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');W=5,M=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==q)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');W=0,M=n.dims[2]}}else{if(r.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(r.dims[2]!==t.numHeads||r.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');W=3}if(i&&Fe.size(i.dims)>0){if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&n.dims.length===5&&n.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let F=S+M,ee=0;if(a&&Fe.size(a.dims)>0){ee=8;let Ve=a.dims;throw Ve.length===1?Ve[0]===g?ee=1:Ve[0]===3*g+2&&(ee=3):Ve.length===2&&Ve[0]===g&&Ve[1]===F&&(ee=5),ee===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let te=!1,he=b;if(s&&Fe.size(s.dims)>0){if(s.dims.length!==3&&s.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(s.dims.length===3){if(M!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');he=s.dims[2]}else{if(M!==s.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');he=s.dims[1]*s.dims[3],te=!0}}let Ne=!1;if(a&&Fe.size(a.dims)>0)throw new Error("Key padding mask is not supported");if(u&&Fe.size(u.dims)>0){if(u.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(u.dims[0]!==g||u.dims[1]!==t.numHeads||u.dims[2]!==l||u.dims[3]!==F)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:g,sequenceLength:l,pastSequenceLength:S,kvSequenceLength:M,totalSequenceLength:F,maxSequenceLength:v,inputHiddenSize:0,hiddenSize:b,vHiddenSize:he,headSize:q,vHeadSize:Math.floor(he/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:ee,scale:t.scale,broadcastResPosBias:Ne,passPastInKv:te,qkvFormat:W}},Fd=e=>Wt({...e}),Cu=Wt({perm:[0,2,1,3]}),$u=(e,t,r,n,s,i,a)=>{let u=[n,s,i],d=Fe.size(u),p=[{type:12,data:d},{type:12,data:a},{type:12,data:i}],g=l=>{let b=jt("qkv_with_bias",t.dataType,u),M=Ze("qkv",t.dataType,u),S=Ze("bias",r.dataType,u),v=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${l.registerUniforms(v).declareVariables(M,S,b)}
  ${l.mainStart()}
    ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:p}),getShaderSource:g},{inputs:[t,r],outputs:[-1]})[0]},Ds=(e,t,r,n,s,i,a,u)=>{let d=i;if(a&&Fe.size(a.dims)>0){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return d=$u(e,i,a,t,n,r*s,u),d=d.reshape([t,n,r,s]),e.compute(Fn(d,Cu.perm),{inputs:[d],outputs:[-1]})[0]}else return i.dims.length===3&&(d=i.reshape([t,n,r,s])),e.compute(Fn(d,Cu.perm),{inputs:[d],outputs:[-1]})[0]},ku=(e,t)=>{let r=Ia(e.inputs,t),n=e.inputs[0],s=pn(e.inputs,1),i=pn(e.inputs,2),a=pn(e.inputs,3),u=pn(e.inputs,4),d=pn(e.inputs,5),p=pn(e.inputs,6),g=pn(e.inputs,7);if(n.dims.length===5)throw new Error("Packed QKV is not implemented");if(s?.dims.length===5)throw new Error("Packed KV is not implemented");let l=s&&i&&s.dims.length===4&&i.dims.length===4,b=Ds(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,n,a,0);if(l)return $s(e,b,s,i,u,void 0,p,g,d,r,t);if(!s||!i)throw new Error("key and value must be provided");let M=Ds(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,s,a,r.hiddenSize),S=Ds(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,i,a,2*r.hiddenSize);$s(e,b,M,S,u,void 0,p,g,d,r,t)}}),Fa,Au,Iu,Oa,Fu,Ou=N(()=>{Kt(),Xt(),sr(),Fa=e=>Array.from(e.getBigInt64Array(),Number),Au=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Fa(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Iu=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},Oa=(e,t)=>{let r=e[0].dims,n=t??Fa(e[1]),s=Iu(r,n),i=Fe.size(s),a=e[0].dataType,u=Ze("input",a,r.length),d=jt("output",a,s.length),p=g=>`
      const inputShape = ${u.indices(...r)};
      ${g.registerUniform("output_size","u32").declareVariables(u,d)}
      ${g.mainStart()}
      ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${d.offsetToIndices("global_idx")};
      var input_indices: ${u.type.indices};
      for (var i = 0; i < ${r.length}; i++) {
        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;

        ${u.indicesSet("input_indices","i","input_dim_value")}
      }
      ${d.setByOffset("global_idx",u.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...At(e[0].dims,s)]}),getShaderSource:p}},Fu=e=>{Au(e.inputs),e.compute(Oa(e.inputs),{inputs:[0]})}}),zu,za,Du,Bu,Da,Lu,Od=N(()=>{Kt(),Xt(),pr(),Ni(),sr(),Pu(),Ou(),rs(),zu=(e,t)=>{let r=e[0],n=e[1],s=e[2],i=e[3],a=e[4];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let u=!1,d=r.dims[0],p=r.dims[1],g=r.dims.length===3?u?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],l=p,b=0,M=0,S=Math.floor(g/t.numHeads),v=i&&i.dims.length!==0,q=a&&a.dims.length!==0,W=!0;if(v&&q){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(a.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');b=i.dims[1],M=i.dims[1]}else if(v||q)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let F;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(r.dims[2]%n.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');F=2,l=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==S)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');F=5,l=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==S)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');F=0,l=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');F=3}let ee=0,te=!1,he=g;if(s){if(s.dims.length!==3&&s.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(s.dims.length===3){if(l!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');he=s.dims[2]}else{if(l!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');he=s.dims[1]*s.dims[3],te=!0}}let Ne=b+l;return{batchSize:d,sequenceLength:p,pastSequenceLength:b,kvSequenceLength:l,totalSequenceLength:Ne,maxSequenceLength:M,inputHiddenSize:0,hiddenSize:g,vHiddenSize:he,headSize:S,vHeadSize:Math.floor(he/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:ee,scale:t.scale,broadcastResPosBias:!1,passPastInKv:te,qkvFormat:F,isPastkvBSNH:W}},za=(e,t,r,n)=>{let s=[n.batchSize,n.totalSequenceLength,n.kvNumHeads,n.headSize],i=4,a=Fe.size(s)/i,u=n.totalSequenceLength,d=jt("present_kv",r,s.length,i),p=Ze("new_kv",e.dataType,e.dims.length,i),g=t?Ze("past_kv",t.dataType,t.dims.length,i):void 0,l=Math.ceil(n.headSize/i),b={x:u,y:e.dims[0],z:1},M=t?["rank","rank"]:["rank"],S=[{type:12,data:a},{type:12,data:n.pastSequenceLength},{type:12,data:n.kvSequenceLength},{type:12,data:n.totalSequenceLength}],v=[p];g?(S.push(...At(e.dims),...At(t.dims),...At(s)),v.push(g)):S.push(...At(e.dims),...At(s));let q=[{name:"output_size",type:"u32"},{name:"past_seqlen",type:"u32"},{name:"new_seqlen",type:"u32"},{name:"present_seqlen",type:"u32"}],W=`      let past_batch_stride = uniforms.past_seqlen * num_heads * H;
        var past_head_stride = uniforms.past_seqlen * H;
        if (is_bsnh) {
          past_head_stride = H;
        }
        let in_offset = b * past_batch_stride + s * row_stride + n * past_head_stride + h;
        present_kv[out_offset] = past_kv[in_offset];`,F=`      let new_batch_stride = uniforms.new_seqlen * num_heads * H;
        let new_row_stride = num_heads * H;
        let new_head_stride = H;
        let in_offset = b * new_batch_stride + (s - past_seqlen) * new_row_stride + n * new_head_stride + h;
        present_kv[out_offset] = new_kv[in_offset];`,ee=t?`if (s < past_seqlen) {
        ${W}
        } else if (s < past_seqlen + uniforms.new_seqlen) {
        ${F}
        }`:`if (s < past_seqlen + uniforms.new_seqlen) {
          ${F}
        }`,te=he=>`

  ${he.registerUniforms(q).declareVariables(...v,d)}
  ${he.mainStart([l,n.kvNumHeads,1])}
    ${he.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    var indices = ${d.offsetToIndices("global_idx")};
    let h = local_id.x;
    let n = local_id.y;
    let s = workgroup_id.x;
    let b = workgroup_id.y;
    let num_heads = ${n.kvNumHeads}u;
    let H = ${l}u;

    let present_seqlen = uniforms.present_seqlen;
    let present_batch_stride = present_seqlen * num_heads * H;
    var row_stride = H;
    let is_bsnh = ${n.isPastkvBSNH};

    if (is_bsnh) {
      row_stride = num_heads * H;
    }
    var present_head_stride = present_seqlen * H;
    if (is_bsnh) {
      present_head_stride = H;
    }

    let past_seqlen = uniforms.past_seqlen;

    let out_offset = b * present_batch_stride + s * row_stride + n * present_head_stride + h;
    ${ee}
  }`;return{name:"ConcatPastNew",shaderCache:{hint:`${n.kvNumHeads}${l}${!!t}`,inputDependencies:M},getRunData:()=>({outputs:[{dims:s,dataType:r}],dispatchGroup:b,programUniforms:S}),getShaderSource:te}},Du=e=>Wt({...e}),Bu=Wt({perm:[0,2,1,3]}),Da=(e,t,r,n,s)=>{let i=t,a=n.kvNumHeads,u=n.nReps;return t.dims.length===3&&n.kvSequenceLength!==0&&(i=t.reshape([n.batchSize,n.kvSequenceLength,a,n.headSize])),r?i=e.compute(za(i,r,i.dataType,n),{inputs:[i,r],outputs:[n.isPastkvBSNH?s:-1]})[0]:i=e.compute(za(i,void 0,i.dataType,n),{inputs:[i],outputs:[n.isPastkvBSNH?s:-1]})[0],u!==1&&(i=e.compute(Oa([i],[1,1,1,u]),{inputs:[i],outputs:[-1]})[0],i=i.reshape([n.batchSize,n.totalSequenceLength,a*u,n.headSize])),e.compute(Fn(i,Bu.perm),{inputs:[i],outputs:[-1]})[0]},Lu=(e,t)=>{let r=zu(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let n=Ds(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],void 0,0),s=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,i=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,a=Da(e,e.inputs[1],s,r,1),u=Da(e,e.inputs[2],i,r,2);$s(e,n,a,u,void 0,void 0,void 0,void 0,void 0,r,t)}}),zd,Ba,Ru,Nu,Dd=N(()=>{Kt(),Xt(),sr(),zd=(e,t)=>{let r=e[0].dims,n=r,s=2,i=Fe.sizeToDimension(r,s),a=Fe.sizeFromDimension(r,s),u=wr(a),d=a/u,p=[r[0],r[1],d],g=["rank","type","type"],l=[{type:12,data:a},{type:12,data:d}];l.push(...At(p,p));let b=M=>{let S=Ze("x",e[0].dataType,p.length,u),v=Ze("scale",e[1].dataType,e[1].dims),q=Ze("bias",e[2].dataType,e[2].dims),W=jt("output",e[0].dataType,p.length,u),F=[S,v,q,W],ee=S.type.value,te=u===1?"f32":`vec${u}<f32>`,he=64,Ne=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${te}, ${he}>;
  const workgroupSize = ${he}u;
  ${M.registerUniforms(Ne).declareVariables(...F)}
  ${M.mainStart(he)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${te}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${te}(${S.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${Mn("workgroupShared[0]",u)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${te}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${te}(${S.get("batch","channel","h")}) - ${te}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${Mn("workgroupShared[0]",u)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${v.getByOffset("channel")});
    let channelShift = f32(${q.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${S.get("batch","channel","h")} * ${ee}(${te}(channelScale)) + ${ee}(${te}(channelShift));
      ${W.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${u}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:i},programUniforms:l}),getShaderSource:b}},Ba=(e,t,r,n,s,i,a,u)=>{let d=wr(a),p=64,g=d===1?"vec2f":`mat2x${d}f`,l=d===1?"f32":`vec${d}f`,b=(Ne,Ve)=>`${g}(${Ne}, ${Ve})`,M=s*a/d,S=Math.ceil(i/p),v=["type"],q=[{type:12,data:S},{type:12,data:i},{type:12,data:Math.floor(a/d)},{type:12,data:Math.floor(i*a/d)}],W=Ne=>{let Ve=Ze("input",t.dataType,t.dims,d);return`
  ${Ne.declareVariables(Ve)}
  @group(0) @binding(1) var<storage, read_write> output : array<${g}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${Ne.mainStart(p)}
    let currentImageNumber = global_idx / ${p} / uniforms.C;
    let currentChannelNumber = (global_idx / ${p}) % uniforms.C;
    let wgOffset = local_id.x * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${Br("f32",d)};
    var squaredSum = ${Br("f32",d)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${l}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${b("sum","squaredSum")};
  }`},F=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${d}`,inputDependencies:v},getRunData:()=>({outputs:[{dims:[s,a,p,2],dataType:1}],dispatchGroup:{x:s*a/d},programUniforms:q}),getShaderSource:W},{inputs:[t],outputs:[-1]})[0],ee=[{type:12,data:M},{type:12,data:i},{type:12,data:Math.floor(a/d)},{type:12,data:Math.floor(p*a/d)}],te=["type","type","type"],he=Ne=>{let Ve=Ze("scale",r.dataType,r.dims,d),bt=Ze("bias",n.dataType,n.dims,d);return`
  @group(0) @binding(0) var<storage, read> input : array<${g}>;
  @group(0) @binding(1) var<storage, read> scale : array<${Ve.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${bt.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${g}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${Ne.mainStart()}
    ${Ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${Br("f32",d)};
    var squaredSum = ${Br("f32",d)};
    for (var i: u32 = 0; i < min(${p}, uniforms.H); i++) {
        let value = input[offset + i + currentChannelNumber * ${p}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${u}));
    let channelScale = invStdDev * ${l}(scale[currentChannelNumber]);
    let channelShift = ${l}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${b("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${d};${u}`,inputDependencies:te},getRunData:()=>({outputs:[{dims:[s,a,2],dataType:1}],dispatchGroup:{x:Math.ceil(M/64)},programUniforms:ee}),getShaderSource:he},{inputs:[F,r,n],outputs:[-1]})[0]},Ru=(e,t,r)=>{let n=t[0].dims,s=n,i=n[0],a=n[n.length-1],u=Fe.sizeFromDimension(n,1)/a,d=wr(a),p=Fe.size(s)/d,g=[{type:12,data:u},{type:12,data:Math.floor(a/d)}],l=["type","type"],b=Ba(e,t[0],t[1],t[2],i,u,a,r.epsilon),M=S=>{let v=kr(t[0].dataType),q=d===1?"vec2f":`mat2x${d}f`,W=d===1?v:`vec${d}<${v}>`,F=Ze("input",t[0].dataType,t[0].dims,d),ee=jt("output",t[0].dataType,s,d);return`
  @group(0) @binding(0) var<storage, read> input : array<${F.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${q}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${ee.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${S.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${W}(scale[0]), ${W}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${d}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:g}),getShaderSource:M},{inputs:[t[0],b]})},Nu=(e,t)=>{t.format==="NHWC"?Ru(e,e.inputs,t):e.compute(zd(e.inputs,t))}}),Vu,ju,Uu,Bd=N(()=>{Kt(),Xt(),sr(),Vu=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},ju=(e,t,r)=>{let n=t.simplified,s=e[0].dims,i=e[1],a=!n&&e[2],u=s,d=Fe.normalizeAxis(t.axis,s.length),p=Fe.sizeToDimension(s,d),g=Fe.sizeFromDimension(s,d),l=Fe.size(i.dims),b=a?Fe.size(a.dims):0;if(l!==g||a&&b!==g)throw new Error(`Size of X.shape()[axis:] == ${g}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${l} and bias size of ${b}`);let M=[];for(let he=0;he<s.length;++he)he<d?M.push(s[he]):M.push(1);let S=wr(g),v=["type","type"],q=[{type:12,data:p},{type:1,data:g},{type:12,data:Math.floor(g/S)},{type:1,data:t.epsilon}];a&&v.push("type");let W=r>1,F=r>2,ee=he=>{let Ne=kr(e[0].dataType),Ve=[Ze("x",e[0].dataType,e[0].dims,S),Ze("scale",i.dataType,i.dims,S)];a&&Ve.push(Ze("bias",a.dataType,a.dims,S)),Ve.push(jt("output",e[0].dataType,u,S)),W&&Ve.push(jt("mean_data_output",1,M)),F&&Ve.push(jt("inv_std_output",1,M));let bt=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${he.registerUniforms(bt).declareVariables(...Ve)}
  ${he.mainStart()}
    ${he.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Br("f32",S)};
    var mean_square_vector = ${Br("f32",S)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${Hr(Ne,S,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Mn("mean_vector",S)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Mn("mean_square_vector",S)} / uniforms.norm_size ${n?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${Hr(Ne,S,"x[j + offset]")};
      let f32scale = ${Hr(Ne,S,"scale[j]")};
      output[j + offset] = ${Ve[0].type.value}((f32input ${n?"":"- mean"}) * inv_std_dev * f32scale
        ${a?`+ ${Hr(Ne,S,"bias[j]")}`:""}
      );
    }

    ${W?"mean_data_output[global_idx] = mean":""};
    ${F?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},te=[{dims:u,dataType:e[0].dataType}];return W&&te.push({dims:M,dataType:1}),F&&te.push({dims:M,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${S};${r};${n}`,inputDependencies:v},getRunData:()=>({outputs:te,dispatchGroup:{x:Math.ceil(p/64)},programUniforms:q}),getShaderSource:ee}},Uu=(e,t)=>{Vu(e.inputs),e.compute(ju(e.inputs,t,e.outputCount))}}),Wu,Gu,qu,Hu,Ld=N(()=>{Kt(),Xt(),pr(),sr(),Wu=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],n=r.dims.length;if(r.dims[n-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let s=Math.floor((t.k+t.blockSize-1)/t.blockSize),i=t.blockSize/8*t.bits,a=e[1];if(!Fe.areEqual(a.dims,[t.n,s,i]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let u=e[2].dims;if(Fe.size(u)!==t.n*s)throw new Error("scales input size error.");if(e.length===4){let d=e[3].dims,p=t.bits>4?t.n*s:t.n*Math.floor((s+1)/2);if(Fe.size(d)!==p)throw new Error("zeroPoints input size error.")}},Gu=(e,t)=>{let r=e[0].dims,n=r.length,s=r[n-2],i=t.k,a=t.n,u=r.slice(0,n-2),d=Fe.size(u),p=e[1].dims[2]/4,g=e[0].dataType,l=wr(t.k),b=wr(p),M=wr(a),S=u.concat([s,a]),v=s>1&&a/M%2===0?2:1,q=Fe.size(S)/M/v,W=64,F=[],ee=[d,s,i/l],te=Fe.convertShape(e[1].dims).slice();te.splice(-1,1,p/b),F.push(...At(ee)),F.push(...At(te)),F.push(...At(e[2].dims)),e.length===4&&F.push(...At(Fe.convertShape(e[3].dims)));let he=[d,s,a/M];F.push(...At(he));let Ne=Ve=>{let bt=ee.length,Vt=Ze("a",e[0].dataType,bt,l),Rt=Ze("b",12,te.length,b),lr=Ze("scales",e[2].dataType,e[2].dims.length),ar=[Vt,Rt,lr],_r=e.length===4?Ze("zero_points",12,e[3].dims.length):void 0;_r&&ar.push(_r);let Fr=he.length,fr=jt("output",e[0].dataType,Fr,M),Zt=kr(e[0].dataType),Or=(()=>{switch(l){case 1:return`array<${Zt}, 8>`;case 2:return`mat4x2<${Zt}>`;case 4:return`mat2x4<${Zt}>`;default:throw new Error(`${l}-component is not supported.`)}})(),Nr=()=>{let Xe=`
          // reuse a data
            var input_offset = ${Vt.indicesToOffset(`${Vt.type.indices}(batch, row, word_offset)`)};
            var a_data: ${Or};
            for (var j: u32 = 0; j < ${8/l}; j++) {
              a_data[j] = ${Vt.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let Ct=0;Ct<M*v;Ct++)Xe+=`
            b_value = ${b===1?`b${Ct}_data`:`b${Ct}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${Or}(${Array.from({length:4},(ur,Kr)=>`${Zt}(b_value_lower[${Kr}]), ${Zt}(b_value_upper[${Kr}])`).join(", ")});
            b_dequantized_values = ${l===1?`${Or}(${Array.from({length:8},(ur,Kr)=>`(b_quantized_values[${Kr}] - ${_r?`zero_point${Ct}`:"zero_point"}) * scale${Ct}`).join(", ")});`:`(b_quantized_values - ${Or}(${Array(8).fill(`${_r?`zero_point${Ct}`:"zero_point"}`).join(",")})) * scale${Ct};`};
            workgroup_shared[local_id.x * ${v} + ${Math.floor(Ct/M)}]${M>1?`[${Ct%M}]`:""} += ${Array.from({length:8/l},(ur,Kr)=>`${l===1?`a_data[${Kr}] * b_dequantized_values[${Kr}]`:`dot(a_data[${Kr}], b_dequantized_values[${Kr}])`}`).join(" + ")};
          `;return Xe},er=()=>{let Xe=`
            var col_index = col * ${M};
            ${_r?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${Zt}(8);`}
            `;for(let Ct=0;Ct<M*v;Ct++)Xe+=`
            let scale${Ct} = ${lr.getByOffset("col_index * nBlocksPerCol + block")};
            ${_r?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${_r.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${Ct} = ${Zt}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return Xe},gr=()=>{let Xe=`col_index = col * ${M};`;for(let Ct=0;Ct<M*v;Ct++)Xe+=`
            let b${Ct}_data = ${Rt.getByIndices(`${Rt.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return Xe+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${Or};
            var b_dequantized_values: ${Or};`,Xe};return`
        var<workgroup> workgroup_shared: array<${fr.type.value}, ${v*W}>;
        ${Ve.declareVariables(...ar,fr)}
        ${Ve.mainStart([W,1,1])}
          let output_indices = ${fr.offsetToIndices(`(global_idx / ${W}) * ${v}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${W}) {
            //process one block
            var word_offset: u32 = block * ${t.blockSize/l};
            ${er()}
            for (var word: u32 = 0; word < ${p}; word += ${b}) {
              ${gr()}
              for (var i: u32 = 0; i < ${b}; i++) {
                ${Nr()}
                word_offset += ${8/l};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${v}) {
            var output_value: ${fr.type.value} = ${fr.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${W}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${v};
            }
            ${fr.setByIndices(`${fr.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${t.blockSize};${t.bits};${l};${b};${M};${v};${W}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:S,dataType:g}],dispatchGroup:{x:q},programUniforms:F}),getShaderSource:Ne}},qu=(e,t)=>{Wu(e.inputs,t),e.compute(Gu(e.inputs,t))},Hu=e=>Wt(e)}),Ku,Xu,Qu,Yu,Zu,Ju,ed,td,rd,Rd=N(()=>{Kt(),Xt(),sr(),Ku=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Xu=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
            k = i32(${e.indicesGet("indices",s)}) - ${Nt("uniforms.pads",s,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${Nt("uniforms.x_shape",s,t)})) {
              break;
            }
            offset += k * i32(${Nt("uniforms.x_strides",s,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},Qu=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Nt("uniforms.pads",s,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${Nt("uniforms.x_shape",s,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${Nt("uniforms.x_shape",s,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${Nt("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Yu=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Nt("uniforms.pads",s,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${Nt("uniforms.x_shape",s,t)})) {
                  k = i32(${Nt("uniforms.x_shape",s,t)}) - 1;
                }
                offset += k * i32(${Nt("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Zu=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Nt("uniforms.pads",s,r)};
                if (k < 0)  {
                  k += i32(${Nt("uniforms.x_shape",s,t)}]);
                }
                if (k >= i32(${Nt("uniforms.x_shape",s,t)})) {
                  k -= i32(${Nt("uniforms.x_shape",s,t)});
                }
                offset += k * i32(${Nt("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Ju=(e,t,r)=>{switch(r.mode){case 0:return Xu(e,t,r.pads.length);case 1:return Qu(e,t,r.pads.length);case 2:return Yu(e,t,r.pads.length);case 3:return Zu(e,t,r.pads.length);default:throw new Error("Invalid mode")}},ed=(e,t)=>{let r=Fe.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,s=Fe.size(r),i=[{type:12,data:s},{type:6,data:t.pads}],a=e.length>=3&&e[2].data;t.mode===0&&i.push({type:a?e[2].dataType:1,data:t.value}),i.push(...At(e[0].dims,r));let u=["rank"],d=p=>{let g=jt("output",e[0].dataType,r.length),l=Ze("x",e[0].dataType,n.length),b=l.type.value,M=Ju(g,n.length,t),S=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&S.push({name:"constant_value",type:a?b:"f32"}),`
            ${p.registerUniforms(S).declareVariables(l,g)}
            ${p.mainStart()}
            ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${g.offsetToIndices("global_idx")};

            var value = ${b}(0);
            ${M}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}${a}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Fe.size(r)/64)},programUniforms:i}),getShaderSource:d}},td=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,s=e[0].dims.length,i=new Int32Array(2*s).fill(0);if(e.length>=4){let u=e[3].getBigInt64Array();for(let d=0;d<u.length;d++)i[Number(u[d])]=Number(r[d]),i[Number(u[d])+s]=Number(r[d+u.length])}else r.forEach((u,d)=>i[Number(d)]=Number(u));let a=[];return i.forEach(u=>a.push(u)),{mode:t.mode,value:n,pads:a}}else return t},rd=(e,t)=>{Ku(e.inputs);let r=td(e.inputs,t);e.compute(ed(e.inputs,r),{inputs:[0]})}}),Bs,La,Ra,Na,Va,Nd,ir,ja,tn,on,dn,Yn,Vd,nd,Ua,f,m,E,K,Be=N(()=>{Bt(),Kt(),Xt(),sr(),Bs=e=>{if(k.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},La=(e,t,r)=>{let n=t.format==="NHWC",s=e.dims.slice();n&&s.splice(1,0,s.pop());let i=Object.hasOwnProperty.call(t,"dilations"),a=t.kernelShape.slice(),u=t.strides.slice(),d=i?t.dilations.slice():[],p=t.pads.slice();Tn.adjustPoolAttributes(r,s,a,u,d,p);let g=Tn.computePoolOutputShape(r,s,u,d,a,p,t.autoPad),l=Object.assign({},t);i?Object.assign(l,{kernelShape:a,strides:u,pads:p,dilations:d,cacheKey:t.cacheKey}):Object.assign(l,{kernelShape:a,strides:u,pads:p,cacheKey:t.cacheKey});let b=g.slice();return b.push(b.splice(1,1)[0]),[l,n?b:g]},Ra=(e,t)=>{let r=t.format==="NHWC",n=Fe.size(e),s=Fe.size(t.kernelShape),i=[{type:12,data:n},{type:12,data:s}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let u=t.kernelShape[t.kernelShape.length-1],d=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],g=t.pads[t.pads.length-1],l=!!(p+g);i.push({type:12,data:u},{type:12,data:d},{type:12,data:p},{type:12,data:g}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let b=!1;if(t.kernelShape.length===2){let M=t.kernelShape[t.kernelShape.length-2],S=t.strides[t.strides.length-2],v=t.pads[t.pads.length/2-2],q=t.pads[t.pads.length-2];b=!!(v+q),i.push({type:12,data:M},{type:12,data:S},{type:12,data:v},{type:12,data:q}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[i,a,!0,l,b]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let u=Fe.computeStrides(t.kernelShape);i.push({type:12,data:u},{type:12,data:t.pads},{type:12,data:t.strides}),a.push({name:"kernelStrides",type:"u32",length:u.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let d=t.pads.reduce((p,g)=>p+g);return[i,a,!!d,!1,!1]}},Na=(e,t,r,n,s,i,a,u,d,p,g,l)=>{let b=s.format==="NHWC",M=t.type.value,S=jt("output",t.type.tensor,n);if(s.kernelShape.length<=2){let v="",q="",W="",F=r-(b?2:1);if(g?v=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${F}] = indices[${F}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${F}] < 0 || xIndices[${F}]
                      >= uniforms.x_shape[${F}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${i}
                }`:v=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${F}] = indices[${F}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${i}
                }`,s.kernelShape.length===2){let ee=r-(b?3:2);l?q=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${ee}] = indices[${ee}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${ee}] < 0 || xIndices[${ee}] >= uniforms.x_shape[${ee}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:q=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${ee}] = indices[${ee}] * uniforms.sh - uniforms.phStart + j;
                `,W=`
              }
            `}return`
            ${e.registerUniforms(d).declareVariables(t,S)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${S.offsetToIndices("global_idx")};
              var xIndices = ${S.offsetToIndices("global_idx")};

              var value = ${M}(${u});
              var pad = 0;
              ${q}
              ${v}
              ${W}
              ${a}

              output[global_idx] = value;
            }`}else{if(b)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let v=s.kernelShape.length,q=s.pads.length,W="";return p?W=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${i}
              }`:W=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${i}
            `,`
            ${e.registerUniforms(d).declareVariables(t,S)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${S.offsetToIndices("global_idx")};
              var xIndices = ${S.offsetToIndices("global_idx")};

              var offsets: array<u32, ${v}>;

              var value = ${M}(${u});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${v-1}u; j++) {
                  offsets[j] = offset / ${Nt("uniforms.kernelStrides","j",v)};
                  offset -= offsets[j] * ${Nt("uniforms.kernelStrides","j",v)};
                }
                offsets[${v-1}] = offset;

                isPad = false;
                for (var j = ${r-v}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${Nt("uniforms.strides",`j - ${r-v}u`,v)}
                    + offsets[j - ${r-v}u] - ${Nt("uniforms.pads","j - 2u",q)};
                  ${W}
              }
              ${a}

              output[global_idx] = value;
            }`}},Va=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Nd=e=>`${Va(e)};${e.countIncludePad}`,ir=e=>`${Va(e)};${e.storageOrder};${e.dilations}`,ja=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),tn=(e,t,r,n)=>{let[s,i]=La(t,n,r),a=Ze("x",t.dataType,t.dims.length),u=a.type.value,d="value += x_val;",p="";s.countIncludePad?p+=`value /= ${u}(uniforms.kernelSize);`:p+=`value /= ${u}(i32(uniforms.kernelSize) - pad);`;let[g,l,b,M,S]=Ra(i,s);g.push(...At(t.dims,i));let v=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${b};${M};${S}`,inputDependencies:v},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Fe.size(i)/64)},programUniforms:g}),getShaderSource:q=>Na(q,a,t.dims.length,i.length,s,d,p,0,l,b,M,S)}},on=e=>{let t=e.count_include_pad!==0,r=ja(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...r,cacheKey:""};return{...n,cacheKey:Nd(n)}},dn=(e,t)=>{Bs(e.inputs),e.compute(tn("AveragePool",e.inputs[0],!1,t))},Yn={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Vd=e=>{let t=e.format;return{format:t,...Yn,cacheKey:t}},nd=(e,t)=>{Bs(e.inputs),e.compute(tn("GlobalAveragePool",e.inputs[0],!0,t))},Ua=(e,t,r,n)=>{let[s,i]=La(t,n,r),a=`
      value = max(x_val, value);
    `,u="",d=Ze("x",t.dataType,t.dims.length),p=["rank"],[g,l,b,M,S]=Ra(i,s);return g.push(...At(t.dims,i)),{name:e,shaderCache:{hint:`${n.cacheKey};${b};${M};${S}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Fe.size(i)/64)},programUniforms:g}),getShaderSource:v=>Na(v,d,t.dims.length,i.length,s,a,u,t.dataType===10?-65504:-1e5,l,b,M,S)}},f=(e,t)=>{Bs(e.inputs),e.compute(Ua("MaxPool",e.inputs[0],!1,t))},m=e=>{let t=e.storage_order,r=e.dilations,n=ja(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let s={storageOrder:t,dilations:r,...n,cacheKey:""};return{...s,cacheKey:ir(s)}},E=e=>{let t=e.format;return{format:t,...Yn,cacheKey:t}},K=(e,t)=>{Bs(e.inputs),e.compute(Ua("GlobalMaxPool",e.inputs[0],!0,t))}}),Le,ut,kt,Gt,or=N(()=>{Kt(),Xt(),pr(),sr(),Le=(e,t)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((r,n)=>r===e[2].dims[n]).reduce((r,n)=>r&&n,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(t.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((s,i)=>i===t.axis||s===e[0].dims[i]).reduce((s,i)=>s&&i,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let r=e[0].dims[t.axis],n=e[1].dims[t.axis];if(t.blockSize<Math.ceil(r/n)||t.blockSize>Math.ceil(r/(n-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},ut=(e,t)=>{let r=Fe.normalizeAxis(t.axis,e[0].dims.length),n=e[0].dataType,s=n===3,i=e[0].dims,a=e[1].dataType,u=Fe.size(i),d=n===3||n===2,p=d?[Math.ceil(Fe.size(e[0].dims)/4)]:e[0].dims,g=e[1].dims,l=e.length>2?e[2]:void 0,b=l?d?[Math.ceil(Fe.size(l.dims)/4)]:l.dims:void 0,M=g.length===0||g.length===1&&g[0]===1,S=M===!1&&g.length===1,v=wr(u),q=M&&(!d||v===4),W=q?v:1,F=q&&!d?v:1,ee=Ze("input",d?12:n,p.length,F),te=Ze("scale",a,g.length),he=l?Ze("zero_point",d?12:n,b.length):void 0,Ne=jt("output",a,i.length,W),Ve=[ee,te];he&&Ve.push(he);let bt=[p,g];l&&bt.push(b);let Vt=[{type:12,data:u/W},{type:12,data:r},{type:12,data:t.blockSize},...At(...bt,i)],Rt=lr=>{let ar=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${lr.registerUniforms(ar).declareVariables(...Ve,Ne)}
      ${lr.mainStart()}
          ${lr.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${Ne.offsetToIndices("global_idx")};

          // Set input x
          ${d?`
            let input = ${ee.getByOffset("global_idx / 4")};
            let x_vec = ${s?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${W===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${ee.getByOffset("global_idx")};`};

          // Set scale input
          ${M?`let scale_value= ${te.getByOffset("0")}`:S?`
            let scale_index = ${Ne.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${te.getByOffset("scale_index")};`:`
            var scale_indices: ${te.type.indices} = output_indices;
            let index = ${te.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${te.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${te.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${he?M?d?`
                let zero_point_input = ${he.getByOffset("0")};
                let zero_point_vec =  ${s?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${he.getByOffset("0")}`:S?d?`
                let zero_point_index = ${Ne.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${he.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${s?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${Ne.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${he.getByOffset("zero_point_index")};`:d?`
                let zero_point_offset = ${te.indicesToOffset("scale_indices")};
                let zero_point_input = ${he.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${s?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${he.getByIndices("scale_indices")};`:`let zero_point_value = ${d?s?"i32":"u32":ee.type.value}(0);`};
      // Compute and write output
      ${Ne.setByOffset("global_idx",`${Ne.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:t.cacheKey,inputDependencies:he?["rank","rank","rank"]:["rank","rank"]},getShaderSource:Rt,getRunData:()=>({outputs:[{dims:i,dataType:a}],dispatchGroup:{x:Math.ceil(u/W/64),y:1,z:1},programUniforms:Vt})}},kt=(e,t)=>{Le(e.inputs,t),e.compute(ut(e.inputs,t))},Gt=e=>Wt({axis:e.axis,blockSize:e.blockSize})}),hr,zr,dr,yr=N(()=>{Bt(),Kt(),sr(),hr=(e,t,r)=>{let n=e===t,s=e<t&&r<0,i=e>t&&r>0;if(n||s||i)throw new Error("Range these inputs' contents are invalid.")},zr=(e,t,r,n)=>{let s=Math.abs(Math.ceil((t-e)/r)),i=[s],a=s,u=[{type:12,data:a},{type:n,data:e},{type:n,data:r},...At(i)],d=p=>{let g=jt("output",n,i.length),l=g.type.value,b=[{name:"outputSize",type:"u32"},{name:"start",type:l},{name:"delta",type:l}];return`
        ${p.registerUniforms(b).declareVariables(g)}
        ${p.mainStart()}
        ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${l}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:d,getRunData:()=>({outputs:[{dims:i,dataType:n}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:u})}},dr=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),k.webgpu.validateInputContent&&hr(t,r,n),e.compute(zr(t,r,n,e.inputs[0].dataType),{inputs:[]})}}),cr,mr,br,Vr,mn,_n,Nn,hn,rn,cn,Wa,Ls,Ga,dc,On,_s,jd,Ud,Wd,Gd=N(()=>{Kt(),Xt(),pr(),sr(),cr=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},mr=(e,t,r)=>{t.every(s=>s>=0&&s<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return t.forEach((s,i)=>n[s]=e[i]),n},br=(e,t,r,n,s,i)=>{let[a,u,d]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(g=>i.push(g));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(u>0&&e.length>u&&e[u].dims.length>0){if(e[u].getFloat32Array().forEach(g=>n.push(g)),n.length!==0&&n.length!==p&&r>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");cr(n,t),t.axes.length>0&&mr(n,t.axes,p).forEach((g,l)=>n[l]=g)}if(d>0&&e.length>d&&(e[d].getBigInt64Array().forEach(g=>s.push(Number(g))),s.length!==p||r>=18&&s.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(s.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof s<"u"&&n.length>0&&s.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},Vr=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",mn=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",_n=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),s=e.length===0?n:e.slice();return t.length>0?(t.forEach((i,a)=>{n[i]=s[a],n[a+r]=s[t.length+a]}),n):s},Nn=(e,t,r,n)=>{let s=[];if(r.length>0)if(n.length>0){if(e.forEach(i=>s.push(i)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((i,a)=>s[i]=r[a])}else r.forEach(i=>s.push(i));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");s=e.map((i,a)=>Math.round(i*t[a]))}return s},hn=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(i=>t[i]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(i=>t[i]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let s=e.slice();return r.axes.length>0?(r.axes.forEach(i=>t[i]=n),r.axes.forEach(i=>s[i]=Math.round(e[i]*t[i]))):(t.fill(n,0,t.length),s.forEach((i,a)=>s[a]=Math.round(i*t[a]))),s},rn=(e,t,r,n,s)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${Nt("uniforms.scales","i",n)};
        var roi_low = ${Nt("uniforms.roi","i",s)};
        var roi_hi = ${Nt("uniforms.roi",`i + ${t.length}`,s)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${Nt("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${Nt("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,cn=(e,t,r,n,s,i,a)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${Nt("uniforms.scales","i",s)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${Nt("uniforms.roi","i",i)};
          var roi_hi = ${Nt("uniforms.roi",`i + ${r.length}`,i)};
          var input_shape_i = ${Nt("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${Nt("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,Wa=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${Nt("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Ls=(e,t,r,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",Ga=(e,t,r,n,s)=>{let[i,a,u,d]=r.length===2?[-1,0,1,-1]:[0,2,3,1],p=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${p} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(row, ${r[a]} - 1))`)};
      ${e.indicesSet("input_indices",u,`max(0, min(col, ${r[u]} - 1))`)};
      ${Ls(e,d,i,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${p} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${p} = originalIndices[${a}];
      var col:${p} = originalIndices[${u}];
      ${n?`if (row < 0 || row > (${r[a]} - 1) || col < 0 || col > (${r[u]} - 1)) {
        return ${s};
      }`:""};
      row = max(0, min(row, ${r[a]} - 1));
      col = max(0, min(col, ${r[u]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${d}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${i}])`:"0"};
      var x11: ${p} = getInputValue(batch, channel, row1, col1);
      var x12: ${p} = getInputValue(batch, channel, row1, col2);
      var x21: ${p} = getInputValue(batch, channel, row2, col1);
      var x22: ${p} = getInputValue(batch, channel, row2, col2);
      var dx1: ${p} = abs(row - ${p}(row1));
      var dx2: ${p} = abs(${p}(row2) - row);
      var dy1: ${p} = abs(col - ${p}(col1));
      var dy2: ${p} = abs(${p}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},dc=(e,t,r,n,s,i,a,u,d,p)=>{let g=r.length===2,[l,b]=g?[0,1]:[2,3],M=e.type.value,S=v=>{let q=v===l?"row":"col";return`
      fn ${q}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${M} {
        var output_index = ${t.indicesGet("output_indices",v)};
        var originalIdx: ${M} = getOriginalCoordinateFromResizedCoordinate(output_index, ${s[v]},
        ${n[v]}, ${r[v]}, ${i[v]}, ${i[v]} + ${r.length});
        var fractOriginalIdx: ${M} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${u} && (originalIdx < 0 || originalIdx > (${r[v]} - 1))) {
          return ${d};
        }
        var data: array<${M}, 4> = array<${M}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${q}: ${M} = originalIdx + ${M}(i);
          if (${q} < 0 || ${q} >= ${r[v]}) {
            ${p?`coefs[i + 1] = 0.0;
                        continue;`:u?`return ${d};`:`${q} = max(0, min(${q}, ${r[v]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",v,`u32(${q})`)};
          data[i + 1] = ${v===l?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${S(l)};
    ${S(b)};
  fn getCubicInterpolationCoefs(s: ${M}) -> array<${M}, 4> {
    var absS = abs(s);
    var coeffs: array<${M}, 4> = array<${M}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${M} = 1.0 - absS;
    var twoMinusAbsS: ${M} = 2.0 - absS;
    var onePlusAbsS: ${M} = 1.0 + absS;
    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};
    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;
    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${M}, 4>, coefs: array<${M}, 4>) -> ${M} {
    var coefsSum: ${M} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${M} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},On=(e,t,r,n,s)=>{let[i,a,u,d,p]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],g=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${g} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(depth, ${r[a]} - 1))`)};
      ${e.indicesSet("input_indices",u,`max(0, min(height, ${r[u]} - 1))`)};
      ${e.indicesSet("input_indices",d,`max(0, min(width, ${r[d]} - 1))`)};
      ${Ls(e,p,i,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${g} = originalIndices[${a}];
      var height:${g} = originalIndices[${u}];
      var width:${g} = originalIndices[${d}];
      ${n?`if (depth < 0 || depth > (${r[a]} - 1) || height < 0 || height > (${r[u]} - 1) || width < 0 || (width > ${r[d]} - 1)) {
      return ${s};
        }`:""};

    depth = max(0, min(depth, ${r[a]} - 1));
      height = max(0, min(height, ${r[u]} - 1));
      width = max(0, min(width, ${r[d]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${p}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${i}])`:"0"};

      var x111: ${g} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${g} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${g} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${g} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${g} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${g} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${g} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${g} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${g} = abs(depth - ${g}(depth1));
      var dx2: ${g} = abs(${g}(depth2) - depth);
      var dy1: ${g} = abs(height - ${g}(height1));
      var dy2: ${g} = abs(${g}(height2) - height);
      var dz1: ${g} = abs(width - ${g}(width1));
      var dz2: ${g} = abs(${g}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},_s=(e,t,r,n,s,i)=>{let a=e.dims,u=_n(i,t.axes,a.length),d=Nn(a,n,s,t.axes),p=n.slice();n.length===0&&(p=a.map((F,ee)=>F===0?1:d[ee]/F),t.keepAspectRatioPolicy!=="stretch"&&(d=hn(a,p,t)));let g=jt("output",e.dataType,d.length),l=Ze("input",e.dataType,a.length),b=Fe.size(d),M=a.length===d.length&&a.every((F,ee)=>F===d[ee]),S=t.coordinateTransformMode==="tf_crop_and_resize",v=t.extrapolationValue,q=l.type.value,W=F=>`
      ${M?"":`
      ${Vr(t.coordinateTransformMode,q)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${Wa(l,a)};
              ${mn(t.nearestMode,r,q)};
              ${cn(l,g,a,d,p.length,u.length,S)};
              `;case"linear":return`
              ${rn(g,a,d,p.length,u.length)};
              ${(()=>{if(a.length===2||a.length===4)return`${Ga(l,g,a,S,v)}`;if(a.length===3||a.length===5)return`${On(l,g,a,S,v)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(a.length===2||a.length===4)return`${dc(l,g,a,d,p,u,t.cubicCoeffA,S,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${F.registerUniform("output_size","u32").registerUniform("scales","f32",p.length).registerUniform("roi","f32",u.length).declareVariables(l,g)}
      ${F.mainStart()}
        ${F.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${M?"output[global_idx] = input[global_idx];":`
        let output_indices = ${g.offsetToIndices("global_idx")};
        var input_indices: ${l.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${l.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${s.length>0?s:""}|${u.length>0?u:""}|${M}|${a}`,inputDependencies:["rank"]},getShaderSource:W,getRunData:()=>({outputs:[{dims:d,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:12,data:b},{type:1,data:p},{type:1,data:u},...At(a,d)]})}},jd=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Ud=(e,t)=>{let r=[],n=[],s=[],i=jd(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");br(e.inputs,t,i,r,n,s),e.compute(_s(e.inputs[0],t,i,r,n,s),{inputs:[0]})},Wd=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,s=e.cubicCoeffA,i=e.excludeOutside!==0,a=e.extrapolationValue,u=e.keepAspectRatioPolicy,d=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return Wt({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:s,excludeOutside:i,extrapolationValue:a,keepAspectRatioPolicy:u,mode:d,nearestMode:p})}}),Kc,Xc,Qc,wf=N(()=>{Kt(),Xt(),pr(),sr(),Kc=(e,t)=>{let[r,n,s,i]=e,{numHeads:a,rotaryEmbeddingDim:u}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!Fe.areEqual(n.dims,[])&&!Fe.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(s.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(i.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(!Fe.areEqual(s.dims,i.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(u>0&&a===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let d=r.dims[0],p=r.dims[r.dims.length-2],g=s.dims[0],l=Fe.sizeFromDimension(r.dims,1)/p,b=u===0?s.dims[1]*2:l/a;if(u>b)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(n.dims.length===2){if(d!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(p!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(b/2!==s.dims[1]&&u/2!==s.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${s.dims[1]}`);if(p>g)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Xc=(e,t)=>{let{interleaved:r,numHeads:n,rotaryEmbeddingDim:s,scale:i}=t,a=e[0].dims[0],u=Fe.sizeFromDimension(e[0].dims,1),d=e[0].dims[e[0].dims.length-2],p=u/d,g=e[2].dims[1],l=s===0?g*2:p/n,b=new Array(a,d,p/l,l-g),M=Fe.computeStrides(b),S=[{type:1,data:i},{type:12,data:b},{type:12,data:M},...e[0].dims.length===3?new Array({type:12,data:[u,p,l,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[u,l,d*l,1]}):[],...At(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],v=q=>{let W=Ze("input",e[0].dataType,e[0].dims.length),F=Ze("position_ids",e[1].dataType,e[1].dims.length),ee=Ze("cos_cache",e[2].dataType,e[2].dims.length),te=Ze("sin_cache",e[3].dataType,e[3].dims.length),he=jt("output",e[0].dataType,e[0].dims.length);return q.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:b.length},{name:"global_strides",type:"u32",length:M.length},{name:"input_output_strides",type:"u32",length:M.length}]),`
        ${q.declareVariables(W,F,ee,te,he)}

        ${q.mainStart(bn)}
          let half_rotary_emb_dim = uniforms.${ee.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${q.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${F.broadcastedIndicesToOffset("bsnh.xy",jt("",F.type.tensor,2))};
            let position_id =
                u32(${F.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});
            let j = i + select(half_rotary_emb_dim, 1, ${r});
            let re = ${W.getByOffset("i")} * ${ee.get("position_id","bsnh[3]")} -
                ${W.getByOffset("j")} * ${te.get("position_id","bsnh[3]")};
            ${he.setByOffset("i","re")}
            let im = ${W.getByOffset("i")} * ${te.get("position_id","bsnh[3]")} +
                ${W.getByOffset("j")} * ${ee.get("position_id","bsnh[3]")};
            ${he.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${he.setByOffset("k",W.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Wt({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:v,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Fe.size(b)/bn)},programUniforms:S})}},Qc=(e,t)=>{Kc(e.inputs,t),e.compute(Xc(e.inputs,t))}}),Yc,Zc,Jc,yf=N(()=>{Kt(),Xt(),sr(),Yc=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let s=t.dims[t.dims.length-1],i=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==s)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==s)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==s)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==s)throw new Error("Bias must have the same hidden size as input")}},Zc=(e,t,r,n)=>{let s=t.simplified,i=e[0].dims,a=Fe.size(i),u=i,d=a,p=i.slice(-1)[0],g=n?i.slice(0,-1).concat(1):[],l=!s&&e.length>3,b=e.length>4,M=n&&r>1,S=n&&r>2,v=r>3,q=64,W=wr(p),F=[{type:12,data:d},{type:12,data:W},{type:12,data:p},{type:1,data:t.epsilon}],ee=he=>{let Ne=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],Ve=[Ze("x",e[0].dataType,e[0].dims,W),Ze("skip",e[1].dataType,e[1].dims,W),Ze("gamma",e[2].dataType,e[2].dims,W)];l&&Ve.push(Ze("beta",e[3].dataType,e[3].dims,W)),b&&Ve.push(Ze("bias",e[4].dataType,e[4].dims,W)),Ve.push(jt("output",e[0].dataType,u,W)),M&&Ve.push(jt("mean_output",1,g)),S&&Ve.push(jt("inv_std_output",1,g)),v&&Ve.push(jt("input_skip_bias_sum",e[0].dataType,u,W));let bt=kr(e[0].dataType),Vt=kr(1,W);return`

      ${he.registerUniforms(Ne).declareVariables(...Ve)}
      var<workgroup> sum_shared : array<${Vt}, ${q}>;
      var<workgroup> sum_squared_shared : array<${Vt}, ${q}>;

      ${he.mainStart([q,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${q};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${q};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${q-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${b?"bias[offset1d + i]":bt+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${v?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${Hr(bt,W,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${q};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Mn("sum",W)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Mn("square_sum",W)} / f32(uniforms.hidden_size) ${s?"":"- mean * mean"} + uniforms.epsilon);
        ${M?"mean_output[global_idx] = mean;":""}
        ${S?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${s?"":`- ${bt}(mean)`}) *
            ${bt}(inv_std_dev) * gamma[offset1d + i]
            ${l?"+ beta[offset1d + i]":""};
        }
      }`},te=[{dims:u,dataType:e[0].dataType}];return r>1&&te.push({dims:g,dataType:1}),r>2&&te.push({dims:g,dataType:1}),r>3&&te.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${W};${M};${S};${v}`,inputDependencies:e.map((he,Ne)=>"type")},getShaderSource:ee,getRunData:()=>({outputs:te,dispatchGroup:{x:Math.ceil(d/p)},programUniforms:F})}},Jc=(e,t)=>{Yc(e.inputs);let r=[0];e.outputCount>1&&r.push(-3),e.outputCount>2&&r.push(-3),e.outputCount>3&&r.push(3),e.compute(Zc(e.inputs,t,e.outputCount,!1),{outputs:r})}}),ep,sd,tp,cc,rp,np,sp,ip,bf=N(()=>{Kt(),Xt(),pr(),sr(),ep=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},sd=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},tp=(e,t)=>{if(e.length>1){let r=sd(e,1),n=sd(e,2),s=sd(e,3);return s.length===0&&(s=[...Array(e[0].dims.length).keys()]),Wt({starts:r,ends:n,axes:s})}else return t},cc=(e,t,r,n,s)=>{let i=e;return e<0&&(i+=r[n[t]]),s[t]<0?Math.max(0,Math.min(i,r[n[t]]-1)):Math.max(0,Math.min(i,r[n[t]]))},rp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${Nt("uniforms.input_shape","i",r.length)};
            let steps_i = ${Nt("uniforms.steps","i",r.length)};
            let signs_i = ${Nt("uniforms.signs","i",r.length)};
            let starts_i = ${Nt("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,np=(e,t)=>{let r=e[0].dims,n=Fe.size(r),s=t.axes.length>0?Fe.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],i=sd(e,4);i.forEach(W=>W!==0||(()=>{throw new Error("step cannot be 0")})),i.length===0&&(i=Array(s.length).fill(1));let a=t.starts.map((W,F)=>cc(W,F,r,s,i)),u=t.ends.map((W,F)=>cc(W,F,r,s,i));if(s.length!==a.length||s.length!==u.length)throw new Error("start, ends and axes should have the same number of elements");if(s.length!==r.length)for(let W=0;W<r.length;++W)s.includes(W)||(a.splice(W,0,0),u.splice(W,0,r[W]),i.splice(W,0,1));let d=i.map(W=>Math.sign(W));i.forEach((W,F,ee)=>{if(W<0){let te=(u[F]-a[F])/W,he=a[F],Ne=he+te*i[F];a[F]=Ne,u[F]=he,ee[F]=-W}});let p=r.slice(0);s.forEach((W,F)=>{p[W]=Math.ceil((u[W]-a[W])/i[W])});let g={dims:p,dataType:e[0].dataType},l=jt("output",e[0].dataType,p.length),b=Ze("input",e[0].dataType,e[0].dims.length),M=Fe.size(p),S=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:d.length},{name:"steps",type:"u32",length:i.length}],v=[{type:12,data:M},{type:12,data:a},{type:6,data:d},{type:12,data:i},...At(e[0].dims,p)],q=W=>`
      ${W.registerUniforms(S).declareVariables(b,l)}
        ${rp(b,l,r)}
        ${W.mainStart()}
          ${W.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${l.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${l.setByOffset("global_idx",b.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${d.length}_${a.length}_${i.length}`,inputDependencies:["rank"]},getShaderSource:q,getRunData:()=>({outputs:[g],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:v})}},sp=(e,t)=>{ep(e.inputs,t);let r=tp(e.inputs,t);e.compute(np(e.inputs,r),{inputs:[0]})},ip=e=>{let t=e.starts,r=e.ends,n=e.axes;return Wt({starts:t,ends:r,axes:n})}}),ap,op,lp,up,Mf=N(()=>{Kt(),Xt(),pr(),sr(),ap=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},op=(e,t)=>{let r=e.dims,n=Fe.size(r),s=64,i=t.axis;if(i<0&&(i=r.length+i),i<r.length-1)throw new Error("softmax only supports last axis for now.");let a=r[i],u=n/a,d=wr(a),p=a/d,g=(q,W)=>W===4?`max(max(${q}.x, ${q}.y), max(${q}.z, ${q}.w))`:W===2?`max(${q}.x, ${q}.y)`:W===3?`max(max(${q}.x, ${q}.y), ${q}.z)`:q,l=Ze("x",e.dataType,e.dims,d),b=jt("result",e.dataType,e.dims,d),M=l.type.value,S=kr(e.dataType)==="f32"?`var threadMax = ${M}(-3.402823e+38f);`:`var threadMax = ${M}(-65504.0h);`,v=q=>`
      var<workgroup> rowMaxShared : ${M};
      var<workgroup> rowSumShared : ${M};
      var<workgroup> threadShared : array<${M}, ${s}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${M} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${M}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${q.registerUniform("packedCols","i32").declareVariables(l,b)}
      ${q.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${s};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${S}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${M}(${g("threadShared[0]",d)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${M}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${M}(${Mn("threadShared[0]",d)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${d}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:u},programUniforms:[{type:6,data:p}]}),getShaderSource:v}},lp=(e,t)=>{ap(e.inputs),e.compute(op(e.inputs[0],t))},up=e=>Wt({axis:e.axis})}),dp,cp,pp,hp,fp,mp,_p,vf=N(()=>{Kt(),Xt(),pr(),sr(),dp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},cp=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(s=>r.push(Number(s))),n=r.length),Wt({numOutputs:n,axis:t.axis,splitSizes:r})},pp=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${Nt("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,hp=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let s=e[n].setByIndices("indices","input[global_idx]");t===1?r.push(s):n===0?r.push(`if (output_number == ${n}u) { ${s} }`):n===t-1?r.push(`else { ${s} }`):r.push(`else if (output_number == ${n}) { ${s} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},fp=(e,t)=>{let r=e[0].dims,n=Fe.size(r),s=e[0].dataType,i=Fe.normalizeAxis(t.axis,r.length),a=new Array(t.numOutputs),u=Ze("input",s,r.length),d=new Array(t.numOutputs),p=[],g=[],l=0,b=[{type:12,data:n}];for(let S=0;S<t.numOutputs;S++){l+=t.splitSizes[S],d[S]=l;let v=r.slice();v[i]=t.splitSizes[S],g.push(v),a[S]=jt(`output${S}`,s,v.length),p.push({dims:g[S],dataType:e[0].dataType})}b.push({type:12,data:d},...At(r,...g));let M=S=>`
  ${S.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",d.length).declareVariables(u,...a)}
  ${pp(d.length)}
  ${hp(a)}

  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${u.offsetToIndices("global_idx")};
    var index = ${u.indicesGet("indices",i)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${Nt("uniforms.size_in_split_axis","output_number - 1u",d.length)};
      ${u.indicesSet("indices",i,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:M,getRunData:()=>({outputs:p,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:b})}},mp=(e,t)=>{dp(e.inputs);let r=e.inputs.length===1?t:cp(e.inputs,t);e.compute(fp(e.inputs,r),{inputs:[0]})},_p=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Wt({axis:t,numOutputs:n,splitSizes:r})}}),gp,wp,yp,xf=N(()=>{Kt(),Xt(),sr(),gp=(e,t,r,n,s)=>{let i=jt("output_data",s,r.length,4),a=Ze("a_data",t[1].dataType,t[1].dims.length,4),u=Ze("b_data",t[2].dataType,t[2].dims.length,4),d=Ze("c_data",t[0].dataType,t[0].dims.length,4),p,g=(l,b,M)=>`select(${b}, ${l}, ${M})`;if(!n)p=i.setByOffset("global_idx",g(a.getByOffset("global_idx"),u.getByOffset("global_idx"),d.getByOffset("global_idx")));else{let l=(b,M,S="")=>{let v=`a_data[index_a${M}][component_a${M}]`,q=`b_data[index_b${M}][component_b${M}]`,W=`bool(c_data[index_c${M}] & (0xffu << (component_c${M} * 8)))`;return`
            let output_indices${M} = ${i.offsetToIndices(`global_idx * 4u + ${M}u`)};
            let offset_a${M} = ${a.broadcastedIndicesToOffset(`output_indices${M}`,i)};
            let offset_b${M} = ${u.broadcastedIndicesToOffset(`output_indices${M}`,i)};
            let offset_c${M} = ${d.broadcastedIndicesToOffset(`output_indices${M}`,i)};
            let index_a${M} = offset_a${M} / 4u;
            let index_b${M} = offset_b${M} / 4u;
            let index_c${M} = offset_c${M} / 4u;
            let component_a${M} = offset_a${M} % 4u;
            let component_b${M} = offset_b${M} % 4u;
            let component_c${M} = offset_c${M} % 4u;
            ${b}[${M}] = ${S}(${g(v,q,W)});
          `};s===9?p=`
            var data = vec4<u32>(0);
            ${l("data",0,"u32")}
            ${l("data",1,"u32")}
            ${l("data",2,"u32")}
            ${l("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:p=`
            ${l("output_data[global_idx]",0)}
            ${l("output_data[global_idx]",1)}
            ${l("output_data[global_idx]",2)}
            ${l("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(d,a,u,i)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${p}
      }`},wp=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,s=e[1].dataType,i=!(Fe.areEqual(t,r)&&Fe.areEqual(r,n)),a=t,u=Fe.size(t);if(i){let p=sn.calcShape(sn.calcShape(t,r,!1),n,!1);if(!p)throw new Error("Can't perform where op on the given tensors");a=p,u=Fe.size(a)}let d=Math.ceil(u/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:p=>gp(p,e,a,i,s),getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(u/64/4)},programUniforms:[{type:12,data:d},...At(n,t,r,a)]})}},yp=e=>{e.compute(wp(e.inputs))}}),bp,Tf=N(()=>{Ao(),Ni(),hd(),Vo(),fd(),md(),Pl(),yd(),ru(),xd(),Td(),mu(),Ed(),Cd(),$d(),uc(),Ad(),Id(),Od(),Dd(),Bd(),Gl(),Ld(),Pu(),Rd(),Be(),or(),yr(),Oi(),Gd(),wf(),yf(),bf(),Mf(),vf(),Ou(),rs(),ra(),xf(),bp=new Map([["Abs",[Uo]],["Acos",[Wo]],["Acosh",[Ui]],["Add",[ia]],["ArgMax",[Po,Bi]],["ArgMin",[Di,Bi]],["Asin",[Go]],["Asinh",[qo]],["Atan",[Ho]],["Atanh",[Ko]],["Attention",[zo]],["AveragePool",[dn,on]],["BatchNormalization",[ji]],["BiasAdd",[No]],["BiasSplitGelu",[_l]],["Cast",[Xo,Wi]],["Ceil",[Yo]],["Clip",[Gi]],["Concat",[$l,kl]],["Conv",[_a,fa]],["ConvTranspose",[tu,Yl]],["Cos",[Zo]],["Cosh",[qi]],["CumSum",[su,ba]],["DepthToSpace",[ou,lu]],["DequantizeLinear",[kt,Gt]],["Div",[wl]],["Einsum",[hu,fu]],["Elu",[Jo,ks]],["Equal",[yl]],["Erf",[el]],["Exp",[tl]],["Expand",[gu]],["FastGelu",[wu]],["Floor",[Hi]],["FusedConv",[_a,fa]],["Gather",[$a,bu]],["GatherElements",[Tu,ka]],["GatherBlockQuantized",[xu,Ir]],["Gelu",[rl]],["Gemm",[Aa,Pa]],["GlobalAveragePool",[nd,Vd]],["GlobalMaxPool",[K,E]],["Greater",[vl]],["GreaterOrEqual",[Tl]],["GroupQueryAttention",[Lu,Du]],["HardSigmoid",[Qi,al]],["InstanceNormalization",[Nu]],["LayerNormalization",[Uu]],["LeakyRelu",[nl,ks]],["Less",[xl]],["LessOrEqual",[aa]],["Log",[ea]],["MatMul",[Wl]],["MatMulNBits",[qu,Hu]],["MaxPool",[f,m]],["Mul",[bl]],["MultiHeadAttention",[ku,Fd]],["Neg",[sl]],["Not",[Ys]],["Pad",[rd]],["Pow",[Ml]],["QuickGelu",[ta,ks]],["Range",[dr]],["Reciprocal",[il]],["ReduceMin",[Co]],["ReduceMean",[Pi]],["ReduceMax",[Eo]],["ReduceSum",[$o]],["ReduceProd",[Ii]],["ReduceL1",[To]],["ReduceL2",[So]],["ReduceLogSum",[Fi]],["ReduceLogSumExp",[Ai]],["ReduceSumSquare",[ko]],["Relu",[Ki]],["Resize",[Ud,Wd]],["RotaryEmbedding",[Qc]],["Sigmoid",[Xi]],["Sin",[ol]],["Sinh",[ll]],["Slice",[sp,ip]],["SkipLayerNormalization",[Jc]],["Split",[mp,_p]],["Sqrt",[ul]],["Softmax",[lp,up]],["Sub",[Js]],["Tan",[Yi]],["Tanh",[dl]],["ThresholdedRelu",[pl,ks]],["Tile",[Fu]],["Transpose",[cd,to]],["Where",[yp]]])}),Mp,Sf=N(()=>{Bt(),wn(),sr(),Mp=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,r,n,s){Ge(e.programInfo.name);let i=this.backend.device,a=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let u=[];for(let p of t)u.push({binding:u.length,resource:{buffer:p.buffer}});for(let p of r)u.push({binding:u.length,resource:{buffer:p.buffer}});s&&u.push({binding:u.length,resource:s});let d=i.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:u,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let p={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:d,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(p)}a.setPipeline(e.computePipeline),a.setBindGroup(0,d),a.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Ue(e.programInfo.name)}dispose(){}build(e,t){Ge(e.name);let r=this.backend.device,n=[];r.features.has("shader-f16")&&n.push("enable f16;");let s=Za(t,this.backend.device.limits),i=e.getShaderSource(s),a=`${n.join(`
`)}
${s.additionalImplementations}
${i}`,u=r.createShaderModule({code:a,label:e.name});Gr("verbose",()=>`[WebGPU] ${e.name} shader code: ${a}`);let d=r.createComputePipeline({compute:{module:u,entryPoint:"main"},layout:"auto",label:e.name});return Ue(e.name),{programInfo:e,computePipeline:d,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(e){let t=typeof e=="number"?e:e.x,r=typeof e=="number"?1:e.y||1,n=typeof e=="number"?1:e.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=s&&r<=s&&n<=s)return[t,r,n];let i=t*r*n,a=Math.ceil(Math.sqrt(i));if(a>s){if(a=Math.ceil(Math.cbrt(i)),a>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[a,a,a]}else return[a,a,1]}}}),vp,xp,Tp,Sp,Ef=N(()=>{Bt(),Kt(),wn(),_(),Rr(),Tf(),Sf(),vp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let s=e[n].dataType;switch(t[n]){case"none":{r.push("");break}case"type":{r.push(`${s}`);break}case"rank":{let i=e[n].dims.length;r.push(`${s};${i}`);break}case"dims":{let i=e[n].dims.join(",");r.push(`${s};${i}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join("|")},xp=(e,t,r)=>{let n=e.name;return e.shaderCache?.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+r+`:${vp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,n},Tp=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},Sp=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let r=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:r};t.features.has("chromium-experimental-timestamp-query-inside-passes")?r.push("chromium-experimental-timestamp-query-inside-passes"):t.features.has("timestamp-query")&&r.push("timestamp-query"),t.features.has("shader-f16")&&r.push("shader-f16"),this.device=await t.requestDevice(n),this.adapterInfo=new Tp(t.info||await t.requestAdapterInfo()),this.gpuDataManager=Jt(this),this.programManager=new Mp(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,hs(e.logLevel,!!e.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Ge(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{let t=new BigUint64Array(e.getMappedRange()),r=this.pendingQueries.get(e);for(let n=0;n<t.length/2;n++){let s=r[n],i=s.kernelId,a=this.kernels.get(i),u=a.kernelType,d=a.kernelName,p=s.programName,g=s.inputTensorViews,l=s.outputTensorViews,b=t[n*2],M=t[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=b);let S=Number(b-this.queryTimeBase),v=Number(M-this.queryTimeBase);if(!Number.isSafeInteger(S)||!Number.isSafeInteger(v))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:g.map(q=>({dims:q.dims,dataType:In(q.dataType)})),outputsMetadata:l.map(q=>({dims:q.dims,dataType:In(q.dataType)})),kernelId:i,kernelType:u,kernelName:d,programName:p,startTime:S,endTime:v});else{let q="";g.forEach((F,ee)=>{q+=`input[${ee}]: [${F.dims}] | ${In(F.dataType)}, `});let W="";l.forEach((F,ee)=>{W+=`output[${ee}]: [${F.dims}] | ${In(F.dataType)}, `}),console.log(`[profiling] kernel "${i}|${u}|${d}|${p}" ${q}${W}execution time: ${v-S} ns`)}ke("GPU",`${p}::${b}::${M}`)}e.unmap(),this.pendingQueries.delete(e)}),Ue()}run(e,t,r,n,s,i){Ge(e.name);let a=[];for(let F=0;F<t.length;++F){let ee=t[F].data;if(ee===0)continue;let te=this.gpuDataManager.get(ee);if(!te)throw new Error(`no GPU data for input: ${ee}`);a.push(te)}let{outputs:u,dispatchGroup:d,programUniforms:p}=e.getRunData(t),g=r.length===0?u.map((F,ee)=>ee):r;if(g.length!==u.length)throw new Error(`Output size ${g.length} must be equal to ${u.length}.`);let l=[],b=[];for(let F=0;F<u.length;++F){if(!Number.isInteger(g[F])||g[F]<-3||g[F]>=i)throw new Error(`Invalid output index: ${g[F]}`);if(g[F]===-3)continue;let ee=g[F]===-1,te=g[F]===-2,he=ee||te?s(u[F].dataType,u[F].dims):n(g[F],u[F].dataType,u[F].dims);if(l.push(he),he.data===0)continue;let Ne=this.gpuDataManager.get(he.data);if(!Ne)throw new Error(`no GPU data for output: ${he.data}`);if(ee&&this.temporaryData.push(Ne),te){let Ve=this.kernelPersistentData.get(this.currentKernelId);Ve||(Ve=[],this.kernelPersistentData.set(this.currentKernelId,Ve)),Ve.push(Ne)}b.push(Ne)}if(a.length!==t.length||b.length!==l.length){if(b.length===0)return Ue(e.name),l;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let M;if(p){let F=0,ee=[];p.forEach(Ve=>{let bt=typeof Ve.data=="number"?[Ve.data]:Ve.data;if(bt.length===0)return;let Vt=Ve.type===10?2:4,Rt,lr;Ve.type===10?(lr=bt.length>4?16:bt.length>2?8:bt.length*Vt,Rt=bt.length>4?16:Vt*bt.length):(lr=bt.length<=2?bt.length*Vt:16,Rt=16),F=Math.ceil(F/lr)*lr,ee.push(F);let ar=Ve.type===10?8:4;F+=bt.length>4?Math.ceil(bt.length/ar)*Rt:bt.length*Vt});let te=16;F=Math.ceil(F/te)*te;let he=new ArrayBuffer(F);p.forEach((Ve,bt)=>{let Vt=ee[bt],Rt=typeof Ve.data=="number"?[Ve.data]:Ve.data;if(Ve.type===6)new Int32Array(he,Vt,Rt.length).set(Rt);else if(Ve.type===12)new Uint32Array(he,Vt,Rt.length).set(Rt);else if(Ve.type===10)new Uint16Array(he,Vt,Rt.length).set(Rt);else if(Ve.type===1)new Float32Array(he,Vt,Rt.length).set(Rt);else throw new Error(`Unsupported uniform type: ${In(Ve.type)}`)});let Ne=this.gpuDataManager.create(F,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(Ne.buffer,0,he,0,F),this.gpuDataManager.release(Ne.id),M={offset:0,size:F,buffer:Ne.buffer}}let S=this.programManager.normalizeDispatchGroupSize(d),v=S[1]===1&&S[2]===1,q=xp(e,t,v),W=this.programManager.getArtifact(q);if(W||(W=this.programManager.build(e,S),this.programManager.setArtifact(q,W),Gr("info",()=>`[artifact] key: ${q}, programName: ${e.name}`)),p&&W.uniformVariablesInfo){if(p.length!==W.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${W.uniformVariablesInfo.length}, got ${p.length} in program "${W.programInfo.name}".`);for(let F=0;F<p.length;F++){let ee=p[F],te=ee.type,he=typeof ee.data=="number"?1:ee.data.length,[Ne,Ve]=W.uniformVariablesInfo[F];if(te!==Ne||he!==Ve)throw new Error(`Uniform variable ${F} mismatch: expect type ${Ne} with size ${Ve}, got type ${te} with size ${he} in program "${W.programInfo.name}".`)}}if(Gr("info",()=>`[ProgramManager] run "${e.name}" (key=${q}) with ${S[0]}x${S[1]}x${S[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let F={kernelId:this.currentKernelId,programName:W.programInfo.name,inputTensorViews:t,outputTensorViews:l};this.pendingKernels.push(F),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(F)}return this.programManager.run(W,a,b,S,M),Ue(e.name),l}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,r,n){let s=bp.get(e);if(!s)throw new Error(`kernel not implemented: ${e}`);let i={kernelType:e,kernelName:n,kernelEntry:s[0],attributes:[s[1],r]};this.kernels.set(t,i)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let r of t)this.gpuDataManager.release(r.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,r){let n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);let s=n.kernelType,i=n.kernelName,a=n.kernelEntry,u=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${i}" is not allowed to be called recursively`);this.currentKernelId=e,u[0]&&(u[1]=u[0](u[1]),u[0]=void 0),Gr("info",()=>`[WebGPU] Start to run kernel "[${s}] ${i}"...`);let d=this.env.debug;this.temporaryData=[];try{return d&&this.device.pushErrorScope("validation"),a(t,u[1]),0}catch(p){return r.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${i}" failed. ${p}`)),1}finally{d&&r.push(this.device.popErrorScope().then(p=>p?`GPU validation error for kernel "[${s}] ${i}": ${p.message}`:null));for(let p of this.temporaryData)this.gpuDataManager.release(p.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,r,n){let s=this.sessionExternalDataMapping.get(e);s||(s=new Map,this.sessionExternalDataMapping.set(e,s));let i=s.get(t),a=this.gpuDataManager.registerExternalBuffer(r,n,i?.[1]);return s.set(t,[a,r]),a}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach(r=>this.gpuDataManager.unregisterExternalBuffer(r[1])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,r){return async()=>{let n=await vt(this,e,t);return ye(n.buffer,r)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Gr("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Gr("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Gr("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),r=e.length;this.pendingKernels=[];for(let n=0;n<r;n++){let s=this.getComputePassEncoder(),i=e[n];this.writeTimestamp(this.pendingDispatchNumber*2),s.setPipeline(i.computePipeline),s.setBindGroup(0,i.bindGroup),s.dispatchWorkgroups(...i.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(t[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),Ep={};$(Ep,{init:()=>$p});var qd,Cp,$p,Cf=N(()=>{Kt(),Ef(),wn(),Xt(),qd=class gf{constructor(t,r,n,s){this.module=t,this.dataType=r,this.data=n,this.dims=s}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=Fe.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=Fe.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=Fe.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let t=Fe.size(this.dims);return t===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(Fe.size(t)!==Fe.size(this.dims))throw new Error("Invalid new shape");return new gf(this.module,this.dataType,this.data,t)}},Cp=class{constructor(e,t,r){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo;let n=e.HEAPU32,s=r>>>2;this.opKernelContext=n[s++];let i=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let a=[];for(let u=0;u<i;u++){let d=n[s++],p=n[s++],g=n[s++],l=[];for(let b=0;b<g;b++)l.push(n[s++]);a.push(new qd(e,d,p,l))}this.inputs=a}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(e,t){let r=t?.inputs?.map(a=>typeof a=="number"?this.inputs[a]:a)??this.inputs,n=t?.outputs??[],s=(a,u,d)=>new qd(this.module,u,this.output(a,d),d),i=(a,u)=>{let d=Hn(a,u);if(!d)throw new Error(`Unsupported data type: ${a}`);let p=d>0?this.backend.gpuDataManager.create(d).id:0;return new qd(this.module,a,p,u)};return this.backend.run(e,r,n,s,i,this.outputCount)}output(e,t){let r=this.module.stackSave();try{let n=this.module.stackAlloc((1+t.length)*4),s=n>>2;this.module.HEAPU32[s++]=t.length;for(let i=0;i<t.length;i++)this.module.HEAPU32[s++]=t[i];return this.module._JsepOutput(this.opKernelContext,e,n)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(r)}}},$p=async(e,t,r,n)=>{let s=t.jsepInit;if(!s)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let i=new Sp;await i.initialize(r,n),s("webgpu",[i,a=>i.alloc(a),a=>i.free(a),(a,u,d,p=!1)=>{if(p)Gr("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${a}, dst=${u}, size=${d}`),i.memcpy(a,u);else{Gr("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${a}, gpuDataId=${u}, size=${d}`);let g=t.HEAPU8.subarray(a>>>0,(a>>>0)+d);i.upload(u,g)}},async(a,u,d)=>{Gr("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${a}, dataOffset=${u}, size=${d}`),await i.download(a,()=>t.HEAPU8.subarray(u>>>0,(u>>>0)+d))},(a,u,d)=>i.createKernel(a,u,d,t.UTF8ToString(t._JsepGetNodeName(u))),a=>i.releaseKernel(a),(a,u,d,p)=>{Gr("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${d}, kernel=${a}, contextDataOffset=${u}`);let g=new Cp(t,i,u);return i.computeKernel(a,g,p)},()=>i.captureBegin(),()=>i.captureEnd(),()=>i.replay()])}else s("webnn")}}),kp,pc,hc,Rs,Pp,Hd,fc,mc,_c,gc,wc,yc,Ap=N(()=>{Hs(),Ks(),Kt(),Pr(),Gn(),xs(),kp=(e,t)=>{vr()._OrtInit(e,t)!==0&&Wr("Can't initialize onnxruntime.")},pc=async e=>{kp(e.wasm.numThreads,Jn(e.logLevel))},hc=async(e,t)=>{{let r=(Cf(),I(Ep)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let n=e.webgpu.adapter;if(n){if(typeof n.limits!="object"||typeof n.features!="object"||typeof n.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let s=e.webgpu.powerPreference;if(s!==void 0&&s!=="low-power"&&s!=="high-performance")throw new Error(`Invalid powerPreference setting: "${s}"`);let i=e.webgpu.forceFallbackAdapter;if(i!==void 0&&typeof i!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${i}"`);if(n=await navigator.gpu.requestAdapter({powerPreference:s,forceFallbackAdapter:i}),!n)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await r("webgpu",vr(),e,n)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await r("webnn",vr(),e)}}},Rs=new Map,Pp=e=>{let t=vr(),r=t.stackSave();try{let n=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,n,n+4)!==0&&Wr("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(r)}},Hd=e=>{let t=vr(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},fc=async(e,t)=>{let r,n,s=vr();Array.isArray(e)?[r,n]=e:e.buffer===s.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=Hd(e);let i=0,a=0,u=0,d=[],p=[],g=[];try{if([a,d]=qn(t),t?.externalData&&s.mountExternalData){let F=[];for(let ee of t.externalData){let te=typeof ee=="string"?ee:ee.path;F.push(es(typeof ee=="string"?ee:ee.data).then(he=>{s.mountExternalData(te,he)}))}await Promise.all(F)}for(let F of t?.executionProviders??[])if((typeof F=="string"?F:F.name)==="webnn"){if(s.currentContext)throw new Error("WebNN execution provider is already set.");if(typeof F!="string"){let ee=F,te=ee?.context,he=ee?.gpuDevice,Ne=ee?.deviceType,Ve=ee?.numThreads,bt=ee?.powerPreference;te?s.currentContext=te:he?s.currentContext=await navigator.ml.createContext(he):s.currentContext=await navigator.ml.createContext({deviceType:Ne,numThreads:Ve,powerPreference:bt})}else s.currentContext=await navigator.ml.createContext();break}i=await s._OrtCreateSession(r,n,a),i===0&&Wr("Can't create a session."),s.currentContext&&(s.currentContext=void 0);let[l,b]=Pp(i),M=!!t?.enableGraphCapture,S=[],v=[],q=[];for(let F=0;F<l;F++){let ee=s._OrtGetInputName(i,F);ee===0&&Wr("Can't get an input name."),p.push(ee),S.push(s.UTF8ToString(ee))}for(let F=0;F<b;F++){let ee=s._OrtGetOutputName(i,F);ee===0&&Wr("Can't get an output name."),g.push(ee);let te=s.UTF8ToString(ee);v.push(te);{if(M&&t?.preferredOutputLocation===void 0){q.push("gpu-buffer");continue}let he=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[te]??"cpu";if(he!=="cpu"&&he!=="cpu-pinned"&&he!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${he}.`);if(M&&he!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${he}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);q.push(he)}}let W=null;return q.some(F=>F==="gpu-buffer")&&(u=s._OrtCreateBinding(i),u===0&&Wr("Can't create IO binding."),W={handle:u,outputPreferredLocations:q,outputPreferredLocationsEncoded:q.map(F=>cs(F))}),Rs.set(i,[i,p,g,W,M,!1]),[i,S,v]}catch(l){throw p.forEach(b=>s._OrtFree(b)),g.forEach(b=>s._OrtFree(b)),u!==0&&s._OrtReleaseBinding(u),i!==0&&s._OrtReleaseSession(i),l}finally{s._free(r),a!==0&&s._OrtReleaseSessionOptions(a),d.forEach(l=>s._free(l)),s.unmountExternalData?.()}},mc=e=>{let t=vr(),r=Rs.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,s,i,a,u]=r;a&&(u&&t._OrtClearBoundOutputs(a.handle),t._OrtReleaseBinding(a.handle)),t.jsepOnReleaseSession?.(e),s.forEach(d=>t._OrtFree(d)),i.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(n),Rs.delete(e)},_c=(e,t,r,n,s,i=!1)=>{if(!e){t.push(0);return}let a=vr(),u=e[0],d=e[1],p=e[3],g,l;if(u==="string"&&p==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(i&&p!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${s} when enableGraphCapture is true.`);if(p==="gpu-buffer"){let S=e[2].gpuBuffer;l=Hn(us(u),d);let v=a.jsepRegisterBuffer;if(!v)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');g=v(n,s,S,l)}else{let S=e[2];if(Array.isArray(S)){l=4*S.length,g=a._malloc(l),r.push(g);let v=g/4;for(let q=0;q<S.length;q++){if(typeof S[q]!="string")throw new TypeError(`tensor data at index ${q} is not a string`);a.HEAPU32[v++]=Ar(S[q],r)}}else l=S.byteLength,g=a._malloc(l),r.push(g),a.HEAPU8.set(new Uint8Array(S.buffer,S.byteOffset,l),g)}let b=a.stackSave(),M=a.stackAlloc(4*d.length);try{let S=M/4;d.forEach(q=>a.HEAP32[S++]=q);let v=a._OrtCreateTensor(us(u),g,l,M,d.length,cs(p));v===0&&Wr(`Can't create tensor for input/output. session=${n}, index=${s}.`),t.push(v)}finally{a.stackRestore(b)}},gc=async(e,t,r,n,s,i)=>{let a=vr(),u=Rs.get(e);if(!u)throw new Error(`cannot run inference. invalid session id: ${e}`);let d=u[0],p=u[1],g=u[2],l=u[3],b=u[4],M=u[5],S=t.length,v=n.length,q=0,W=[],F=[],ee=[],te=[],he=a.stackSave(),Ne=a.stackAlloc(S*4),Ve=a.stackAlloc(S*4),bt=a.stackAlloc(v*4),Vt=a.stackAlloc(v*4);try{[q,W]=Bn(i);for(let Zt=0;Zt<S;Zt++)_c(r[Zt],F,te,e,t[Zt],b);for(let Zt=0;Zt<v;Zt++)_c(s[Zt],ee,te,e,S+n[Zt],b);let Rt=Ne/4,lr=Ve/4,ar=bt/4,_r=Vt/4;for(let Zt=0;Zt<S;Zt++)a.HEAPU32[Rt++]=F[Zt],a.HEAPU32[lr++]=p[t[Zt]];for(let Zt=0;Zt<v;Zt++)a.HEAPU32[ar++]=ee[Zt],a.HEAPU32[_r++]=g[n[Zt]];if(l&&!M){let{handle:Zt,outputPreferredLocations:Or,outputPreferredLocationsEncoded:Nr}=l;if(p.length!==S)throw new Error(`input count from feeds (${S}) is expected to be always equal to model's input count (${p.length}).`);for(let er=0;er<S;er++){let gr=t[er];await a._OrtBindInput(Zt,p[gr],F[er])!==0&&Wr(`Can't bind input[${er}] for session=${e}.`)}for(let er=0;er<v;er++){let gr=n[er];s[er]?.[3]?a._OrtBindOutput(Zt,g[gr],ee[er],0)!==0&&Wr(`Can't bind pre-allocated output[${er}] for session=${e}.`):a._OrtBindOutput(Zt,g[gr],0,Nr[gr])!==0&&Wr(`Can't bind output[${er}] to ${Or[er]} for session=${e}.`)}Rs.set(e,[d,p,g,l,b,!0])}a.jsepOnRunStart?.(d);let Fr;l?Fr=await a._OrtRunWithBinding(d,l.handle,v,bt,q):Fr=await a._OrtRun(d,Ve,Ne,S,Vt,v,bt,q),Fr!==0&&Wr("failed to call OrtRun().");let fr=[];for(let Zt=0;Zt<v;Zt++){let Or=a.HEAPU32[bt/4+Zt];if(Or===ee[Zt]){fr.push(s[Zt]);continue}let Nr=a.stackSave(),er=a.stackAlloc(4*4),gr=!1,Xe,Ct=0;try{a._OrtGetTensorData(Or,er,er+4,er+8,er+12)!==0&&Wr(`Can't access output tensor data on index ${Zt}.`);let ur=er/4,Kr=a.HEAPU32[ur++];Ct=a.HEAPU32[ur++];let Xr=a.HEAPU32[ur++],jn=a.HEAPU32[ur++],Zn=[];for(let vn=0;vn<jn;vn++)Zn.push(a.HEAPU32[Xr/4+vn]);a._OrtFree(Xr);let zn=Zn.reduce((vn,gn)=>vn*gn,1);Xe=In(Kr);let Pn=l?.outputPreferredLocations[n[Zt]];if(Xe==="string"){if(Pn==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let vn=[],gn=Ct/4;for(let Vs=0;Vs<zn;Vs++){let js=a.HEAPU32[gn++],pi=Vs===zn-1?void 0:a.HEAPU32[gn]-js;vn.push(a.UTF8ToString(js,pi))}fr.push([Xe,Zn,vn,"cpu"])}else if(Pn==="gpu-buffer"&&zn>0){let vn=a.jsepGetBuffer;if(!vn)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let gn=vn(Ct),Vs=Hn(Kr,zn);if(Vs===void 0||!ds(Xe))throw new Error(`Unsupported data type: ${Xe}`);gr=!0,fr.push([Xe,Zn,{gpuBuffer:gn,download:a.jsepCreateDownloader(gn,Vs,Xe),dispose:()=>{a._OrtReleaseTensor(Or)}},"gpu-buffer"])}else{let vn=Ln(Xe),gn=new vn(zn);new Uint8Array(gn.buffer,gn.byteOffset,gn.byteLength).set(a.HEAPU8.subarray(Ct,Ct+gn.byteLength)),fr.push([Xe,Zn,gn,"cpu"])}}finally{a.stackRestore(Nr),Xe==="string"&&Ct&&a._free(Ct),gr||a._OrtReleaseTensor(Or)}}return l&&!b&&(a._OrtClearBoundOutputs(l.handle),Rs.set(e,[d,p,g,l,b,!1])),fr}finally{a.stackRestore(he),F.forEach(Rt=>a._OrtReleaseTensor(Rt)),ee.forEach(Rt=>a._OrtReleaseTensor(Rt)),te.forEach(Rt=>a._free(Rt)),q!==0&&a._OrtReleaseRunOptions(q),W.forEach(Rt=>a._free(Rt))}},wc=e=>{let t=vr(),r=Rs.get(e);if(!r)throw new Error("invalid session id");let n=r[0],s=t._OrtEndProfiling(n);s===0&&Wr("Can't get an profile file name."),t._OrtFree(s)},yc=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}}),Ns,Vn,qa,id,ad,Kd,bc,Xd,di,ci,Ip,Fp,Op,zp,Dp,Bp,Lp,Rp,Np=N(()=>{Bt(),Ap(),Pr(),zt(),Ns=()=>!!k.wasm.proxy&&typeof document<"u",qa=!1,id=!1,ad=!1,Xd=new Map,di=(e,t)=>{let r=Xd.get(e);r?r.push(t):Xd.set(e,[t])},ci=()=>{if(qa||!id||ad||!Vn)throw new Error("worker not ready")},Ip=e=>{switch(e.data.type){case"init-wasm":qa=!1,e.data.err?(ad=!0,bc[1](e.data.err)):(id=!0,bc[0]()),Kd&&(URL.revokeObjectURL(Kd),Kd=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=Xd.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},Fp=async()=>{if(!id){if(qa)throw new Error("multiple calls to 'initWasm()' detected.");if(ad)throw new Error("previous call to 'initWasm()' failed.");if(qa=!0,Ns())return new Promise((e,t)=>{Vn?.terminate(),mt().then(([r,n])=>{try{Vn=n,Vn.onerror=i=>t(i),Vn.onmessage=Ip,bc=[e,t];let s={type:"init-wasm",in:k};Vn.postMessage(s),Kd=r}catch(s){t(s)}},t)});try{await Ur(k.wasm),await pc(k),id=!0}catch(e){throw ad=!0,e}finally{qa=!1}}},Op=async e=>{if(Ns())return ci(),new Promise((t,r)=>{di("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:k}};Vn.postMessage(n)});await hc(k,e)},zp=async e=>Ns()?(ci(),new Promise((t,r)=>{di("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};Vn.postMessage(n,[e.buffer])})):Hd(e),Dp=async(e,t)=>{if(Ns()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return ci(),new Promise((r,n)=>{di("create",[r,n]);let s={type:"create",in:{model:e,options:{...t}}},i=[];e instanceof Uint8Array&&i.push(e.buffer),Vn.postMessage(s,i)})}else return fc(e,t)},Bp=async e=>{if(Ns())return ci(),new Promise((t,r)=>{di("release",[t,r]);let n={type:"release",in:e};Vn.postMessage(n)});mc(e)},Lp=async(e,t,r,n,s,i)=>{if(Ns()){if(r.some(a=>a[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(s.some(a=>a))throw new Error("pre-allocated output tensor is not supported for proxy.");return ci(),new Promise((a,u)=>{di("run",[a,u]);let d=r,p={type:"run",in:{sessionId:e,inputIndices:t,inputs:d,outputIndices:n,options:i}};Vn.postMessage(p,yc(d))})}else return gc(e,t,r,n,s,i)},Rp=async e=>{if(Ns())return ci(),new Promise((t,r)=>{di("end-profiling",[t,r]);let n={type:"end-profiling",in:e};Vn.postMessage(n)});wc(e)}}),Mc,Vp,jp,$f=N(()=>{Bt(),Np(),Kt(),tr(),xs(),Mc=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Vp=e=>{switch(e[3]){case"cpu":return new De(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!ds(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:s}=e[2];return De.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:s})}default:throw new Error(`invalid data location: ${e[3]}`)}},jp=class{async fetchModelAndCopyToWasmMemory(e){return zp(await es(e))}async loadModel(e,t){Ge();let r;typeof e=="string"?r=await this.fetchModelAndCopyToWasmMemory(e):r=e,[this.sessionId,this.inputNames,this.outputNames]=await Dp(r,t),Ue()}async dispose(){return Bp(this.sessionId)}async run(e,t,r){Ge();let n=[],s=[];Object.entries(e).forEach(l=>{let b=l[0],M=l[1],S=this.inputNames.indexOf(b);if(S===-1)throw new Error(`invalid input '${b}'`);n.push(M),s.push(S)});let i=[],a=[];Object.entries(t).forEach(l=>{let b=l[0],M=l[1],S=this.outputNames.indexOf(b);if(S===-1)throw new Error(`invalid output '${b}'`);i.push(M),a.push(S)});let u=n.map((l,b)=>Mc(l,()=>`input "${this.inputNames[s[b]]}"`)),d=i.map((l,b)=>l?Mc(l,()=>`output "${this.outputNames[a[b]]}"`):null),p=await Lp(this.sessionId,s,u,a,d,r),g={};for(let l=0;l<p.length;l++)g[this.outputNames[a[l]]]=i[l]??Vp(p[l]);return Ue(),g}startProfiling(){}endProfiling(){Rp(this.sessionId)}}}),Up,Wp,kf=N(()=>{Bt(),Np(),$f(),zt(),Up=()=>{if((typeof k.wasm.initTimeout!="number"||k.wasm.initTimeout<0)&&(k.wasm.initTimeout=0),k.wasm.simd===!1&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),typeof k.wasm.proxy!="boolean"&&(k.wasm.proxy=!1),typeof k.wasm.trace!="boolean"&&(k.wasm.trace=!1),typeof k.wasm.numThreads!="number"||!Number.isInteger(k.wasm.numThreads)||k.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)k.wasm.numThreads=1;else{let e=typeof navigator>"u"?Te("node:os").cpus().length:navigator.hardwareConcurrency;k.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Wp=class{async init(e){Up(),await Fp(),await Op(e)}async createInferenceSessionHandler(e,t){let r=new jp;return await r.loadModel(e,t),Promise.resolve(r)}}}),Gp={};$(Gp,{wasmBackend:()=>qp});var qp,Pf=N(()=>{kf(),qp=new Wp});Bt(),Bt(),Bt();var Af="1.20.0-dev.20240908-de7a02beef",If=_t;{let e=(Pf(),I(Gp)).wasmBackend;le("webgpu",e,5),le("webnn",e,5),le("cpu",e,10),le("wasm",e,10)}Object.defineProperty(k.versions,"web",{value:Af,enumerable:!0});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */},"./src/backends/onnx.js":(Pt,Se,R)=>{var z;R.r(Se),R.d(Se,{Tensor:()=>Te.Tensor,createInferenceSession:()=>me,deviceToExecutionProviders:()=>se,isONNXProxy:()=>ne,isONNXTensor:()=>B});var fe=R("./src/env.js"),Me=R("?2ce3"),$e=R("./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs"),Te=R("./node_modules/onnxruntime-common/dist/esm/index.js");const N=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),$=[];let V,I;if(fe.apis.IS_NODE_ENV){switch(I=Me??(z||(z=R.t(Me,2))),process.platform){case"win32":$.push("dml");break;case"linux":process.arch==="x64"&&$.push("cuda");break}$.push("cpu"),V=["cpu"]}else I=$e,fe.apis.IS_WEBNN_AVAILABLE&&$.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),fe.apis.IS_WEBGPU_AVAILABLE&&$.push("webgpu"),$.push("wasm"),V=["wasm"];const Z=I.InferenceSession;function se(ae=null){if(!ae)return V;switch(ae){case"auto":return $;case"gpu":return $.filter(X=>["webgpu","cuda","dml","webnn-gpu"].includes(X))}if($.includes(ae))return[N[ae]??ae];throw new Error(`Unsupported device: "${ae}". Should be one of: ${$.join(", ")}.`)}let le=null;async function me(ae,X){le&&await le;const L=Z.create(ae,X);return le??(le=L),await L}function B(ae){return ae instanceof I.Tensor}const J=I?.env;J?.wasm&&(J.wasm.wasmPaths=`http://cdn.jsdelivr.net/npm/@huggingface/transformers@${fe.env.version}/dist/`,J.wasm.proxy=!1,(typeof crossOriginIsolated>"u"||!crossOriginIsolated)&&(J.wasm.numThreads=1)),J?.webgpu&&(J.webgpu.powerPreference="high-performance");function ne(){return J?.wasm?.proxy}fe.env.backends.onnx=J},"./src/configs.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{AutoConfig:()=>$,PretrainedConfig:()=>N,getKeyValueShapes:()=>Te});var z=R("./src/utils/core.js"),fe=R("./src/utils/hub.js");async function Me(V,I){return await(0,fe.getModelJSON)(V,"config.json",!0,I)}function $e(V){const I={};let Z={};switch(V.model_type){case"llava":case"paligemma":case"florence2":Z=$e(V.text_config);break;case"moondream1":Z=$e(V.phi_config);break;case"musicgen":Z=$e(V.decoder);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":I.num_heads="n_head",I.num_layers="n_layer",I.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"phi":case"phi3":case"falcon":I.num_heads="num_attention_heads",I.num_layers="num_hidden_layers",I.hidden_size="hidden_size";break;case"llama":case"cohere":case"mistral":case"starcoder2":case"qwen2":I.num_heads="num_key_value_heads",I.num_layers="num_hidden_layers",I.hidden_size="hidden_size",I.num_attention_heads="num_attention_heads";break;case"gemma":case"gemma2":I.num_heads="num_key_value_heads",I.num_layers="num_hidden_layers",I.dim_kv="head_dim";break;case"openelm":I.num_heads="num_kv_heads",I.num_layers="num_transformer_layers",I.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":I.num_heads="num_heads",I.num_layers="num_layers",I.hidden_size="hidden_size";break;case"bloom":I.num_heads="n_head",I.num_layers="n_layer",I.hidden_size="hidden_size";break;case"mpt":I.num_heads="n_heads",I.num_layers="n_layers",I.hidden_size="d_model";break;case"t5":case"mt5":case"longt5":I.num_decoder_layers="num_decoder_layers",I.num_decoder_heads="num_heads",I.decoder_dim_kv="d_kv",I.num_encoder_layers="num_layers",I.num_encoder_heads="num_heads",I.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":I.num_decoder_layers="decoder_layers",I.num_decoder_heads="decoder_attention_heads",I.decoder_hidden_size="d_model",I.num_encoder_layers="encoder_layers",I.num_encoder_heads="encoder_attention_heads",I.encoder_hidden_size="d_model";break;case"speecht5":I.num_decoder_layers="decoder_layers",I.num_decoder_heads="decoder_attention_heads",I.decoder_hidden_size="hidden_size",I.num_encoder_layers="encoder_layers",I.num_encoder_heads="encoder_attention_heads",I.encoder_hidden_size="hidden_size";break;case"trocr":I.num_encoder_layers=I.num_decoder_layers="decoder_layers",I.num_encoder_heads=I.num_decoder_heads="decoder_attention_heads",I.encoder_hidden_size=I.decoder_hidden_size="d_model";break;case"musicgen_decoder":I.num_encoder_layers=I.num_decoder_layers="num_hidden_layers",I.num_encoder_heads=I.num_decoder_heads="num_attention_heads",I.encoder_hidden_size=I.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const le=$e(V.decoder),me="num_decoder_layers"in le,B=(0,z.pick)(V,["model_type","is_encoder_decoder"]);return me?(B.num_decoder_layers=le.num_decoder_layers,B.num_decoder_heads=le.num_decoder_heads,B.decoder_hidden_size=le.decoder_hidden_size,B.num_encoder_layers=le.num_encoder_layers,B.num_encoder_heads=le.num_encoder_heads,B.encoder_hidden_size=le.encoder_hidden_size):(B.num_layers=le.num_layers,B.num_heads=le.num_heads,B.hidden_size=le.hidden_size),B}const se={...Z,...(0,z.pick)(V,["model_type","multi_query","is_encoder_decoder"])};for(const le in I)se[le]=V[I[le]];return se}function Te(V,{prefix:I="past_key_values"}={}){const Z={},se=V.normalized_config,le=1;if(se.is_encoder_decoder&&"num_encoder_heads"in se&&"num_decoder_heads"in se){const me=se.encoder_dim_kv??se.encoder_hidden_size/se.num_encoder_heads,B=se.decoder_dim_kv??se.decoder_hidden_size/se.num_decoder_heads,J=[le,se.num_encoder_heads,0,me],ne=[le,se.num_decoder_heads,0,B];for(let ae=0;ae<se.num_decoder_layers;++ae)Z[`${I}.${ae}.encoder.key`]=J,Z[`${I}.${ae}.encoder.value`]=J,Z[`${I}.${ae}.decoder.key`]=ne,Z[`${I}.${ae}.decoder.value`]=ne}else{const me=se.num_heads,B=se.num_layers,J=se.dim_kv??se.hidden_size/(se.num_attention_heads??me);if(se.model_type==="falcon"){const ne=[le*me,0,J];for(let ae=0;ae<B;++ae)Z[`${I}.${ae}.key`]=ne,Z[`${I}.${ae}.value`]=ne}else if(se.multi_query){const ne=[le*me,0,2*J];for(let ae=0;ae<B;++ae)Z[`${I}.${ae}.key_value`]=ne}else if(se.model_type==="bloom"){const ne=[le*me,J,0],ae=[le*me,0,J];for(let X=0;X<B;++X)Z[`${I}.${X}.key`]=ne,Z[`${I}.${X}.value`]=ae}else if(se.model_type==="openelm")for(let ne=0;ne<B;++ne){const ae=[le,me[ne],0,J];Z[`${I}.${ne}.key`]=ae,Z[`${I}.${ne}.value`]=ae}else{const ne=[le,me,0,J];for(let ae=0;ae<B;++ae)Z[`${I}.${ae}.key`]=ne,Z[`${I}.${ae}.value`]=ne}}return Z}class N{constructor(I){xe(this,"max_position_embeddings");this.model_type=null,this.is_encoder_decoder=!1,Object.assign(this,I),this.normalized_config=$e(this)}static async from_pretrained(I,{progress_callback:Z=null,config:se=null,cache_dir:le=null,local_files_only:me=!1,revision:B="main"}={}){se&&!(se instanceof N)&&(se=new N(se));const J=se??await Me(I,{progress_callback:Z,config:se,cache_dir:le,local_files_only:me,revision:B});return new this(J)}}class ${static async from_pretrained(...I){return N.from_pretrained(...I)}}},"./src/env.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{apis:()=>B,env:()=>A});var z=R("?569f"),fe=R("?3f59"),Me=R("?154a");const $e="3.0.0-alpha.15",Te=typeof self<"u",N=Te&&self.constructor.name==="DedicatedWorkerGlobalScope",$=Te&&"caches"in self,V=typeof navigator<"u"&&"gpu"in navigator,I=typeof navigator<"u"&&"ml"in navigator,Z=typeof process<"u",se=Z&&process?.release?.name==="node",le=!D(z),me=!D(fe),B=Object.freeze({IS_BROWSER_ENV:Te,IS_WEBWORKER_ENV:N,IS_WEB_CACHE_AVAILABLE:$,IS_WEBGPU_AVAILABLE:V,IS_WEBNN_AVAILABLE:I,IS_PROCESS_AVAILABLE:Z,IS_NODE_ENV:se,IS_FS_AVAILABLE:le,IS_PATH_AVAILABLE:me}),J=le&&me,ne=J?fe.dirname(fe.dirname(Me.fileURLToPath(import.meta.url))):"./",ae=J?fe.join(ne,"/.cache/"):null,X="/models/",L=J?fe.join(ne,X):X,A={version:$e,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"http://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!Te,localModelPath:L,useFS:le,useBrowserCache:$,useFSCache:le,cacheDir:ae,useCustomCache:!1,customCache:null};function D(k){return Object.keys(k).length===0}},"./src/generation/configuration_utils.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{GenerationConfig:()=>fe});var z=R("./src/utils/core.js");class fe{constructor($e){xe(this,"max_length",20);xe(this,"max_new_tokens",null);xe(this,"min_length",0);xe(this,"min_new_tokens",null);xe(this,"early_stopping",!1);xe(this,"max_time",null);xe(this,"do_sample",!1);xe(this,"num_beams",1);xe(this,"num_beam_groups",1);xe(this,"penalty_alpha",null);xe(this,"use_cache",!0);xe(this,"temperature",1);xe(this,"top_k",50);xe(this,"top_p",1);xe(this,"typical_p",1);xe(this,"epsilon_cutoff",0);xe(this,"eta_cutoff",0);xe(this,"diversity_penalty",0);xe(this,"repetition_penalty",1);xe(this,"encoder_repetition_penalty",1);xe(this,"length_penalty",1);xe(this,"no_repeat_ngram_size",0);xe(this,"bad_words_ids",null);xe(this,"force_words_ids",null);xe(this,"renormalize_logits",!1);xe(this,"constraints",null);xe(this,"forced_bos_token_id",null);xe(this,"forced_eos_token_id",null);xe(this,"remove_invalid_values",!1);xe(this,"exponential_decay_length_penalty",null);xe(this,"suppress_tokens",null);xe(this,"begin_suppress_tokens",null);xe(this,"forced_decoder_ids",null);xe(this,"guidance_scale",null);xe(this,"num_return_sequences",1);xe(this,"output_attentions",!1);xe(this,"output_hidden_states",!1);xe(this,"output_scores",!1);xe(this,"return_dict_in_generate",!1);xe(this,"pad_token_id",null);xe(this,"bos_token_id",null);xe(this,"eos_token_id",null);xe(this,"encoder_no_repeat_ngram_size",0);xe(this,"decoder_start_token_id",null);xe(this,"generation_kwargs",{});Object.assign(this,(0,z.pick)($e,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{ClassifierFreeGuidanceLogitsProcessor:()=>J,ForcedBOSTokenLogitsProcessor:()=>N,ForcedEOSTokenLogitsProcessor:()=>$,LogitsProcessor:()=>Me,LogitsProcessorList:()=>Te,LogitsWarper:()=>$e,MinLengthLogitsProcessor:()=>le,MinNewTokensLengthLogitsProcessor:()=>me,NoBadWordsLogitsProcessor:()=>B,NoRepeatNGramLogitsProcessor:()=>Z,RepetitionPenaltyLogitsProcessor:()=>se,SuppressTokensAtBeginLogitsProcessor:()=>V,TemperatureLogitsWarper:()=>ne,TopKLogitsWarper:()=>X,TopPLogitsWarper:()=>ae,WhisperTimeStampLogitsProcessor:()=>I});var z=R("./src/utils/generic.js");R("./src/utils/tensor.js");var fe=R("./src/utils/maths.js");class Me extends z.Callable{_call(A,D){throw Error("`_call` should be implemented in a subclass")}}class $e extends z.Callable{_call(A,D){throw Error("`_call` should be implemented in a subclass")}}class Te extends z.Callable{constructor(){super(),this.processors=[]}push(A){this.processors.push(A)}extend(A){this.processors.push(...A)}_call(A,D){let k=D;for(const de of this.processors)k=de(A,k);return k}[Symbol.iterator](){return this.processors.values()}}class N extends Me{constructor(A){super(),this.bos_token_id=A}_call(A,D){for(let k=0;k<A.length;++k)if(A[k].length===1){const de=D[k].data;de.fill(-1/0),de[this.bos_token_id]=0}return D}}class $ extends Me{constructor(A,D){super(),this.max_length=A,this.eos_token_id=Array.isArray(D)?D:[D]}_call(A,D){for(let k=0;k<A.length;++k)if(A[k].length===this.max_length-1){const de=D[k].data;de.fill(-1/0);for(const ve of this.eos_token_id)de[ve]=0}return D}}class V extends Me{constructor(A,D){super(),this.begin_suppress_tokens=A,this.begin_index=D}_call(A,D){for(let k=0;k<A.length;++k)if(A[k].length===this.begin_index){const de=D[k].data;for(const ve of this.begin_suppress_tokens)de[ve]=-1/0}return D}}class I extends Me{constructor(A,D){super(),this.eos_token_id=Array.isArray(A.eos_token_id)?A.eos_token_id[0]:A.eos_token_id,this.no_timestamps_token_id=A.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=D.length,D.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=A.max_initial_timestamp_index}_call(A,D){for(let k=0;k<A.length;++k){const de=D[k].data;if(de[this.no_timestamps_token_id]=-1/0,A[k].length===this.begin_index-1){de.fill(-1/0),de[this.timestamp_begin]=0;continue}const ve=A[k].slice(this.begin_index),Ee=ve.length>=1&&ve[ve.length-1]>=this.timestamp_begin,Ie=ve.length<2||ve[ve.length-2]>=this.timestamp_begin;if(Ee&&(Ie?de.subarray(this.timestamp_begin).fill(-1/0):de.subarray(0,this.eos_token_id).fill(-1/0)),A[k].length===this.begin_index&&this.max_initial_timestamp_index!==null){const pt=this.timestamp_begin+this.max_initial_timestamp_index;de.subarray(pt+1).fill(-1/0)}const Ae=(0,fe.log_softmax)(de),tt=Math.log(Ae.subarray(this.timestamp_begin).map(Math.exp).reduce((pt,_e)=>pt+_e)),Ye=(0,fe.max)(Ae.subarray(0,this.timestamp_begin))[0];tt>Ye&&de.subarray(0,this.timestamp_begin).fill(-1/0)}return D}}class Z extends Me{constructor(A){super(),this.no_repeat_ngram_size=A}getNgrams(A){const D=A.length,k=[];for(let ve=0;ve<D+1-this.no_repeat_ngram_size;++ve){const Ee=[];for(let Ie=0;Ie<this.no_repeat_ngram_size;++Ie)Ee.push(A[ve+Ie]);k.push(Ee.map(Number))}const de=new Map;for(const ve of k){const Ee=ve.slice(0,ve.length-1),Ie=JSON.stringify(Ee),Ae=de.get(Ie)??[];Ae.push(ve[ve.length-1]),de.set(Ie,Ae)}return de}getGeneratedNgrams(A,D){const k=D.slice(D.length+1-this.no_repeat_ngram_size,D.length);return A.get(JSON.stringify(k.map(Number)))??[]}calcBannedNgramTokens(A){const D=[];if(A.length+1<this.no_repeat_ngram_size)return D;{const k=this.getNgrams(A);return this.getGeneratedNgrams(k,A)}}_call(A,D){for(let k=0;k<A.length;++k){const de=D[k].data,ve=this.calcBannedNgramTokens(A[k]);for(const Ee of ve)de[Ee]=-1/0}return D}}class se extends Me{constructor(A){super(),this.penalty=A}_call(A,D){for(let k=0;k<A.length;++k){const de=D[k].data;for(const ve of A[k]){const Ee=Number(ve);de[Ee]<0?de[Ee]*=this.penalty:de[Ee]/=this.penalty}}return D}}class le extends Me{constructor(A,D){super(),this.min_length=A,this.eos_token_id=Array.isArray(D)?D:[D]}_call(A,D){for(let k=0;k<A.length;++k)if(A[k].length<this.min_length){const de=D[k].data;for(const ve of this.eos_token_id)de[ve]=-1/0}return D}}class me extends Me{constructor(A,D,k){super(),this.prompt_length_to_skip=A,this.min_new_tokens=D,this.eos_token_id=Array.isArray(k)?k:[k]}_call(A,D){for(let k=0;k<A.length;++k)if(A[k].length-this.prompt_length_to_skip<this.min_new_tokens){const ve=D[k].data;for(const Ee of this.eos_token_id)ve[Ee]=-1/0}return D}}class B extends Me{constructor(A,D){super(),this.bad_words_ids=A,this.eos_token_id=Array.isArray(D)?D:[D]}_call(A,D){for(let k=0;k<A.length;++k){const de=D[k].data,ve=A[k];for(const Ee of this.bad_words_ids){let Ie=!0;for(let Ae=1;Ae<=Ee.length-1&&Ee.length<ve.length;++Ae)if(Ee.at(-Ae-1)!=ve.at(-Ae)){Ie=!1;break}Ie&&(de[Ee.at(-1)]=-1/0)}}return D}}class J extends Me{constructor(A){if(super(),A<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${A}.`);this.guidance_scale=A}_call(A,D){if(D.dims[0]!==2*A.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${D.dims[0]} for the logits and ${A.length} for the input ids.`);const k=A.length,de=D.slice([0,k],null),ve=D.slice([k,D.dims[0]],null);for(let Ee=0;Ee<ve.data.length;++Ee)ve.data[Ee]+=(de.data[Ee]-ve.data[Ee])*this.guidance_scale;return ve}}class ne extends $e{constructor(A){super(),this.temperature=A}_call(A,D){const k=D.data;for(let de=0;de<k.length;++de)k[de]/=this.temperature;return D}}class ae extends $e{constructor(A,{filter_value:D=-1/0,min_tokens_to_keep:k=1}={}){if(super(),A<0||A>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${A}`);if(!Number.isInteger(k)||k<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${k}`);this.top_p=A,this.filter_value=D,this.min_tokens_to_keep=k}}class X extends $e{constructor(A,{filter_value:D=-1/0,min_tokens_to_keep:k=1}={}){if(super(),!Number.isInteger(A)||A<0)throw new Error(`\`top_k\` must be a positive integer, but is ${A}`);this.top_k=Math.max(A,k),this.filter_value=D}}},"./src/generation/logits_sampler.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{LogitsSampler:()=>$e});var z=R("./src/utils/generic.js"),fe=R("./src/utils/tensor.js"),Me=R("./src/utils/maths.js");R("./src/generation/configuration_utils.js");class $e extends z.Callable{constructor(I){super(),this.generation_config=I}async _call(I){return this.sample(I)}async sample(I){throw Error("sample should be implemented in subclasses.")}getLogits(I,Z){let se=I.dims.at(-1),le=I.data;if(Z===-1)le=le.slice(-se);else{let me=Z*se;le=le.slice(me,me+se)}return le}randomSelect(I){let Z=0;for(let le=0;le<I.length;++le)Z+=I[le];let se=Math.random()*Z;for(let le=0;le<I.length;++le)if(se-=I[le],se<=0)return le;return 0}static getSampler(I){if(I.do_sample)return new N(I);if(I.num_beams>1)return new $(I);if(I.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${I.num_return_sequences}.`);return new Te(I)}}class Te extends $e{async sample(I){const Z=(0,Me.max)(I.data)[1];return[[BigInt(Z),0]]}}class N extends $e{async sample(I){let Z=I.dims.at(-1);this.generation_config.top_k>0&&(Z=Math.min(this.generation_config.top_k,Z));const[se,le]=await(0,fe.topk)(I,Z),me=(0,Me.softmax)(se.data);return Array.from({length:this.generation_config.num_beams},()=>{const B=this.randomSelect(me);return[le.data[B],Math.log(me[B])]})}}class $ extends $e{async sample(I){let Z=I.dims.at(-1);this.generation_config.top_k>0&&(Z=Math.min(this.generation_config.top_k,Z));const[se,le]=await(0,fe.topk)(I,Z),me=(0,Me.softmax)(se.data);return Array.from({length:this.generation_config.num_beams},(B,J)=>[le.data[J],Math.log(me[J])])}}},"./src/generation/stopping_criteria.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{EosTokenCriteria:()=>Te,InterruptableStoppingCriteria:()=>N,MaxLengthCriteria:()=>$e,StoppingCriteria:()=>fe,StoppingCriteriaList:()=>Me});var z=R("./src/utils/generic.js");class fe extends z.Callable{_call(V,I){throw Error("StoppingCriteria needs to be subclassed")}}class Me extends z.Callable{constructor(){super(),this.criteria=[]}push(V){this.criteria.push(V)}extend(V){V instanceof Me?V=V.criteria:V instanceof fe&&(V=[V]),this.criteria.push(...V)}_call(V,I){const Z=new Array(V.length).fill(!1);for(const se of this.criteria){const le=se(V,I);for(let me=0;me<Z.length;++me)Z[me]||(Z[me]=le[me])}return Z}[Symbol.iterator](){return this.criteria.values()}}class $e extends fe{constructor(V,I=null){super(),this.max_length=V,this.max_position_embeddings=I}_call(V){return V.map(I=>I.length>=this.max_length)}}class Te extends fe{constructor(V){super(),Array.isArray(V)||(V=[V]),this.eos_token_id=V}_call(V,I){return V.map(Z=>{const se=Z.at(-1);return this.eos_token_id.some(le=>se==le)})}}class N extends fe{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(V,I){return new Array(V.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{BaseStreamer:()=>$e,TextStreamer:()=>N,WhisperTextStreamer:()=>$});var z=R("./src/utils/core.js"),fe=R("./src/tokenizers.js"),Me=R("./src/env.js");class $e{put(I){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const Te=Me.apis.IS_PROCESS_AVAILABLE?V=>process.stdout.write(V):V=>console.log(V);class N extends $e{constructor(I,{skip_prompt:Z=!1,callback_function:se=null,token_callback_function:le=null,decode_kwargs:me={},...B}={}){super(),this.tokenizer=I,this.skip_prompt=Z,this.callback_function=se??Te,this.token_callback_function=le,this.decode_kwargs={...me,...B},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(I){if(I.length>1)throw Error("TextStreamer only supports batch size of 1");if(this.skip_prompt&&this.next_tokens_are_prompt){this.next_tokens_are_prompt=!1;return}const Z=I[0];this.token_callback_function?.(Z),this.token_cache=(0,z.mergeArrays)(this.token_cache,Z);const se=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let le;se.endsWith(`
`)?(le=se.slice(this.print_len),this.token_cache=[],this.print_len=0):se.length>0&&(0,fe.is_chinese_char)(se.charCodeAt(se.length-1))?(le=se.slice(this.print_len),this.print_len+=le.length):(le=se.slice(this.print_len,se.lastIndexOf(" ")+1),this.print_len+=le.length),this.on_finalized_text(le,!1)}end(){let I;this.token_cache.length>0?(I=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):I="",this.next_tokens_are_prompt=!0,this.on_finalized_text(I,!0)}on_finalized_text(I,Z){I.length>0&&this.callback_function?.(I),Z&&this.callback_function===Te&&Me.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class $ extends N{constructor(I,{skip_prompt:Z=!1,callback_function:se=null,token_callback_function:le=null,on_chunk_start:me=null,on_chunk_end:B=null,on_finalize:J=null,time_precision:ne=.02,skip_special_tokens:ae=!0,decode_kwargs:X={}}={}){super(I,{skip_prompt:Z,callback_function:se,token_callback_function:le,decode_kwargs:{skip_special_tokens:ae,...X}}),this.timestamp_begin=I.timestamp_begin,this.on_chunk_start=me,this.on_chunk_end=B,this.on_finalize=J,this.time_precision=ne,this.waiting_for_timestamp=!1}put(I){if(I.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const Z=I[0];if(Z.length===1){const se=Number(Z[0])-this.timestamp_begin;if(se>=0){const le=se*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(le):this.on_chunk_start?.(le),this.waiting_for_timestamp=!this.waiting_for_timestamp,I=[[]]}}return super.put(I)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{ASTForAudioClassification:()=>Xs,ASTModel:()=>Nt,ASTPreTrainedModel:()=>Mn,AlbertForMaskedLM:()=>Kt,AlbertForQuestionAnswering:()=>cs,AlbertForSequenceClassification:()=>ds,AlbertModel:()=>Jn,AlbertPreTrainedModel:()=>Ln,AutoModel:()=>Ba,AutoModelForAudioClassification:()=>ed,AutoModelForAudioFrameClassification:()=>rd,AutoModelForCTC:()=>Ju,AutoModelForCausalLM:()=>Bd,AutoModelForDepthEstimation:()=>Ra,AutoModelForDocumentQuestionAnswering:()=>Rd,AutoModelForImageClassification:()=>Hu,AutoModelForImageFeatureExtraction:()=>Va,AutoModelForImageMatting:()=>Bs,AutoModelForImageSegmentation:()=>Ld,AutoModelForImageToImage:()=>La,AutoModelForMaskGeneration:()=>Zu,AutoModelForMaskedLM:()=>Wu,AutoModelForNormalEstimation:()=>Na,AutoModelForObjectDetection:()=>Qu,AutoModelForQuestionAnswering:()=>Gu,AutoModelForSemanticSegmentation:()=>Ku,AutoModelForSeq2SeqLM:()=>Dd,AutoModelForSequenceClassification:()=>Ru,AutoModelForSpeechSeq2Seq:()=>Vu,AutoModelForTextToSpectrogram:()=>ju,AutoModelForTextToWaveform:()=>Uu,AutoModelForTokenClassification:()=>Nu,AutoModelForUniversalSegmentation:()=>Xu,AutoModelForVision2Seq:()=>qu,AutoModelForXVector:()=>td,AutoModelForZeroShotObjectDetection:()=>Yu,BartForConditionalGeneration:()=>_,BartForSequenceClassification:()=>P,BartModel:()=>ye,BartPretrainedModel:()=>wn,BaseModelOutput:()=>ht,BeitForImageClassification:()=>nl,BeitModel:()=>rl,BeitPreTrainedModel:()=>Hi,BertForMaskedLM:()=>Re,BertForQuestionAnswering:()=>De,BertForSequenceClassification:()=>at,BertForTokenClassification:()=>$t,BertModel:()=>dt,BertPreTrainedModel:()=>st,BlenderbotForConditionalGeneration:()=>Ot,BlenderbotModel:()=>vt,BlenderbotPreTrainedModel:()=>Tt,BlenderbotSmallForConditionalGeneration:()=>nr,BlenderbotSmallModel:()=>Rr,BlenderbotSmallPreTrainedModel:()=>Jt,BloomForCausalLM:()=>Fo,BloomModel:()=>Io,BloomPreTrainedModel:()=>Ao,CLIPModel:()=>eo,CLIPPreTrainedModel:()=>ts,CLIPSegForImageSegmentation:()=>lo,CLIPSegModel:()=>oo,CLIPSegPreTrainedModel:()=>yi,CLIPTextModel:()=>dd,CLIPTextModelWithProjection:()=>Fn,CLIPVisionModel:()=>cd,CLIPVisionModelWithProjection:()=>to,CamembertForMaskedLM:()=>jr,CamembertForQuestionAnswering:()=>Dr,CamembertForSequenceClassification:()=>Cr,CamembertForTokenClassification:()=>Zr,CamembertModel:()=>tr,CamembertPreTrainedModel:()=>Bt,CausalLMOutput:()=>Yn,CausalLMOutputWithPast:()=>Vd,ChineseCLIPModel:()=>ao,ChineseCLIPPreTrainedModel:()=>io,ClapAudioModelWithProjection:()=>lu,ClapModel:()=>au,ClapPreTrainedModel:()=>ui,ClapTextModelWithProjection:()=>ou,CodeGenForCausalLM:()=>wo,CodeGenModel:()=>go,CodeGenPreTrainedModel:()=>Sn,CohereForCausalLM:()=>vo,CohereModel:()=>Mo,CoherePreTrainedModel:()=>$i,ConvBertForMaskedLM:()=>x,ConvBertForQuestionAnswering:()=>Y,ConvBertForSequenceClassification:()=>G,ConvBertForTokenClassification:()=>C,ConvBertModel:()=>Et,ConvBertPreTrainedModel:()=>Mt,ConvNextForImageClassification:()=>Xn,ConvNextModel:()=>Kn,ConvNextPreTrainedModel:()=>Pl,ConvNextV2ForImageClassification:()=>Qn,ConvNextV2Model:()=>la,ConvNextV2PreTrainedModel:()=>Rn,DPTForDepthEstimation:()=>yl,DPTModel:()=>wl,DPTPreTrainedModel:()=>ia,DebertaForMaskedLM:()=>j,DebertaForQuestionAnswering:()=>rt,DebertaForSequenceClassification:()=>ge,DebertaForTokenClassification:()=>Pe,DebertaModel:()=>lt,DebertaPreTrainedModel:()=>qr,DebertaV2ForMaskedLM:()=>gt,DebertaV2ForQuestionAnswering:()=>mt,DebertaV2ForSequenceClassification:()=>ft,DebertaV2ForTokenClassification:()=>St,DebertaV2Model:()=>nt,DebertaV2PreTrainedModel:()=>we,DecisionTransformerModel:()=>xu,DecisionTransformerPreTrainedModel:()=>vu,DeiTForImageClassification:()=>pl,DeiTModel:()=>cl,DeiTPreTrainedModel:()=>Zs,DepthAnythingForDepthEstimation:()=>Ml,DepthAnythingPreTrainedModel:()=>bl,DetrForObjectDetection:()=>il,DetrForSegmentation:()=>Ki,DetrModel:()=>sl,DetrObjectDetectionOutput:()=>Xi,DetrPreTrainedModel:()=>Ys,DetrSegmentationOutput:()=>al,Dinov2ForImageClassification:()=>ei,Dinov2Model:()=>ua,Dinov2PreTrainedModel:()=>an,DistilBertForMaskedLM:()=>et,DistilBertForQuestionAnswering:()=>be,DistilBertForSequenceClassification:()=>zt,DistilBertForTokenClassification:()=>Ut,DistilBertModel:()=>Lt,DistilBertPreTrainedModel:()=>It,DonutSwinModel:()=>kl,DonutSwinPreTrainedModel:()=>$l,EfficientNetForImageClassification:()=>fu,EfficientNetModel:()=>hu,EfficientNetPreTrainedModel:()=>xa,ElectraForMaskedLM:()=>Ke,ElectraForQuestionAnswering:()=>_t,ElectraForSequenceClassification:()=>xt,ElectraForTokenClassification:()=>Qe,ElectraModel:()=>Je,ElectraPreTrainedModel:()=>ce,EsmForMaskedLM:()=>$r,EsmForSequenceClassification:()=>Ur,EsmForTokenClassification:()=>vr,EsmModel:()=>Ht,EsmPreTrainedModel:()=>ot,FalconForCausalLM:()=>iu,FalconModel:()=>xd,FalconPreTrainedModel:()=>ba,FastViTForImageClassification:()=>qo,FastViTModel:()=>Go,FastViTPreTrainedModel:()=>Ui,Florence2ForConditionalGeneration:()=>wi,Florence2PreTrainedModel:()=>Ja,GLPNForDepthEstimation:()=>Cl,GLPNModel:()=>El,GLPNPreTrainedModel:()=>oa,GPT2LMHeadModel:()=>En,GPT2Model:()=>uo,GPT2PreTrainedModel:()=>bi,GPTBigCodeForCausalLM:()=>Ei,GPTBigCodeModel:()=>Qs,GPTBigCodePreTrainedModel:()=>Si,GPTJForCausalLM:()=>Cn,GPTJModel:()=>pd,GPTJPreTrainedModel:()=>Ti,GPTNeoForCausalLM:()=>fo,GPTNeoModel:()=>ho,GPTNeoPreTrainedModel:()=>vi,GPTNeoXForCausalLM:()=>_o,GPTNeoXModel:()=>mo,GPTNeoXPreTrainedModel:()=>xi,Gemma2ForCausalLM:()=>So,Gemma2Model:()=>To,Gemma2PreTrainedModel:()=>Pi,GemmaForCausalLM:()=>$n,GemmaModel:()=>xo,GemmaPreTrainedModel:()=>ki,GroupViTModel:()=>Wo,GroupViTPreTrainedModel:()=>Uo,HieraForImageClassification:()=>fl,HieraModel:()=>hl,HieraPreTrainedModel:()=>ea,HubertForCTC:()=>_a,HubertForSequenceClassification:()=>yd,HubertModel:()=>Hl,HubertPreTrainedModel:()=>wd,ImageMattingOutput:()=>nd,JAISLMHeadModel:()=>po,JAISModel:()=>co,JAISPreTrainedModel:()=>Mi,LlamaForCausalLM:()=>bo,LlamaModel:()=>yo,LlamaPreTrainedModel:()=>Ci,LlavaForConditionalGeneration:()=>fs,LlavaPreTrainedModel:()=>Za,LongT5ForConditionalGeneration:()=>Es,LongT5Model:()=>Ss,LongT5PreTrainedModel:()=>ps,M2M100ForConditionalGeneration:()=>Bl,M2M100Model:()=>Dl,M2M100PreTrainedModel:()=>Is,MBartForCausalLM:()=>wt,MBartForConditionalGeneration:()=>pe,MBartForSequenceClassification:()=>ze,MBartModel:()=>ie,MBartPreTrainedModel:()=>H,MPNetForMaskedLM:()=>ys,MPNetForQuestionAnswering:()=>vs,MPNetForSequenceClassification:()=>bs,MPNetForTokenClassification:()=>Ms,MPNetModel:()=>Hs,MPNetPreTrainedModel:()=>Bn,MT5ForConditionalGeneration:()=>Gr,MT5Model:()=>Cs,MT5PreTrainedModel:()=>hs,MarianMTModel:()=>ca,MarianModel:()=>zl,MarianPreTrainedModel:()=>As,MaskFormerForInstanceSegmentation:()=>Sl,MaskFormerModel:()=>md,MaskFormerPreTrainedModel:()=>aa,MaskedLMOutput:()=>on,MistralForCausalLM:()=>tu,MistralModel:()=>eu,MistralPreTrainedModel:()=>ya,MobileBertForMaskedLM:()=>Dn,MobileBertForQuestionAnswering:()=>Gn,MobileBertForSequenceClassification:()=>Wr,MobileBertModel:()=>Ar,MobileBertPreTrainedModel:()=>Pr,MobileNetV1ForImageClassification:()=>Ed,MobileNetV1Model:()=>gu,MobileNetV1PreTrainedModel:()=>Sa,MobileNetV2ForImageClassification:()=>Cd,MobileNetV2Model:()=>wu,MobileNetV2PreTrainedModel:()=>Ea,MobileNetV3ForImageClassification:()=>bu,MobileNetV3Model:()=>yu,MobileNetV3PreTrainedModel:()=>Ca,MobileNetV4ForImageClassification:()=>Mu,MobileNetV4Model:()=>$d,MobileNetV4PreTrainedModel:()=>$a,MobileViTForImageClassification:()=>Qo,MobileViTModel:()=>Xo,MobileViTPreTrainedModel:()=>Wi,MobileViTV2ForImageClassification:()=>Zo,MobileViTV2Model:()=>Yo,MobileViTV2PreTrainedModel:()=>Gi,ModelOutput:()=>qe,Moondream1ForConditionalGeneration:()=>sr,MptForCausalLM:()=>$s,MptModel:()=>Oo,MptPreTrainedModel:()=>Li,MusicgenForCausalLM:()=>_u,MusicgenForConditionalGeneration:()=>Ta,MusicgenModel:()=>Sd,MusicgenPreTrainedModel:()=>mu,NomicBertModel:()=>ke,NomicBertPreTrainedModel:()=>re,OPTForCausalLM:()=>Ni,OPTModel:()=>zo,OPTPreTrainedModel:()=>Ri,OpenELMForCausalLM:()=>Co,OpenELMModel:()=>Eo,OpenELMPreTrainedModel:()=>Ai,OwlViTForObjectDetection:()=>Jo,OwlViTModel:()=>ks,OwlViTPreTrainedModel:()=>qi,Owlv2ForObjectDetection:()=>tl,Owlv2Model:()=>el,Owlv2PreTrainedModel:()=>Ps,Phi3ForCausalLM:()=>Bi,Phi3Model:()=>Po,Phi3PreTrainedModel:()=>Di,PhiForCausalLM:()=>zi,PhiModel:()=>Oi,PhiPreTrainedModel:()=>Fi,PreTrainedModel:()=>Q,PretrainedMixin:()=>Ir,PvtForImageClassification:()=>Lo,PvtModel:()=>hd,PvtPreTrainedModel:()=>ji,PyAnnoteForAudioFrameClassification:()=>Vl,PyAnnoteModel:()=>Nl,PyAnnotePreTrainedModel:()=>ni,QuestionAnsweringModelOutput:()=>dn,Qwen2ForCausalLM:()=>ko,Qwen2Model:()=>$o,Qwen2PreTrainedModel:()=>Ii,RTDetrForObjectDetection:()=>ll,RTDetrModel:()=>ol,RTDetrObjectDetectionOutput:()=>ul,RTDetrPreTrainedModel:()=>Qi,ResNetForImageClassification:()=>ml,ResNetModel:()=>ra,ResNetPreTrainedModel:()=>ta,RoFormerForMaskedLM:()=>Ue,RoFormerForQuestionAnswering:()=>yt,RoFormerForSequenceClassification:()=>He,RoFormerForTokenClassification:()=>ct,RoFormerModel:()=>Ge,RoFormerPreTrainedModel:()=>je,RobertaForMaskedLM:()=>xn,RobertaForQuestionAnswering:()=>Tn,RobertaForSequenceClassification:()=>sn,RobertaForTokenClassification:()=>Fe,RobertaModel:()=>pr,RobertaPreTrainedModel:()=>Wt,SamImageSegmentationOutput:()=>Ol,SamModel:()=>da,SamPreTrainedModel:()=>ri,SapiensForDepthEstimation:()=>xl,SapiensForNormalEstimation:()=>Tl,SapiensForSemanticSegmentation:()=>vl,SapiensPreTrainedModel:()=>Js,SegformerForImageClassification:()=>du,SegformerForSemanticSegmentation:()=>cu,SegformerModel:()=>uu,SegformerPreTrainedModel:()=>ss,Seq2SeqLMOutput:()=>Nd,SequenceClassifierOutput:()=>ir,SiglipModel:()=>ro,SiglipPreTrainedModel:()=>rs,SiglipTextModel:()=>no,SiglipVisionModel:()=>so,SpeechT5ForSpeechToText:()=>Ql,SpeechT5ForTextToSpeech:()=>wa,SpeechT5HifiGan:()=>Yl,SpeechT5Model:()=>vd,SpeechT5PreTrainedModel:()=>li,SqueezeBertForMaskedLM:()=>us,SqueezeBertForQuestionAnswering:()=>Hn,SqueezeBertForSequenceClassification:()=>In,SqueezeBertModel:()=>Ks,SqueezeBertPreTrainedModel:()=>qn,StableLmForCausalLM:()=>va,StableLmModel:()=>pu,StableLmPreTrainedModel:()=>Ma,Starcoder2ForCausalLM:()=>su,Starcoder2Model:()=>nu,Starcoder2PreTrainedModel:()=>ru,Swin2SRForImageSuperResolution:()=>kn,Swin2SRModel:()=>gl,Swin2SRPreTrainedModel:()=>sa,SwinForImageClassification:()=>fd,SwinModel:()=>_l,SwinPreTrainedModel:()=>na,T5ForConditionalGeneration:()=>Ts,T5Model:()=>xs,T5PreTrainedModel:()=>es,TableTransformerForObjectDetection:()=>dl,TableTransformerModel:()=>Zi,TableTransformerObjectDetectionOutput:()=>Ji,TableTransformerPreTrainedModel:()=>Yi,TokenClassifierOutput:()=>tn,TrOCRForCausalLM:()=>Jl,TrOCRPreTrainedModel:()=>Zl,UniSpeechForCTC:()=>gd,UniSpeechForSequenceClassification:()=>ha,UniSpeechModel:()=>Ul,UniSpeechPreTrainedModel:()=>si,UniSpeechSatForAudioFrameClassification:()=>ii,UniSpeechSatForCTC:()=>Gl,UniSpeechSatForSequenceClassification:()=>ql,UniSpeechSatModel:()=>Wl,UniSpeechSatPreTrainedModel:()=>Os,ViTForImageClassification:()=>Bo,ViTMAEModel:()=>No,ViTMAEPreTrainedModel:()=>Ro,ViTMSNForImageClassification:()=>Sr,ViTMSNModel:()=>jo,ViTMSNPreTrainedModel:()=>Vo,ViTModel:()=>Do,ViTPreTrainedModel:()=>Vi,VisionEncoderDecoderModel:()=>gi,VitMatteForImageMatting:()=>Ko,VitMattePreTrainedModel:()=>Ho,VitsModel:()=>zs,VitsModelOutput:()=>Ua,VitsPreTrainedModel:()=>Td,Wav2Vec2BertForCTC:()=>fa,Wav2Vec2BertForSequenceClassification:()=>ma,Wav2Vec2BertModel:()=>oi,Wav2Vec2BertPreTrainedModel:()=>ai,Wav2Vec2ForAudioFrameClassification:()=>Rl,Wav2Vec2ForCTC:()=>pa,Wav2Vec2ForSequenceClassification:()=>Fs,Wav2Vec2Model:()=>Ll,Wav2Vec2PreTrainedModel:()=>ns,WavLMForAudioFrameClassification:()=>Md,WavLMForCTC:()=>bd,WavLMForSequenceClassification:()=>Xl,WavLMForXVector:()=>ga,WavLMModel:()=>Kl,WavLMPreTrainedModel:()=>ms,WeSpeakerResNetModel:()=>_d,WeSpeakerResNetPreTrainedModel:()=>jl,WhisperForConditionalGeneration:()=>_i,WhisperModel:()=>jt,WhisperPreTrainedModel:()=>Ze,XLMForQuestionAnswering:()=>un,XLMForSequenceClassification:()=>Xt,XLMForTokenClassification:()=>bn,XLMModel:()=>nn,XLMPreTrainedModel:()=>xr,XLMRobertaForMaskedLM:()=>At,XLMRobertaForQuestionAnswering:()=>Hr,XLMRobertaForSequenceClassification:()=>wr,XLMRobertaForTokenClassification:()=>Br,XLMRobertaModel:()=>Tr,XLMRobertaPreTrainedModel:()=>kr,XLMWithLMHeadModel:()=>yn,XVectorOutput:()=>ja,YolosForObjectDetection:()=>Il,YolosModel:()=>Al,YolosObjectDetectionOutput:()=>Fl,YolosPreTrainedModel:()=>ti});var z=R("./src/configs.js"),fe=R("./src/backends/onnx.js"),Me=R("./src/utils/dtypes.js"),$e=R("./src/utils/generic.js"),Te=R("./src/utils/core.js"),N=R("./src/utils/hub.js"),$=R("./src/generation/logits_process.js"),V=R("./src/generation/configuration_utils.js"),I=R("./src/utils/tensor.js"),Z=R("./src/utils/maths.js"),se=R("./src/generation/stopping_criteria.js"),le=R("./src/generation/logits_sampler.js"),me=R("./src/env.js"),B=R("./src/models/whisper/generation_whisper.js"),J=R("./src/models/whisper/common_whisper.js");const ne={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7},ae=new Map,X=new Map,L=new Map;async function A(f,m,E){let K=E.device;K&&typeof K!="string"&&(K.hasOwnProperty(m)?K=K[m]:(console.warn(`device not specified for "${m}". Using the default device.`),K=null));const Be=K??(me.apis.IS_NODE_ENV?"cpu":"wasm"),Le=(0,fe.deviceToExecutionProviders)(Be);let ut=E.dtype;typeof ut!="string"&&(ut&&ut.hasOwnProperty(m)?ut=ut[m]:(ut=Me.DEFAULT_DEVICE_DTYPE_MAPPING[Be]??Me.DATA_TYPES.fp32,console.warn(`dtype not specified for "${m}". Using the default dtype (${ut}) for this device (${Be}).`)));const kt=ut;if(Me.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(kt)){if(kt===Me.DATA_TYPES.fp16&&Be==="webgpu"&&!await(0,Me.isWebGpuFp16Supported)())throw new Error(`The device (${Be}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${kt}. Should be one of: ${Object.keys(Me.DATA_TYPES).join(", ")}`);const Gt=Me.DEFAULT_DTYPE_SUFFIX_MAPPING[kt],or=`${E.subfolder??""}/${m}${Gt}.onnx`,hr={...E.session_options};hr.executionProviders??(hr.executionProviders=Le);const zr=(0,N.getModelFile)(f,or,!0,E);let dr=[];if(E.use_external_data_format&&(E.use_external_data_format===!0||typeof E.use_external_data_format=="object"&&E.use_external_data_format.hasOwnProperty(m)&&E.use_external_data_format[m]===!0)){if(me.apis.IS_NODE_ENV)throw new Error("External data format is not yet supported in Node.js");const cr=`${m}${Gt}.onnx_data`,mr=`${E.subfolder??""}/${cr}`;dr.push(new Promise(async(br,Vr)=>{const mn=await(0,N.getModelFile)(f,mr,!0,E);br({path:cr,data:mn})}))}else hr.externalData!==void 0&&(dr=hr.externalData.map(async cr=>{if(typeof cr.data=="string"){const mr=await(0,N.getModelFile)(f,cr.data,!0,E);return{...cr,data:mr}}return cr}));if(dr.length>0&&(hr.externalData=await Promise.all(dr)),Be==="webgpu"){const cr=(0,z.getKeyValueShapes)(E.config,{prefix:"present"});if(Object.keys(cr).length>0&&!(0,fe.isONNXProxy)()){const mr={};for(const br in cr)mr[br]="gpu-buffer";hr.preferredOutputLocation=mr}}return{buffer:await zr,session_options:hr}}async function D(f,m,E){return Object.fromEntries(await Promise.all(Object.keys(m).map(async K=>{const{buffer:Be,session_options:Le}=await A(f,m[K],E),ut=await(0,fe.createInferenceSession)(Be,Le);return[K,ut]})))}function k(f,m){const E=Object.create(null),K=[];for(const ut of f.inputNames){const kt=m[ut];if(!(kt instanceof I.Tensor)){K.push(ut);continue}E[ut]=(0,fe.isONNXProxy)()?kt.clone():kt}if(K.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${K.join(", ")}.`);const Be=Object.keys(m).length,Le=f.inputNames.length;if(Be>Le){let ut=Object.keys(m).filter(kt=>!f.inputNames.includes(kt));console.warn(`WARNING: Too many inputs were provided (${Be} > ${Le}). The following inputs will be ignored: "${ut.join(", ")}".`)}return E}async function de(f,m){const E=k(f,m);try{const K=Object.fromEntries(Object.entries(E).map(([Le,ut])=>[Le,ut.ort_tensor]));let Be=await f.run(K);return Be=ve(Be),Be}catch(K){throw console.error(`An error occurred during model execution: "${K}".`),console.error("Inputs given to model:",E),K}}function ve(f){for(let m in f)(0,fe.isONNXTensor)(f[m])?f[m]=new I.Tensor(f[m]):typeof f[m]=="object"&&ve(f[m]);return f}function Ee(f){if(f instanceof I.Tensor)return f;if(f.length===0)throw Error("items must be non-empty");if(Array.isArray(f[0])){if(f.some(m=>m.length!==f[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new I.Tensor("int64",BigInt64Array.from(f.flat().map(m=>BigInt(m))),[f.length,f[0].length])}else return new I.Tensor("int64",BigInt64Array.from(f.map(m=>BigInt(m))),[1,f.length])}function Ie(f){return new I.Tensor("bool",[f],[1])}async function Ae(f,m){let{encoder_outputs:E,input_ids:K,decoder_input_ids:Be,...Le}=m;if(!E){const kt=(0,Te.pick)(m,f.sessions.model.inputNames);E=(await tt(f,kt)).last_hidden_state}return Le.input_ids=Be,Le.encoder_hidden_states=E,f.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(Le.encoder_attention_mask=m.attention_mask),await Ye(f,Le,!0)}async function tt(f,m){const E=f.sessions.model,K=(0,Te.pick)(m,E.inputNames);if(E.inputNames.includes("inputs_embeds")&&!K.inputs_embeds){if(!m.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");K.inputs_embeds=await f.encode_text({input_ids:m.input_ids})}return E.inputNames.includes("token_type_ids")&&!K.token_type_ids&&(K.token_type_ids=new I.Tensor("int64",new BigInt64Array(K.input_ids.data.length),K.input_ids.dims)),await de(E,K)}async function Ye(f,m,E=!1){const K=f.sessions[E?"decoder_model_merged":"model"],{past_key_values:Be,...Le}=m;K.inputNames.includes("use_cache_branch")&&(Le.use_cache_branch=Ie(!!Be)),K.inputNames.includes("position_ids")&&Le.attention_mask&&!Le.position_ids&&(Le.position_ids=_e(Le,Be)),f.addPastKeyValues(Le,Be);const ut=(0,Te.pick)(Le,K.inputNames);return await de(K,ut)}async function pt(f,{input_ids:m=null,attention_mask:E=null,pixel_values:K=null,position_ids:Be=null,inputs_embeds:Le=null,past_key_values:ut=null,generation_config:kt=null,logits_processor:Gt=null,...or}){if(!Le){if(Le=await f.encode_text({input_ids:m}),K&&m.dims[1]!==1){const zr=await f.encode_image({pixel_values:K});({inputs_embeds:Le,attention_mask:E}=f._merge_input_ids_with_image_features({image_features:zr,inputs_embeds:Le,input_ids:m,attention_mask:E}))}else if(ut&&K&&m.dims[1]===1){const zr=m.dims[1],dr=Object.values(ut)[0].dims.at(-2);E=(0,I.cat)([(0,I.ones)([m.dims[0],dr]),E.slice(null,[E.dims[1]-zr,E.dims[1]])],1)}}return await Ye(f,{inputs_embeds:Le,past_key_values:ut,attention_mask:E,position_ids:Be,generation_config:kt,logits_processor:Gt},!0)}function _e(f,m=null){const{input_ids:E,inputs_embeds:K,attention_mask:Be}=f,[Le,ut]=Be.dims,kt=new BigInt64Array(Be.data.length);for(let or=0;or<Le;++or){const hr=or*ut;let zr=BigInt(0);for(let dr=0;dr<ut;++dr){const yr=hr+dr;Be.data[yr]===0n?kt[yr]=BigInt(1):(kt[yr]=zr,zr+=Be.data[yr])}}let Gt=new I.Tensor("int64",kt,Be.dims);if(m){const or=-(E??K).dims.at(1);Gt=Gt.slice(null,[or,null])}return Gt}function U(f,m,E,K){if(E.past_key_values){const Be=Object.values(E.past_key_values)[0].dims.at(-2),{input_ids:Le,attention_mask:ut}=E;if(!(ut&&ut.dims[1]>Le.dims[1])){if(Be<Le.dims[1])E.input_ids=Le.slice(null,[Be,null]);else if(f.config.image_token_index!=null&&Le.data.some(kt=>kt==f.config.image_token_index)){const kt=f.config.num_image_tokens;if(!kt)throw new Error("`num_image_tokens` is missing in the model configuration.");const Gt=Le.dims[1]-(Be-kt);E.input_ids=Le.slice(null,[-Gt,null]),E.attention_mask=(0,I.ones)([1,Be+Gt])}}}return E}function ue(f,m,E,K){return E.past_key_values&&(m=m.map(Be=>[Be.at(-1)])),{...E,decoder_input_ids:Ee(m)}}function Ce(f,...m){return f.config.is_encoder_decoder?ue(f,...m):U(f,...m)}class Q extends $e.Callable{constructor(E,K){super();xe(this,"main_input_name","input_ids");xe(this,"forward_params",["input_ids","attention_mask"]);this.config=E,this.sessions=K;const Be=L.get(this.constructor),Le=ae.get(Be);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,Le){case ne.DecoderOnly:this.can_generate=!0,this._forward=Ye,this._prepare_inputs_for_generation=U;break;case ne.Seq2Seq:case ne.Vision2Seq:case ne.Musicgen:this.can_generate=!0,this._forward=Ae,this._prepare_inputs_for_generation=ue;break;case ne.EncoderDecoder:this._forward=Ae;break;case ne.ImageTextToText:this.can_generate=!0,this._forward=pt,this._prepare_inputs_for_generation=Ce;break;default:this._forward=tt;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const E=[];for(const K of Object.values(this.sessions))K?.handler?.dispose&&E.push(K.handler.dispose());return await Promise.all(E)}static async from_pretrained(E,{progress_callback:K=null,config:Be=null,cache_dir:Le=null,local_files_only:ut=!1,revision:kt="main",model_file_name:Gt=null,subfolder:or="onnx",device:hr=null,dtype:zr=null,use_external_data_format:dr=null,session_options:yr={}}={}){let cr={progress_callback:K,config:Be,cache_dir:Le,local_files_only:ut,revision:kt,model_file_name:Gt,subfolder:or,device:hr,dtype:zr,use_external_data_format:dr,session_options:yr};const mr=L.get(this),br=ae.get(mr);Be=cr.config=await z.AutoConfig.from_pretrained(E,cr);let Vr;if(br===ne.DecoderOnly)Vr=await Promise.all([D(E,{model:cr.model_file_name??"model"},cr),(0,N.getModelJSON)(E,"generation_config.json",!1,cr)]);else if(br===ne.Seq2Seq||br===ne.Vision2Seq)Vr=await Promise.all([D(E,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},cr),(0,N.getModelJSON)(E,"generation_config.json",!1,cr)]);else if(br===ne.MaskGeneration)Vr=await Promise.all([D(E,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},cr)]);else if(br===ne.EncoderDecoder)Vr=await Promise.all([D(E,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},cr)]);else if(br===ne.ImageTextToText){const mn={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};Be.is_encoder_decoder&&(mn.model="encoder_model"),Vr=await Promise.all([D(E,mn,cr),(0,N.getModelJSON)(E,"generation_config.json",!1,cr)])}else br===ne.Musicgen?Vr=await Promise.all([D(E,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},cr),(0,N.getModelJSON)(E,"generation_config.json",!1,cr)]):(br!==ne.EncoderOnly&&console.warn(`Model type for '${mr??Be?.model_type}' not found, assuming encoder-only architecture. Please report this at http://github.com/xenova/transformers.js/issues/new/choose.`),Vr=await Promise.all([D(E,{model:cr.model_file_name??"model"},cr)]));return new this(Be,...Vr)}async _call(E){return await this.forward(E)}async forward(E){return await this._forward(this,E)}_get_logits_warper(E){const K=new $.LogitsProcessorList;return E.temperature!==null&&E.temperature!==1&&K.push(new $.TemperatureLogitsWarper(E.temperature)),E.top_k!==null&&E.top_k!==0&&K.push(new $.TopKLogitsWarper(E.top_k)),E.top_p!==null&&E.top_p<1&&K.push(new $.TopPLogitsWarper(E.top_p)),K}_get_logits_processor(E,K,Be=null){const Le=new $.LogitsProcessorList;if(E.repetition_penalty!==null&&E.repetition_penalty!==1&&Le.push(new $.RepetitionPenaltyLogitsProcessor(E.repetition_penalty)),E.no_repeat_ngram_size!==null&&E.no_repeat_ngram_size>0&&Le.push(new $.NoRepeatNGramLogitsProcessor(E.no_repeat_ngram_size)),E.bad_words_ids!==null&&Le.push(new $.NoBadWordsLogitsProcessor(E.bad_words_ids,E.eos_token_id)),E.min_length!==null&&E.eos_token_id!==null&&E.min_length>0&&Le.push(new $.MinLengthLogitsProcessor(E.min_length,E.eos_token_id)),E.min_new_tokens!==null&&E.eos_token_id!==null&&E.min_new_tokens>0&&Le.push(new $.MinNewTokensLengthLogitsProcessor(K,E.min_new_tokens,E.eos_token_id)),E.forced_bos_token_id!==null&&Le.push(new $.ForcedBOSTokenLogitsProcessor(E.forced_bos_token_id)),E.forced_eos_token_id!==null&&Le.push(new $.ForcedEOSTokenLogitsProcessor(E.max_length,E.forced_eos_token_id)),E.begin_suppress_tokens!==null){const ut=K>1||E.forced_bos_token_id===null?K:K+1;Le.push(new $.SuppressTokensAtBeginLogitsProcessor(E.begin_suppress_tokens,ut))}return E.guidance_scale!==null&&E.guidance_scale>1&&Le.push(new $.ClassifierFreeGuidanceLogitsProcessor(E.guidance_scale)),Be!==null&&Le.extend(Be),Le}_prepare_generation_config(E,K,Be=V.GenerationConfig){const Le={...this.config};for(const kt of["decoder","generator","text_config"])kt in Le&&Object.assign(Le,Le[kt]);const ut=new Be(Le);return"generation_config"in this&&Object.assign(ut,this.generation_config),E&&Object.assign(ut,E),K&&Object.assign(ut,(0,Te.pick)(K,Object.getOwnPropertyNames(ut))),ut}_get_stopping_criteria(E,K=null){const Be=new se.StoppingCriteriaList;return E.max_length!==null&&Be.push(new se.MaxLengthCriteria(E.max_length,this.config.max_position_embeddings??null)),E.eos_token_id!==null&&Be.push(new se.EosTokenCriteria(E.eos_token_id)),K&&Be.extend(K),Be}_validate_model_class(){if(!this.can_generate){const E=[Aa,Ia,Pa,ka],K=L.get(this.constructor),Be=new Set,Le=this.config.model_type;for(const kt of E){const Gt=kt.get(Le);Gt&&Be.add(Gt[0])}let ut=`The current model class (${K}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw Be.size>0&&(ut+=` Please use the following class instead: ${[...Be].join(", ")}`),Error(ut)}}prepare_inputs_for_generation(...E){return this._prepare_inputs_for_generation(this,...E)}_update_model_kwargs_for_generation({generated_input_ids:E,outputs:K,model_inputs:Be,is_encoder_decoder:Le}){return Be.past_key_values=this.getPastKeyValues(K,Be.past_key_values),Be.input_ids=new I.Tensor("int64",E.flat(),[E.length,1]),Le||(Be.attention_mask=(0,I.cat)([Be.attention_mask,(0,I.ones)([Be.attention_mask.dims[0],1])],1)),Be.position_ids=null,Be}_prepare_model_inputs({inputs:E,bos_token_id:K,model_kwargs:Be}){const Le=(0,Te.pick)(Be,this.forward_params),ut=this.main_input_name;if(ut in Le){if(E)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else Le[ut]=E;return{inputs_tensor:Le[ut],model_inputs:Le,model_input_name:ut}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:E,model_inputs:K,model_input_name:Be,generation_config:Le}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!K.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:kt,pixel_values:Gt,attention_mask:or,...hr}=K,zr=await this._prepare_inputs_embeds(K);K={...hr,...(0,Te.pick)(zr,["inputs_embeds","attention_mask"])}}let{last_hidden_state:ut}=await tt(this,K);if(Le.guidance_scale!==null&&Le.guidance_scale>1)ut=(0,I.cat)([ut,(0,I.full_like)(ut,0)],0),"attention_mask"in K&&(K.attention_mask=(0,I.cat)([K.attention_mask,(0,I.zeros_like)(K.attention_mask)],0));else if(K.decoder_input_ids){const kt=Ee(K.decoder_input_ids).dims[0];if(kt!==ut.dims[0]){if(ut.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${ut.dims[0]}) than the decoder inputs (${kt}).`);ut=(0,I.cat)(Array.from({length:kt},()=>ut),0)}}return K.encoder_outputs=ut,K}_prepare_decoder_input_ids_for_generation({batch_size:E,model_input_name:K,model_kwargs:Be,decoder_start_token_id:Le,bos_token_id:ut,generation_config:kt}){let{decoder_input_ids:Gt,...or}=Be;if(Gt)Array.isArray(Gt[0])||(Gt=Array.from({length:E},()=>Gt));else if(Le??(Le=ut),this.config.model_type==="musicgen")Gt=Array.from({length:E*this.config.decoder.num_codebooks},()=>[Le]);else if(Array.isArray(Le)){if(Le.length!==E)throw new Error(`\`decoder_start_token_id\` expcted to have length ${E} but got ${Le.length}`);Gt=Le}else Gt=Array.from({length:E},()=>[Le]);return Gt=Ee(Gt),Be.decoder_attention_mask=(0,I.ones_like)(Gt),{input_ids:Gt,model_inputs:or}}async generate({inputs:E=null,generation_config:K=null,logits_processor:Be=null,stopping_criteria:Le=null,streamer:ut=null,...kt}){this._validate_model_class(),K=this._prepare_generation_config(K,kt);let{inputs_tensor:Gt,model_inputs:or,model_input_name:hr}=this._prepare_model_inputs({inputs:E,model_kwargs:kt});const zr=this.config.is_encoder_decoder;zr&&("encoder_outputs"in or||(or=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:Gt,model_inputs:or,model_input_name:hr,generation_config:K})));let dr;zr?{input_ids:dr,model_inputs:or}=this._prepare_decoder_input_ids_for_generation({batch_size:or[hr].dims.at(0),model_input_name:hr,model_kwargs:or,decoder_start_token_id:K.decoder_start_token_id,bos_token_id:K.bos_token_id,generation_config:K}):dr=or[hr];let yr=dr.dims.at(-1);K.max_new_tokens!==null&&(K.max_length=yr+K.max_new_tokens);const cr=this._get_logits_processor(K,yr,Be),mr=this._get_stopping_criteria(K,Le),br=or[hr].dims.at(0),Vr=le.LogitsSampler.getSampler(K),mn=new Array(br).fill(0),_n=dr.tolist();ut&&ut.put(_n);let Nn=null,hn={};for(;;){or=this.prepare_inputs_for_generation(_n,or,K);const cn=await this.forward(or);if(K.output_attentions&&K.return_dict_in_generate){const On=this.getAttentions(cn);for(const _s in On)_s in hn||(hn[_s]=[]),hn[_s].push(On[_s])}const Wa=cn.logits.slice(null,-1,null),Ls=cr(_n,Wa),Ga=[];for(let On=0;On<Ls.dims.at(0);++On){const _s=Ls[On],jd=await Vr(_s);for(const[Ud,Wd]of jd){const Gd=BigInt(Ud);mn[On]+=Wd,_n[On].push(Gd),Ga.push([Gd]);break}}if(ut&&ut.put(Ga),mr(_n).every(On=>On)){K.return_dict_in_generate&&(Nn=this.getPastKeyValues(cn,or.past_key_values,!1));break}or=this._update_model_kwargs_for_generation({generated_input_ids:Ga,outputs:cn,model_inputs:or,is_encoder_decoder:zr})}ut&&ut.end();const rn=new I.Tensor("int64",_n.flat(),[_n.length,_n[0].length]);return K.return_dict_in_generate?{sequences:rn,past_key_values:Nn,...hn}:rn}getPastKeyValues(E,K,Be=!0){const Le=Object.create(null);for(const ut in E)if(ut.startsWith("present")){const kt=ut.replace("present","past_key_values");if(K&&ut.includes("encoder"))Le[kt]=K[kt];else{if(Be&&K){const Gt=K[kt];Gt.location==="gpu-buffer"&&Gt.dispose()}Le[kt]=E[ut]}}return Le}getAttentions(E){const K={};for(const Be of["cross_attentions","encoder_attentions","decoder_attentions"])for(const Le in E)Le.startsWith(Be)&&(Be in K||(K[Be]=[]),K[Be].push(E[Le]));return K}addPastKeyValues(E,K){if(K)Object.assign(E,K);else{const Be=this.custom_config.kv_cache_dtype??"float32",Le=Be==="float16"?new Uint16Array:[],ut=(0,z.getKeyValueShapes)(this.config);for(const kt in ut)E[kt]=new I.Tensor(Be,Le,ut[kt])}}async encode_image({pixel_values:E}){const K=(await de(this.sessions.vision_encoder,{pixel_values:E})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${K.dims[1]}).`),this.config.num_image_tokens=K.dims[1]),K}async encode_text({input_ids:E}){return(await de(this.sessions.embed_tokens,{input_ids:E})).inputs_embeds}}class qe{}class ht extends qe{constructor({last_hidden_state:m,hidden_states:E=null,attentions:K=null}){super(),this.last_hidden_state=m,this.hidden_states=E,this.attentions=K}}class st extends Q{}class dt extends st{}class Re extends st{async _call(m){return new on(await super._call(m))}}class at extends st{async _call(m){return new ir(await super._call(m))}}class $t extends st{async _call(m){return new tn(await super._call(m))}}class De extends st{async _call(m){return new dn(await super._call(m))}}class re extends Q{}class ke extends re{}class je extends Q{}class Ge extends je{}class Ue extends je{async _call(m){return new on(await super._call(m))}}class He extends je{async _call(m){return new ir(await super._call(m))}}class ct extends je{async _call(m){return new tn(await super._call(m))}}class yt extends je{async _call(m){return new dn(await super._call(m))}}class Mt extends Q{}class Et extends Mt{}class x extends Mt{async _call(m){return new on(await super._call(m))}}class G extends Mt{async _call(m){return new ir(await super._call(m))}}class C extends Mt{async _call(m){return new tn(await super._call(m))}}class Y extends Mt{async _call(m){return new dn(await super._call(m))}}class ce extends Q{}class Je extends ce{}class Ke extends ce{async _call(m){return new on(await super._call(m))}}class xt extends ce{async _call(m){return new ir(await super._call(m))}}class Qe extends ce{async _call(m){return new tn(await super._call(m))}}class _t extends ce{async _call(m){return new dn(await super._call(m))}}class Bt extends Q{}class tr extends Bt{}class jr extends Bt{async _call(m){return new on(await super._call(m))}}class Cr extends Bt{async _call(m){return new ir(await super._call(m))}}class Zr extends Bt{async _call(m){return new tn(await super._call(m))}}class Dr extends Bt{async _call(m){return new dn(await super._call(m))}}class qr extends Q{}class lt extends qr{}class j extends qr{async _call(m){return new on(await super._call(m))}}class ge extends qr{async _call(m){return new ir(await super._call(m))}}class Pe extends qr{async _call(m){return new tn(await super._call(m))}}class rt extends qr{async _call(m){return new dn(await super._call(m))}}class we extends Q{}class nt extends we{}class gt extends we{async _call(m){return new on(await super._call(m))}}class ft extends we{async _call(m){return new ir(await super._call(m))}}class St extends we{async _call(m){return new tn(await super._call(m))}}class mt extends we{async _call(m){return new dn(await super._call(m))}}class It extends Q{}class Lt extends It{}class zt extends It{async _call(m){return new ir(await super._call(m))}}class Ut extends It{async _call(m){return new tn(await super._call(m))}}class be extends It{async _call(m){return new dn(await super._call(m))}}class et extends It{async _call(m){return new on(await super._call(m))}}class ot extends Q{}class Ht extends ot{}class $r extends ot{async _call(m){return new on(await super._call(m))}}class Ur extends ot{async _call(m){return new ir(await super._call(m))}}class vr extends ot{async _call(m){return new tn(await super._call(m))}}class Pr extends Q{}class Ar extends Pr{}class Dn extends Pr{async _call(m){return new on(await super._call(m))}}class Wr extends Pr{async _call(m){return new ir(await super._call(m))}}class Gn extends Pr{async _call(m){return new dn(await super._call(m))}}class Bn extends Q{}class Hs extends Bn{}class ys extends Bn{async _call(m){return new on(await super._call(m))}}class bs extends Bn{async _call(m){return new ir(await super._call(m))}}class Ms extends Bn{async _call(m){return new tn(await super._call(m))}}class vs extends Bn{async _call(m){return new dn(await super._call(m))}}class qn extends Q{}class Ks extends qn{}class us extends qn{async _call(m){return new on(await super._call(m))}}class In extends qn{async _call(m){return new ir(await super._call(m))}}class Hn extends qn{async _call(m){return new dn(await super._call(m))}}class Ln extends Q{}class Jn extends Ln{}class ds extends Ln{async _call(m){return new ir(await super._call(m))}}class cs extends Ln{async _call(m){return new dn(await super._call(m))}}class Kt extends Ln{async _call(m){return new on(await super._call(m))}}class es extends Q{constructor(E,K,Be){super(E,K);xe(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]);this.generation_config=Be}}class xs extends es{}class Ts extends es{}class ps extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Ss extends ps{}class Es extends ps{}class hs extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Cs extends hs{}class Gr extends hs{}class wn extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class ye extends wn{}class _ extends wn{}class P extends wn{async _call(m){return new ir(await super._call(m))}}class H extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class ie extends H{}class pe extends H{}class ze extends H{async _call(m){return new ir(await super._call(m))}}class wt extends H{}class Tt extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class vt extends Tt{}class Ot extends Tt{}class Jt extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Rr extends Jt{}class nr extends Jt{}class Wt extends Q{}class pr extends Wt{}class xn extends Wt{async _call(m){return new on(await super._call(m))}}class sn extends Wt{async _call(m){return new ir(await super._call(m))}}class Fe extends Wt{async _call(m){return new tn(await super._call(m))}}class Tn extends Wt{async _call(m){return new dn(await super._call(m))}}class xr extends Q{}class nn extends xr{}class yn extends xr{async _call(m){return new on(await super._call(m))}}class Xt extends xr{async _call(m){return new ir(await super._call(m))}}class bn extends xr{async _call(m){return new tn(await super._call(m))}}class un extends xr{async _call(m){return new dn(await super._call(m))}}class kr extends Q{}class Tr extends kr{}class At extends kr{async _call(m){return new on(await super._call(m))}}class wr extends kr{async _call(m){return new ir(await super._call(m))}}class Br extends kr{async _call(m){return new tn(await super._call(m))}}class Hr extends kr{async _call(m){return new dn(await super._call(m))}}class Mn extends Q{}class Nt extends Mn{}class Xs extends Mn{}class Ze extends Q{constructor(E,K,Be){super(E,K);xe(this,"requires_attention_mask",!1);xe(this,"main_input_name","input_features");xe(this,"forward_params",["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]);this.generation_config=Be}}class jt extends Ze{}class _i extends Ze{_prepare_generation_config(m,E){return super._prepare_generation_config(m,E,B.WhisperGenerationConfig)}_retrieve_init_tokens(m){const E=[m.decoder_start_token_id];let K=m.language;const Be=m.task;if(m.is_multilingual){K||(console.warn("No language specified - defaulting to English (en)."),K="en");const ut=`<|${(0,J.whisper_language_to_code)(K)}|>`;E.push(m.lang_to_id[ut]),E.push(m.task_to_id[Be??"transcribe"])}else if(K||Be)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!m.return_timestamps&&m.no_timestamps_token_id&&E.at(-1)!==m.no_timestamps_token_id?E.push(m.no_timestamps_token_id):m.return_timestamps&&E.at(-1)===m.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),E.pop()),E.filter(Le=>Le!=null)}async generate({inputs:m=null,generation_config:E=null,logits_processor:K=null,stopping_criteria:Be=null,...Le}){E=this._prepare_generation_config(E,Le);const ut=Le.decoder_input_ids??this._retrieve_init_tokens(E);if(E.return_timestamps&&(K??(K=new $.LogitsProcessorList),K.push(new $.WhisperTimeStampLogitsProcessor(E,ut))),E.begin_suppress_tokens&&(K??(K=new $.LogitsProcessorList),K.push(new $.SuppressTokensAtBeginLogitsProcessor(E.begin_suppress_tokens,ut.length))),E.return_token_timestamps){if(!E.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See http://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");E.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),E.output_attentions=!0,E.return_dict_in_generate=!0}const kt=await super.generate({inputs:m,generation_config:E,logits_processor:K,decoder_input_ids:ut,...Le});return E.return_token_timestamps&&(kt.token_timestamps=this._extract_token_timestamps(kt,E.alignment_heads,E.num_frames)),kt}_extract_token_timestamps(m,E,K=null,Be=.02){if(!m.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");K==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let Le=this.config.median_filter_width;Le===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),Le=7);const ut=m.cross_attentions,kt=Array.from({length:this.config.decoder_layers},(mr,br)=>(0,I.cat)(ut.map(Vr=>Vr[br]),2)),Gt=(0,I.stack)(E.map(([mr,br])=>{if(mr>=kt.length)throw new Error(`Layer index ${mr} is out of bounds for cross attentions (length ${kt.length}).`);return K?kt[mr].slice(null,br,null,[0,K]):kt[mr].slice(null,br)})).transpose(1,0,2,3),[or,hr]=(0,I.std_mean)(Gt,-2,0,!0),zr=Gt.clone();for(let mr=0;mr<zr.dims[0];++mr){const br=zr[mr];for(let Vr=0;Vr<br.dims[0];++Vr){const mn=br[Vr],_n=or[mr][Vr][0].data,Nn=hr[mr][Vr][0].data;for(let hn=0;hn<mn.dims[0];++hn){let rn=mn[hn].data;for(let cn=0;cn<rn.length;++cn)rn[cn]=(rn[cn]-Nn[cn])/_n[cn];rn.set((0,Z.medianFilter)(rn,Le))}}}const dr=[(0,I.mean)(zr,1)],yr=m.sequences.dims,cr=new I.Tensor("float32",new Float32Array(yr[0]*yr[1]),yr);for(let mr=0;mr<yr[0];++mr){const br=dr[mr].neg().squeeze_(0),[Vr,mn]=(0,Z.dynamic_time_warping)(br.tolist()),_n=Array.from({length:Vr.length-1},(rn,cn)=>Vr[cn+1]-Vr[cn]),Nn=(0,Te.mergeArrays)([1],_n).map(rn=>!!rn),hn=[];for(let rn=0;rn<Nn.length;++rn)Nn[rn]&&hn.push(mn[rn]*Be);cr[mr].data.set(hn,1)}return cr}}class gi extends Q{constructor(E,K,Be){super(E,K);xe(this,"main_input_name","pixel_values");xe(this,"forward_params",["pixel_values","input_ids","encoder_hidden_states","past_key_values"]);this.generation_config=Be}}class Za extends Q{constructor(E,K,Be){super(E,K);xe(this,"forward_params",["input_ids","pixel_values","attention_mask","position_ids","past_key_values"]);this.generation_config=Be}}class fs extends Za{_merge_input_ids_with_image_features({inputs_embeds:m,image_features:E,input_ids:K,attention_mask:Be}){const Le=this.config.image_token_index,kt=K.tolist().map(dr=>dr.findIndex(yr=>yr==Le)),Gt=kt.every(dr=>dr===-1),or=kt.every(dr=>dr!==-1);if(!Gt&&!or)throw new Error("Every input should contain either 0 or 1 image token.");if(Gt)return{inputs_embeds:m,attention_mask:Be};const hr=[],zr=[];for(let dr=0;dr<kt.length;++dr){const yr=kt[dr],cr=m[dr],mr=E[dr],br=Be[dr];hr.push((0,I.cat)([cr.slice([0,yr]),mr,cr.slice([yr+1,cr.dims[0]])],0)),zr.push((0,I.cat)([br.slice([0,yr]),(0,I.ones)([mr.dims[0]]),br.slice([yr+1,br.dims[0]])],0))}return{inputs_embeds:(0,I.stack)(hr,0),attention_mask:(0,I.stack)(zr,0)}}}class sr extends fs{}class Ja extends Q{constructor(E,K,Be){super(E,K);xe(this,"forward_params",["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"]);xe(this,"main_input_name","inputs_embeds");this.generation_config=Be}}class wi extends Ja{_merge_input_ids_with_image_features({inputs_embeds:m,image_features:E,input_ids:K,attention_mask:Be}){return{inputs_embeds:(0,I.cat)([E,m],1),attention_mask:(0,I.cat)([(0,I.ones)(E.dims.slice(0,2)),Be],1)}}async _prepare_inputs_embeds({input_ids:m,pixel_values:E,inputs_embeds:K,attention_mask:Be}){if(!m&&!E)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let Le,ut;return m&&(Le=await this.encode_text({input_ids:m})),E&&(ut=await this.encode_image({pixel_values:E})),Le&&ut?{inputs_embeds:K,attention_mask:Be}=this._merge_input_ids_with_image_features({inputs_embeds:Le,image_features:ut,input_ids:m,attention_mask:Be}):K=Le||ut,{inputs_embeds:K,attention_mask:Be}}async forward({input_ids:m,pixel_values:E,attention_mask:K,decoder_input_ids:Be,decoder_attention_mask:Le,encoder_outputs:ut,past_key_values:kt,inputs_embeds:Gt,decoder_inputs_embeds:or}){if(Gt||({inputs_embeds:Gt,attention_mask:K}=await this._prepare_inputs_embeds({input_ids:m,pixel_values:E,inputs_embeds:Gt,attention_mask:K})),!ut){let{last_hidden_state:dr}=await tt(this,{inputs_embeds:Gt,attention_mask:K});ut=dr}if(!or){if(!Be)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");or=await this.encode_text({input_ids:Be})}return await Ye(this,{inputs_embeds:or,attention_mask:Le,encoder_attention_mask:K,encoder_hidden_states:ut,past_key_values:kt},!0)}}class ts extends Q{}class eo extends ts{}class dd extends ts{static async from_pretrained(m,E={}){return E.model_file_name??(E.model_file_name="text_model"),super.from_pretrained(m,E)}}class Fn extends ts{static async from_pretrained(m,E={}){return E.model_file_name??(E.model_file_name="text_model"),super.from_pretrained(m,E)}}class cd extends ts{static async from_pretrained(m,E={}){return E.model_file_name??(E.model_file_name="vision_model"),super.from_pretrained(m,E)}}class to extends ts{static async from_pretrained(m,E={}){return E.model_file_name??(E.model_file_name="vision_model"),super.from_pretrained(m,E)}}class rs extends Q{}class ro extends rs{}class no extends rs{static async from_pretrained(m,E={}){return E.model_file_name??(E.model_file_name="text_model"),super.from_pretrained(m,E)}}class so extends ts{static async from_pretrained(m,E={}){return E.model_file_name??(E.model_file_name="vision_model"),super.from_pretrained(m,E)}}class io extends Q{}class ao extends io{}class yi extends Q{}class oo extends yi{}class lo extends yi{}class bi extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class uo extends bi{}class En extends bi{}class Mi extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class co extends Mi{}class po extends Mi{}class vi extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class ho extends vi{}class fo extends vi{}class xi extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class mo extends xi{}class _o extends xi{}class Ti extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class pd extends Ti{}class Cn extends Ti{}class Si extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Qs extends Si{}class Ei extends Si{}class Sn extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class go extends Sn{}class wo extends Sn{}class Ci extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class yo extends Ci{}class bo extends Ci{}class $i extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Mo extends $i{}class vo extends $i{}class ki extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class xo extends ki{}class $n extends ki{}class Pi extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class To extends Pi{}class So extends Pi{}class Ai extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Eo extends Ai{}class Co extends Ai{}class Ii extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class $o extends Ii{}class ko extends Ii{}class Fi extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Oi extends Fi{}class zi extends Fi{}class Di extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Po extends Di{}class Bi extends Di{}class Ao extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Io extends Ao{}class Fo extends Ao{}class Li extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Oo extends Li{}class $s extends Li{}class Ri extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class zo extends Ri{}class Ni extends Ri{}class Vi extends Q{}class Do extends Vi{}class Bo extends Vi{async _call(m){return new ir(await super._call(m))}}class ji extends Q{}class hd extends ji{}class Lo extends ji{async _call(m){return new ir(await super._call(m))}}class Ro extends Q{}class No extends Ro{}class Vo extends Q{}class jo extends Vo{}class Sr extends Vo{async _call(m){return new ir(await super._call(m))}}class Uo extends Q{}class Wo extends Uo{}class Ui extends Q{}class Go extends Ui{}class qo extends Ui{async _call(m){return new ir(await super._call(m))}}class Ho extends Q{}class Ko extends Ho{async _call(m){return new nd(await super._call(m))}}class Wi extends Q{}class Xo extends Wi{}class Qo extends Wi{async _call(m){return new ir(await super._call(m))}}class Gi extends Q{}class Yo extends Gi{}class Zo extends Gi{async _call(m){return new ir(await super._call(m))}}class qi extends Q{}class ks extends qi{}class Jo extends qi{}class Ps extends Q{}class el extends Ps{}class tl extends Ps{}class Hi extends Q{}class rl extends Hi{}class nl extends Hi{async _call(m){return new ir(await super._call(m))}}class Ys extends Q{}class sl extends Ys{}class il extends Ys{async _call(m){return new Xi(await super._call(m))}}class Ki extends Ys{async _call(m){return new al(await super._call(m))}}class Xi extends qe{constructor({logits:m,pred_boxes:E}){super(),this.logits=m,this.pred_boxes=E}}class al extends qe{constructor({logits:m,pred_boxes:E,pred_masks:K}){super(),this.logits=m,this.pred_boxes=E,this.pred_masks=K}}class Qi extends Q{}class ol extends Qi{}class ll extends Qi{async _call(m){return new ul(await super._call(m))}}class ul extends qe{constructor({logits:m,pred_boxes:E}){super(),this.logits=m,this.pred_boxes=E}}class Yi extends Q{}class Zi extends Yi{}class dl extends Yi{async _call(m){return new Ji(await super._call(m))}}class Ji extends Xi{}class Zs extends Q{}class cl extends Zs{}class pl extends Zs{async _call(m){return new ir(await super._call(m))}}class ea extends Q{}class hl extends ea{}class fl extends ea{async _call(m){return new ir(await super._call(m))}}class ta extends Q{}class ra extends ta{}class ml extends ta{async _call(m){return new ir(await super._call(m))}}class na extends Q{}class _l extends na{}class fd extends na{async _call(m){return new ir(await super._call(m))}}class sa extends Q{}class gl extends sa{}class kn extends sa{}class ia extends Q{}class wl extends ia{}class yl extends ia{}class bl extends Q{}class Ml extends bl{}class Js extends Q{}class vl extends Js{}class xl extends Js{}class Tl extends Js{}class aa extends Q{}class md extends aa{}class Sl extends aa{}class oa extends Q{}class El extends oa{}class Cl extends oa{}class $l extends Q{}class kl extends $l{}class Pl extends Q{}class Kn extends Pl{}class Xn extends Pl{async _call(m){return new ir(await super._call(m))}}class Rn extends Q{}class la extends Rn{}class Qn extends Rn{async _call(m){return new ir(await super._call(m))}}class an extends Q{}class ua extends an{}class ei extends an{async _call(m){return new ir(await super._call(m))}}class ti extends Q{}class Al extends ti{}class Il extends ti{async _call(m){return new Fl(await super._call(m))}}class Fl extends qe{constructor({logits:m,pred_boxes:E}){super(),this.logits=m,this.pred_boxes=E}}class ri extends Q{}class da extends ri{async get_image_embeddings({pixel_values:m}){return await tt(this,{pixel_values:m})}async forward(m){if((!m.image_embeddings||!m.image_positional_embeddings)&&(m={...m,...await this.get_image_embeddings(m)}),!m.input_labels&&m.input_points){const K=m.input_points.dims.slice(0,-1),Be=K.reduce((Le,ut)=>Le*ut,1);m.input_labels=new I.Tensor("int64",new BigInt64Array(Be).fill(1n),K)}const E={image_embeddings:m.image_embeddings,image_positional_embeddings:m.image_positional_embeddings};return m.input_points&&(E.input_points=m.input_points),m.input_labels&&(E.input_labels=m.input_labels),m.input_boxes&&(E.input_boxes=m.input_boxes),await de(this.sessions.prompt_encoder_mask_decoder,E)}async _call(m){return new Ol(await super._call(m))}}class Ol extends qe{constructor({iou_scores:m,pred_masks:E}){super(),this.iou_scores=m,this.pred_masks=E}}class As extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class zl extends As{}class ca extends As{}class Is extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Dl extends Is{}class Bl extends Is{}class ns extends Q{}class Ll extends ns{}class pa extends ns{async _call(m){return new Yn(await super._call(m))}}class Fs extends ns{async _call(m){return new ir(await super._call(m))}}class Rl extends ns{async _call(m){return new tn(await super._call(m))}}class ni extends Q{}class Nl extends ni{}class Vl extends ni{async _call(m){return new tn(await super._call(m))}}class jl extends Q{}class _d extends jl{}class si extends Q{}class Ul extends si{}class gd extends si{async _call(m){return new Yn(await super._call(m))}}class ha extends si{async _call(m){return new ir(await super._call(m))}}class Os extends Q{}class Wl extends Os{}class Gl extends Os{async _call(m){return new Yn(await super._call(m))}}class ql extends Os{async _call(m){return new ir(await super._call(m))}}class ii extends Os{async _call(m){return new tn(await super._call(m))}}class ai extends Q{}class oi extends ai{}class fa extends ai{async _call(m){return new Yn(await super._call(m))}}class ma extends ai{async _call(m){return new ir(await super._call(m))}}class wd extends Q{}class Hl extends ns{}class _a extends ns{async _call(m){return new Yn(await super._call(m))}}class yd extends ns{async _call(m){return new ir(await super._call(m))}}class ms extends Q{}class Kl extends ms{}class bd extends ms{async _call(m){return new Yn(await super._call(m))}}class Xl extends ms{async _call(m){return new ir(await super._call(m))}}class ga extends ms{async _call(m){return new ja(await super._call(m))}}class Md extends ms{async _call(m){return new tn(await super._call(m))}}class li extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class vd extends li{}class Ql extends li{}class wa extends li{async generate_speech(m,E,{threshold:K=.5,minlenratio:Be=0,maxlenratio:Le=20,vocoder:ut=null}={}){const kt={input_ids:m},{encoder_outputs:Gt,encoder_attention_mask:or}=await tt(this,kt),hr=Gt.dims[1]/this.config.reduction_factor,zr=Math.floor(hr*Le),dr=Math.floor(hr*Be),yr=this.config.num_mel_bins;let cr=[],mr=null,br=null,Vr=0;for(;;){++Vr;const Nn=Ie(!!br);let hn;br?hn=br.output_sequence_out:hn=new I.Tensor("float32",new Float32Array(yr),[1,1,yr]);let rn={use_cache_branch:Nn,output_sequence:hn,encoder_attention_mask:or,speaker_embeddings:E,encoder_hidden_states:Gt};this.addPastKeyValues(rn,mr),br=await de(this.sessions.decoder_model_merged,rn),mr=this.getPastKeyValues(br,mr);const{prob:cn,spectrum:Wa}=br;if(cr.push(Wa),Vr>=dr&&(Array.from(cn.data).filter(Ls=>Ls>=K).length>0||Vr>=zr))break}const mn=(0,I.cat)(cr),{waveform:_n}=await de(ut.sessions.model,{spectrogram:mn});return{spectrogram:mn,waveform:_n}}}class Yl extends Q{constructor(){super(...arguments);xe(this,"main_input_name","spectrogram")}}class Zl extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class Jl extends Zl{}class ya extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class eu extends ya{}class tu extends ya{}class ru extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class nu extends ru{}class su extends ru{}class ba extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class xd extends ba{}class iu extends ba{}class ui extends Q{}class au extends ui{}class ou extends ui{static async from_pretrained(m,E={}){return E.model_file_name??(E.model_file_name="text_model"),super.from_pretrained(m,E)}}class lu extends ui{static async from_pretrained(m,E={}){return E.model_file_name??(E.model_file_name="audio_model"),super.from_pretrained(m,E)}}class Td extends Q{}class zs extends Td{async _call(m){return new Ua(await super._call(m))}}class ss extends Q{}class uu extends ss{}class du extends ss{}class cu extends ss{}class Ma extends Q{constructor(m,E,K){super(m,E),this.generation_config=K}}class pu extends Ma{}class va extends Ma{}class xa extends Q{}class hu extends xa{}class fu extends xa{async _call(m){return new ir(await super._call(m))}}class mu extends Q{}class Sd extends mu{}class _u extends mu{}class Ta extends Q{constructor(E,K,Be){super(E,K);xe(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]);this.generation_config=Be}_apply_and_filter_by_delay_pattern_mask(E){const[K,Be]=E.dims,Le=this.config.decoder.num_codebooks,ut=Be-Le;let kt=0;for(let hr=0;hr<E.size;++hr){if(E.data[hr]===this.config.decoder.pad_token_id)continue;const zr=hr%Be,dr=Math.floor(hr/Be)%Le,yr=zr-dr;yr>0&&yr<=ut&&(E.data[kt++]=E.data[hr])}const Gt=Math.floor(K/Le),or=kt/(Gt*Le);return new I.Tensor(E.type,E.data.slice(0,kt),[Gt,Le,or])}prepare_inputs_for_generation(E,K,Be){let Le=structuredClone(E);for(let kt=0;kt<Le.length;++kt)for(let Gt=0;Gt<Le[kt].length;++Gt)kt%this.config.decoder.num_codebooks>=Gt&&(Le[kt][Gt]=BigInt(this.config.decoder.pad_token_id));return Be.guidance_scale!==null&&Be.guidance_scale>1&&(Le=Le.concat(Le)),super.prepare_inputs_for_generation(Le,K,Be)}async generate(E){const K=await super.generate(E),Be=this._apply_and_filter_by_delay_pattern_mask(K).unsqueeze_(0),{audio_values:Le}=await de(this.sessions.encodec_decode,{audio_codes:Be});return Le}}class Sa extends Q{}class gu extends Sa{}class Ed extends Sa{async _call(m){return new ir(await super._call(m))}}class Ea extends Q{}class wu extends Ea{}class Cd extends Ea{async _call(m){return new ir(await super._call(m))}}class Ca extends Q{}class yu extends Ca{}class bu extends Ca{async _call(m){return new ir(await super._call(m))}}class $a extends Q{}class $d extends $a{}class Mu extends $a{async _call(m){return new ir(await super._call(m))}}class vu extends Q{}class xu extends vu{}class Ir{static async from_pretrained(m,{progress_callback:E=null,config:K=null,cache_dir:Be=null,local_files_only:Le=!1,revision:ut="main",model_file_name:kt=null,subfolder:Gt="onnx",device:or=null,dtype:hr=null,use_external_data_format:zr=null,session_options:dr={}}={}){const yr={progress_callback:E,config:K,cache_dir:Be,local_files_only:Le,revision:ut,model_file_name:kt,subfolder:Gt,device:or,dtype:hr,use_external_data_format:zr,session_options:dr};if(yr.config=await z.AutoConfig.from_pretrained(m,yr),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(const cr of this.MODEL_CLASS_MAPPINGS){const mr=cr.get(yr.config.model_type);if(mr)return await mr[1].from_pretrained(m,yr)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${yr.config.model_type}", attempting to construct from base class.`),await Q.from_pretrained(m,yr);throw Error(`Unsupported model type: ${yr.config.model_type}`)}}xe(Ir,"MODEL_CLASS_MAPPINGS",null),xe(Ir,"BASE_IF_FAIL",!1);const uc=new Map([["bert",["BertModel",dt]],["nomic_bert",["NomicBertModel",ke]],["roformer",["RoFormerModel",Ge]],["electra",["ElectraModel",Je]],["esm",["EsmModel",Ht]],["convbert",["ConvBertModel",Et]],["camembert",["CamembertModel",tr]],["deberta",["DebertaModel",lt]],["deberta-v2",["DebertaV2Model",nt]],["mpnet",["MPNetModel",Hs]],["albert",["AlbertModel",Jn]],["distilbert",["DistilBertModel",Lt]],["roberta",["RobertaModel",pr]],["xlm",["XLMModel",nn]],["xlm-roberta",["XLMRobertaModel",Tr]],["clap",["ClapModel",au]],["clip",["CLIPModel",eo]],["clipseg",["CLIPSegModel",oo]],["chinese_clip",["ChineseCLIPModel",ao]],["siglip",["SiglipModel",ro]],["mobilebert",["MobileBertModel",Ar]],["squeezebert",["SqueezeBertModel",Ks]],["wav2vec2",["Wav2Vec2Model",Ll]],["wav2vec2-bert",["Wav2Vec2BertModel",oi]],["unispeech",["UniSpeechModel",Ul]],["unispeech-sat",["UniSpeechSatModel",Wl]],["hubert",["HubertModel",Hl]],["wavlm",["WavLMModel",Kl]],["audio-spectrogram-transformer",["ASTModel",Nt]],["vits",["VitsModel",zs]],["pyannote",["PyAnnoteModel",Nl]],["wespeaker-resnet",["WeSpeakerResNetModel",_d]],["detr",["DetrModel",sl]],["rt_detr",["RTDetrModel",ol]],["table-transformer",["TableTransformerModel",Zi]],["vit",["ViTModel",Do]],["pvt",["PvtModel",hd]],["vit_msn",["ViTMSNModel",jo]],["vit_mae",["ViTMAEModel",No]],["groupvit",["GroupViTModel",Wo]],["fastvit",["FastViTModel",Go]],["mobilevit",["MobileViTModel",Xo]],["mobilevitv2",["MobileViTV2Model",Yo]],["owlvit",["OwlViTModel",ks]],["owlv2",["Owlv2Model",el]],["beit",["BeitModel",rl]],["deit",["DeiTModel",cl]],["hiera",["HieraModel",hl]],["convnext",["ConvNextModel",Kn]],["convnextv2",["ConvNextV2Model",la]],["dinov2",["Dinov2Model",ua]],["resnet",["ResNetModel",ra]],["swin",["SwinModel",_l]],["swin2sr",["Swin2SRModel",gl]],["donut-swin",["DonutSwinModel",kl]],["yolos",["YolosModel",Al]],["dpt",["DPTModel",wl]],["glpn",["GLPNModel",El]],["hifigan",["SpeechT5HifiGan",Yl]],["efficientnet",["EfficientNetModel",hu]],["decision_transformer",["DecisionTransformerModel",xu]],["mobilenet_v1",["MobileNetV1Model",gu]],["mobilenet_v2",["MobileNetV2Model",wu]],["mobilenet_v3",["MobileNetV3Model",yu]],["mobilenet_v4",["MobileNetV4Model",$d]],["maskformer",["MaskFormerModel",md]]]),kd=new Map([["t5",["T5Model",xs]],["longt5",["LongT5Model",Ss]],["mt5",["MT5Model",Cs]],["bart",["BartModel",ye]],["mbart",["MBartModel",ie]],["marian",["MarianModel",zl]],["whisper",["WhisperModel",jt]],["m2m_100",["M2M100Model",Dl]],["blenderbot",["BlenderbotModel",vt]],["blenderbot-small",["BlenderbotSmallModel",Rr]]]),Pd=new Map([["bloom",["BloomModel",Io]],["jais",["JAISModel",co]],["gpt2",["GPT2Model",uo]],["gptj",["GPTJModel",pd]],["gpt_bigcode",["GPTBigCodeModel",Qs]],["gpt_neo",["GPTNeoModel",ho]],["gpt_neox",["GPTNeoXModel",mo]],["codegen",["CodeGenModel",go]],["llama",["LlamaModel",yo]],["cohere",["CohereModel",Mo]],["gemma",["GemmaModel",xo]],["gemma2",["Gemma2Model",To]],["openelm",["OpenELMModel",Eo]],["qwen2",["Qwen2Model",$o]],["phi",["PhiModel",Oi]],["phi3",["Phi3Model",Po]],["mpt",["MptModel",Oo]],["opt",["OPTModel",zo]],["mistral",["MistralModel",eu]],["starcoder2",["Starcoder2Model",nu]],["falcon",["FalconModel",xd]],["stablelm",["StableLmModel",pu]]]),ka=new Map([["speecht5",["SpeechT5ForSpeechToText",Ql]],["whisper",["WhisperForConditionalGeneration",_i]]]),Tu=new Map([["speecht5",["SpeechT5ForTextToSpeech",wa]]]),Ad=new Map([["vits",["VitsModel",zs]],["musicgen",["MusicgenForConditionalGeneration",Ta]]]),Su=new Map([["bert",["BertForSequenceClassification",at]],["roformer",["RoFormerForSequenceClassification",He]],["electra",["ElectraForSequenceClassification",xt]],["esm",["EsmForSequenceClassification",Ur]],["convbert",["ConvBertForSequenceClassification",G]],["camembert",["CamembertForSequenceClassification",Cr]],["deberta",["DebertaForSequenceClassification",ge]],["deberta-v2",["DebertaV2ForSequenceClassification",ft]],["mpnet",["MPNetForSequenceClassification",bs]],["albert",["AlbertForSequenceClassification",ds]],["distilbert",["DistilBertForSequenceClassification",zt]],["roberta",["RobertaForSequenceClassification",sn]],["xlm",["XLMForSequenceClassification",Xt]],["xlm-roberta",["XLMRobertaForSequenceClassification",wr]],["bart",["BartForSequenceClassification",P]],["mbart",["MBartForSequenceClassification",ze]],["mobilebert",["MobileBertForSequenceClassification",Wr]],["squeezebert",["SqueezeBertForSequenceClassification",In]]]),Eu=new Map([["bert",["BertForTokenClassification",$t]],["roformer",["RoFormerForTokenClassification",ct]],["electra",["ElectraForTokenClassification",Qe]],["esm",["EsmForTokenClassification",vr]],["convbert",["ConvBertForTokenClassification",C]],["camembert",["CamembertForTokenClassification",Zr]],["deberta",["DebertaForTokenClassification",Pe]],["deberta-v2",["DebertaV2ForTokenClassification",St]],["mpnet",["MPNetForTokenClassification",Ms]],["distilbert",["DistilBertForTokenClassification",Ut]],["roberta",["RobertaForTokenClassification",Fe]],["xlm",["XLMForTokenClassification",bn]],["xlm-roberta",["XLMRobertaForTokenClassification",Br]]]),Pa=new Map([["t5",["T5ForConditionalGeneration",Ts]],["longt5",["LongT5ForConditionalGeneration",Es]],["mt5",["MT5ForConditionalGeneration",Gr]],["bart",["BartForConditionalGeneration",_]],["mbart",["MBartForConditionalGeneration",pe]],["marian",["MarianMTModel",ca]],["m2m_100",["M2M100ForConditionalGeneration",Bl]],["blenderbot",["BlenderbotForConditionalGeneration",Ot]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",nr]]]),Aa=new Map([["bloom",["BloomForCausalLM",Fo]],["gpt2",["GPT2LMHeadModel",En]],["jais",["JAISLMHeadModel",po]],["gptj",["GPTJForCausalLM",Cn]],["gpt_bigcode",["GPTBigCodeForCausalLM",Ei]],["gpt_neo",["GPTNeoForCausalLM",fo]],["gpt_neox",["GPTNeoXForCausalLM",_o]],["codegen",["CodeGenForCausalLM",wo]],["llama",["LlamaForCausalLM",bo]],["cohere",["CohereForCausalLM",vo]],["gemma",["GemmaForCausalLM",$n]],["gemma2",["Gemma2ForCausalLM",So]],["openelm",["OpenELMForCausalLM",Co]],["qwen2",["Qwen2ForCausalLM",ko]],["phi",["PhiForCausalLM",zi]],["phi3",["Phi3ForCausalLM",Bi]],["mpt",["MptForCausalLM",$s]],["opt",["OPTForCausalLM",Ni]],["mbart",["MBartForCausalLM",wt]],["mistral",["MistralForCausalLM",tu]],["starcoder2",["Starcoder2ForCausalLM",su]],["falcon",["FalconForCausalLM",iu]],["trocr",["TrOCRForCausalLM",Jl]],["stablelm",["StableLmForCausalLM",va]]]),Id=new Map([["bert",["BertForMaskedLM",Re]],["roformer",["RoFormerForMaskedLM",Ue]],["electra",["ElectraForMaskedLM",Ke]],["esm",["EsmForMaskedLM",$r]],["convbert",["ConvBertForMaskedLM",x]],["camembert",["CamembertForMaskedLM",jr]],["deberta",["DebertaForMaskedLM",j]],["deberta-v2",["DebertaV2ForMaskedLM",gt]],["mpnet",["MPNetForMaskedLM",ys]],["albert",["AlbertForMaskedLM",Kt]],["distilbert",["DistilBertForMaskedLM",et]],["roberta",["RobertaForMaskedLM",xn]],["xlm",["XLMWithLMHeadModel",yn]],["xlm-roberta",["XLMRobertaForMaskedLM",At]],["mobilebert",["MobileBertForMaskedLM",Dn]],["squeezebert",["SqueezeBertForMaskedLM",us]]]),pn=new Map([["bert",["BertForQuestionAnswering",De]],["roformer",["RoFormerForQuestionAnswering",yt]],["electra",["ElectraForQuestionAnswering",_t]],["convbert",["ConvBertForQuestionAnswering",Y]],["camembert",["CamembertForQuestionAnswering",Dr]],["deberta",["DebertaForQuestionAnswering",rt]],["deberta-v2",["DebertaV2ForQuestionAnswering",mt]],["mpnet",["MPNetForQuestionAnswering",vs]],["albert",["AlbertForQuestionAnswering",cs]],["distilbert",["DistilBertForQuestionAnswering",be]],["roberta",["RobertaForQuestionAnswering",Tn]],["xlm",["XLMForQuestionAnswering",un]],["xlm-roberta",["XLMRobertaForQuestionAnswering",Hr]],["mobilebert",["MobileBertForQuestionAnswering",Gn]],["squeezebert",["SqueezeBertForQuestionAnswering",Hn]]]),Ia=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",gi]]]),Fd=new Map([["llava",["LlavaForConditionalGeneration",fs]],["moondream1",["Moondream1ForConditionalGeneration",sr]],["florence2",["Florence2ForConditionalGeneration",wi]]]),Cu=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",gi]]]),$u=new Map([["vit",["ViTForImageClassification",Bo]],["pvt",["PvtForImageClassification",Lo]],["vit_msn",["ViTMSNForImageClassification",Sr]],["fastvit",["FastViTForImageClassification",qo]],["mobilevit",["MobileViTForImageClassification",Qo]],["mobilevitv2",["MobileViTV2ForImageClassification",Zo]],["beit",["BeitForImageClassification",nl]],["deit",["DeiTForImageClassification",pl]],["hiera",["HieraForImageClassification",fl]],["convnext",["ConvNextForImageClassification",Xn]],["convnextv2",["ConvNextV2ForImageClassification",Qn]],["dinov2",["Dinov2ForImageClassification",ei]],["resnet",["ResNetForImageClassification",ml]],["swin",["SwinForImageClassification",fd]],["segformer",["SegformerForImageClassification",du]],["efficientnet",["EfficientNetForImageClassification",fu]],["mobilenet_v1",["MobileNetV1ForImageClassification",Ed]],["mobilenet_v2",["MobileNetV2ForImageClassification",Cd]],["mobilenet_v3",["MobileNetV3ForImageClassification",bu]],["mobilenet_v4",["MobileNetV4ForImageClassification",Mu]]]),Ds=new Map([["detr",["DetrForObjectDetection",il]],["rt_detr",["RTDetrForObjectDetection",ll]],["table-transformer",["TableTransformerForObjectDetection",dl]],["yolos",["YolosForObjectDetection",Il]]]),ku=new Map([["owlvit",["OwlViTForObjectDetection",Jo]],["owlv2",["Owlv2ForObjectDetection",tl]]]),Pu=new Map([["detr",["DetrForSegmentation",Ki]],["clipseg",["CLIPSegForImageSegmentation",lo]]]),Fa=new Map([["segformer",["SegformerForSemanticSegmentation",cu]],["sapiens",["SapiensForSemanticSegmentation",vl]]]),Au=new Map([["detr",["DetrForSegmentation",Ki]],["maskformer",["MaskFormerForInstanceSegmentation",Sl]]]),Iu=new Map([["sam",["SamModel",da]]]),Oa=new Map([["wav2vec2",["Wav2Vec2ForCTC",pa]],["wav2vec2-bert",["Wav2Vec2BertForCTC",fa]],["unispeech",["UniSpeechForCTC",gd]],["unispeech-sat",["UniSpeechSatForCTC",Gl]],["wavlm",["WavLMForCTC",bd]],["hubert",["HubertForCTC",_a]]]),Fu=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",Fs]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",ma]],["unispeech",["UniSpeechForSequenceClassification",ha]],["unispeech-sat",["UniSpeechSatForSequenceClassification",ql]],["wavlm",["WavLMForSequenceClassification",Xl]],["hubert",["HubertForSequenceClassification",yd]],["audio-spectrogram-transformer",["ASTForAudioClassification",Xs]]]),Ou=new Map([["wavlm",["WavLMForXVector",ga]]]),zu=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",ii]],["wavlm",["WavLMForAudioFrameClassification",Md]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",Rl]],["pyannote",["PyAnnoteForAudioFrameClassification",Vl]]]),za=new Map([["vitmatte",["VitMatteForImageMatting",Ko]]]),Du=new Map([["swin2sr",["Swin2SRForImageSuperResolution",kn]]]),Bu=new Map([["dpt",["DPTForDepthEstimation",yl]],["depth_anything",["DepthAnythingForDepthEstimation",Ml]],["glpn",["GLPNForDepthEstimation",Cl]],["sapiens",["SapiensForDepthEstimation",xl]]]),Da=new Map([["sapiens",["SapiensForNormalEstimation",Tl]]]),Lu=new Map([["clip",["CLIPVisionModelWithProjection",to]],["siglip",["SiglipVisionModel",so]]]),Od=[[uc,ne.EncoderOnly],[kd,ne.EncoderDecoder],[Pd,ne.DecoderOnly],[Su,ne.EncoderOnly],[Eu,ne.EncoderOnly],[Pa,ne.Seq2Seq],[ka,ne.Seq2Seq],[Aa,ne.DecoderOnly],[Id,ne.EncoderOnly],[pn,ne.EncoderOnly],[Ia,ne.Vision2Seq],[Fd,ne.ImageTextToText],[$u,ne.EncoderOnly],[Pu,ne.EncoderOnly],[Au,ne.EncoderOnly],[Fa,ne.EncoderOnly],[za,ne.EncoderOnly],[Du,ne.EncoderOnly],[Bu,ne.EncoderOnly],[Da,ne.EncoderOnly],[Ds,ne.EncoderOnly],[ku,ne.EncoderOnly],[Iu,ne.MaskGeneration],[Oa,ne.EncoderOnly],[Fu,ne.EncoderOnly],[Tu,ne.Seq2Seq],[Ad,ne.EncoderOnly],[Ou,ne.EncoderOnly],[zu,ne.EncoderOnly],[Lu,ne.EncoderOnly]];for(const[f,m]of Od)for(const[E,K]of f.values())ae.set(E,m),L.set(K,E),X.set(E,K);const zd=[["MusicgenForConditionalGeneration",Ta,ne.Musicgen],["CLIPTextModelWithProjection",Fn,ne.EncoderOnly],["SiglipTextModel",no,ne.EncoderOnly],["ClapTextModelWithProjection",ou,ne.EncoderOnly],["ClapAudioModelWithProjection",lu,ne.EncoderOnly]];for(const[f,m,E]of zd)ae.set(f,E),L.set(m,f),X.set(f,m);class Ba extends Ir{}xe(Ba,"MODEL_CLASS_MAPPINGS",Od.map(m=>m[0])),xe(Ba,"BASE_IF_FAIL",!0);class Ru extends Ir{}xe(Ru,"MODEL_CLASS_MAPPINGS",[Su]);class Nu extends Ir{}xe(Nu,"MODEL_CLASS_MAPPINGS",[Eu]);class Dd extends Ir{}xe(Dd,"MODEL_CLASS_MAPPINGS",[Pa]);class Vu extends Ir{}xe(Vu,"MODEL_CLASS_MAPPINGS",[ka]);class ju extends Ir{}xe(ju,"MODEL_CLASS_MAPPINGS",[Tu]);class Uu extends Ir{}xe(Uu,"MODEL_CLASS_MAPPINGS",[Ad]);class Bd extends Ir{}xe(Bd,"MODEL_CLASS_MAPPINGS",[Aa]);class Wu extends Ir{}xe(Wu,"MODEL_CLASS_MAPPINGS",[Id]);class Gu extends Ir{}xe(Gu,"MODEL_CLASS_MAPPINGS",[pn]);class qu extends Ir{}xe(qu,"MODEL_CLASS_MAPPINGS",[Ia]);class Hu extends Ir{}xe(Hu,"MODEL_CLASS_MAPPINGS",[$u]);class Ld extends Ir{}xe(Ld,"MODEL_CLASS_MAPPINGS",[Pu]);class Ku extends Ir{}xe(Ku,"MODEL_CLASS_MAPPINGS",[Fa]);class Xu extends Ir{}xe(Xu,"MODEL_CLASS_MAPPINGS",[Au]);class Qu extends Ir{}xe(Qu,"MODEL_CLASS_MAPPINGS",[Ds]);class Yu extends Ir{}xe(Yu,"MODEL_CLASS_MAPPINGS",[ku]);class Zu extends Ir{}xe(Zu,"MODEL_CLASS_MAPPINGS",[Iu]);class Ju extends Ir{}xe(Ju,"MODEL_CLASS_MAPPINGS",[Oa]);class ed extends Ir{}xe(ed,"MODEL_CLASS_MAPPINGS",[Fu]);class td extends Ir{}xe(td,"MODEL_CLASS_MAPPINGS",[Ou]);class rd extends Ir{}xe(rd,"MODEL_CLASS_MAPPINGS",[zu]);class Rd extends Ir{}xe(Rd,"MODEL_CLASS_MAPPINGS",[Cu]);class Bs extends Ir{}xe(Bs,"MODEL_CLASS_MAPPINGS",[za]);class La extends Ir{}xe(La,"MODEL_CLASS_MAPPINGS",[Du]);class Ra extends Ir{}xe(Ra,"MODEL_CLASS_MAPPINGS",[Bu]);class Na extends Ir{}xe(Na,"MODEL_CLASS_MAPPINGS",[Da]);class Va extends Ir{}xe(Va,"MODEL_CLASS_MAPPINGS",[Lu]);class Nd extends qe{constructor({logits:m,past_key_values:E,encoder_outputs:K,decoder_attentions:Be=null,cross_attentions:Le=null}){super(),this.logits=m,this.past_key_values=E,this.encoder_outputs=K,this.decoder_attentions=Be,this.cross_attentions=Le}}class ir extends qe{constructor({logits:m}){super(),this.logits=m}}class ja extends qe{constructor({logits:m,embeddings:E}){super(),this.logits=m,this.embeddings=E}}class tn extends qe{constructor({logits:m}){super(),this.logits=m}}class on extends qe{constructor({logits:m}){super(),this.logits=m}}class dn extends qe{constructor({start_logits:m,end_logits:E}){super(),this.start_logits=m,this.end_logits=E}}class Yn extends qe{constructor({logits:m}){super(),this.logits=m}}class Vd extends qe{constructor({logits:m,past_key_values:E}){super(),this.logits=m,this.past_key_values=E}}class nd extends qe{constructor({alphas:m}){super(),this.alphas=m}}class Ua extends qe{constructor({waveform:m,spectrogram:E}){super(),this.waveform=m,this.spectrogram=E}}},"./src/models/whisper/common_whisper.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{WHISPER_LANGUAGE_MAPPING:()=>fe,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>Me,whisper_language_to_code:()=>$e});const z=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],fe=new Map(z),Me=new Map([...z.map(([Te,N])=>[N,Te]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function $e(Te){Te=Te.toLowerCase();let N=Me.get(Te);if(N===void 0)if(fe.has(Te))N=Te;else{const V=Te.length===2?fe.keys():fe.values();throw new Error(`Language "${Te}" is not supported. Must be one of: ${JSON.stringify(V)}`)}return N}},"./src/models/whisper/generation_whisper.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{WhisperGenerationConfig:()=>fe});var z=R("./src/generation/configuration_utils.js");class fe extends z.GenerationConfig{constructor(){super(...arguments);xe(this,"return_timestamps",null);xe(this,"return_token_timestamps",null);xe(this,"num_frames",null);xe(this,"alignment_heads",null);xe(this,"task",null);xe(this,"language",null);xe(this,"no_timestamps_token_id",null);xe(this,"prompt_ids",null);xe(this,"is_multilingual",null);xe(this,"lang_to_id",null);xe(this,"task_to_id",null);xe(this,"max_initial_timestamp_index",1)}}},"./src/ops/registry.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{TensorOpRegistry:()=>$e});var z=R("./src/backends/onnx.js"),fe=R("./src/utils/tensor.js");const Me=async(Te,N,$)=>{const V=await(0,z.createInferenceSession)(new Uint8Array(Te),N);return async I=>{const Z=Object.fromEntries(Object.entries(I).map(([le,me])=>[le,me.ort_tensor])),se=await V.run(Z);return Array.isArray($)?$.map(le=>new fe.Tensor(se[le])):new fe.Tensor(se[$])}};class $e{static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=Me([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=Me([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=Me([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=Me([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=Me([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=Me([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}}xe($e,"session_options",{})},"./src/pipelines.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{AudioClassificationPipeline:()=>Ie,AutomaticSpeechRecognitionPipeline:()=>tt,DepthEstimationPipeline:()=>st,DocumentQuestionAnsweringPipeline:()=>Q,FeatureExtractionPipeline:()=>ve,FillMaskPipeline:()=>ae,ImageClassificationPipeline:()=>pt,ImageFeatureExtractionPipeline:()=>Ee,ImageSegmentationPipeline:()=>_e,ImageToImagePipeline:()=>ht,ImageToTextPipeline:()=>Ye,ObjectDetectionPipeline:()=>ue,Pipeline:()=>me,QuestionAnsweringPipeline:()=>ne,SummarizationPipeline:()=>L,Text2TextGenerationPipeline:()=>X,TextClassificationPipeline:()=>B,TextGenerationPipeline:()=>k,TextToAudioPipeline:()=>qe,TokenClassificationPipeline:()=>J,TranslationPipeline:()=>A,ZeroShotAudioClassificationPipeline:()=>Ae,ZeroShotClassificationPipeline:()=>de,ZeroShotImageClassificationPipeline:()=>U,ZeroShotObjectDetectionPipeline:()=>Ce,pipeline:()=>at});var z=R("./src/tokenizers.js"),fe=R("./src/models.js"),Me=R("./src/processors.js"),$e=R("./src/utils/generic.js"),Te=R("./src/utils/core.js"),N=R("./src/utils/maths.js"),$=R("./src/utils/audio.js"),V=R("./src/utils/tensor.js"),I=R("./src/utils/image.js");async function Z(De){return Array.isArray(De)||(De=[De]),await Promise.all(De.map(re=>I.RawImage.read(re)))}async function se(De,re){return Array.isArray(De)||(De=[De]),await Promise.all(De.map(ke=>typeof ke=="string"||ke instanceof URL?(0,$.read_audio)(ke,re):ke instanceof Float64Array?new Float32Array(ke):ke))}function le(De,re){re&&(De=De.map(He=>He|0));const[ke,je,Ge,Ue]=De;return{xmin:ke,ymin:je,xmax:Ge,ymax:Ue}}class me extends $e.Callable{constructor({task:re,model:ke,tokenizer:je=null,processor:Ge=null}){super(),this.task=re,this.model=ke,this.tokenizer=je,this.processor=Ge}async dispose(){await this.model.dispose()}}class B extends me{constructor(re){super(re)}async _call(re,{top_k:ke=1}={}){const je=this.tokenizer(re,{padding:!0,truncation:!0}),Ge=await this.model(je),Ue=this.model.config.problem_type==="multi_label_classification"?yt=>yt.sigmoid():yt=>new V.Tensor("float32",(0,N.softmax)(yt.data),yt.dims),He=this.model.config.id2label,ct=[];for(const yt of Ge.logits){const Mt=Ue(yt),Et=await(0,V.topk)(Mt,ke),x=Et[0].tolist(),C=Et[1].tolist().map((Y,ce)=>({label:He?He[Y]:`LABEL_${Y}`,score:x[ce]}));ke===1?ct.push(...C):ct.push(C)}return Array.isArray(re)||ke===1?ct:ct[0]}}class J extends me{constructor(re){super(re)}async _call(re,{ignore_labels:ke=["O"]}={}){const je=Array.isArray(re),Ge=this.tokenizer(je?re:[re],{padding:!0,truncation:!0}),He=(await this.model(Ge)).logits,ct=this.model.config.id2label,yt=[];for(let Mt=0;Mt<He.dims[0];++Mt){const Et=Ge.input_ids[Mt],x=He[Mt],G=[];for(let C=0;C<x.dims[0];++C){const Y=x[C],ce=(0,N.max)(Y.data)[1],Je=ct?ct[ce]:`LABEL_${ce}`;if(ke.includes(Je))continue;const Ke=this.tokenizer.decode([Et[C].item()],{skip_special_tokens:!0});if(Ke==="")continue;const xt=(0,N.softmax)(Y.data);G.push({entity:Je,score:xt[ce],index:C,word:Ke})}yt.push(G)}return je?yt:yt[0]}}class ne extends me{constructor(re){super(re)}async _call(re,ke,{top_k:je=1}={}){const Ge=this.tokenizer(re,{text_pair:ke,padding:!0,truncation:!0}),{start_logits:Ue,end_logits:He}=await this.model(Ge),ct=Ge.input_ids.tolist(),yt=Ge.attention_mask.tolist(),Mt=this.tokenizer.all_special_ids,Et=[];for(let x=0;x<Ue.dims[0];++x){const G=ct[x],C=G.findIndex(Qe=>Qe==this.tokenizer.sep_token_id);yt[x].map((Qe,_t)=>Qe==1&&(_t===0||_t>C&&Mt.findIndex(Bt=>Bt==G[_t])===-1));const Y=Ue[x].tolist(),ce=He[x].tolist();for(let Qe=1;Qe<Y.length;++Qe)(yt[x]==0||Qe<=C||Mt.findIndex(_t=>_t==G[Qe])!==-1)&&(Y[Qe]=-1/0,ce[Qe]=-1/0);const Je=(0,N.softmax)(Y).map((Qe,_t)=>[Qe,_t]),Ke=(0,N.softmax)(ce).map((Qe,_t)=>[Qe,_t]);Je[0][0]=0,Ke[0][0]=0;const xt=(0,Te.product)(Je,Ke).filter(Qe=>Qe[0][1]<=Qe[1][1]).map(Qe=>[Qe[0][1],Qe[1][1],Qe[0][0]*Qe[1][0]]).sort((Qe,_t)=>_t[2]-Qe[2]);for(let Qe=0;Qe<Math.min(xt.length,je);++Qe){const[_t,Bt,tr]=xt[Qe],jr=G.slice(_t,Bt+1),Cr=this.tokenizer.decode(jr,{skip_special_tokens:!0});Et.push({answer:Cr,score:tr})}}return je===1?Et[0]:Et}}class ae extends me{constructor(re){super(re)}async _call(re,{top_k:ke=5}={}){const je=this.tokenizer(re,{padding:!0,truncation:!0}),{logits:Ge}=await this.model(je),Ue=[],He=je.input_ids.tolist();for(let ct=0;ct<He.length;++ct){const yt=He[ct],Mt=yt.findIndex(Y=>Y==this.tokenizer.mask_token_id);if(Mt===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const Et=Ge[ct][Mt],x=await(0,V.topk)(new V.Tensor("float32",(0,N.softmax)(Et.data),Et.dims),ke),G=x[0].tolist(),C=x[1].tolist();Ue.push(C.map((Y,ce)=>{const Je=yt.slice();return Je[Mt]=Y,{score:G[ce],token:Number(Y),token_str:this.tokenizer.model.vocab[Y],sequence:this.tokenizer.decode(Je,{skip_special_tokens:!0})}}))}return Array.isArray(re)?Ue:Ue[0]}}class X extends me{constructor(ke){super(ke);xe(this,"_key","generated_text")}async _call(ke,je={}){Array.isArray(ke)||(ke=[ke]),this.model.config.prefix&&(ke=ke.map(Mt=>this.model.config.prefix+Mt));const Ge=this.model.config.task_specific_params;Ge&&Ge[this.task]&&Ge[this.task].prefix&&(ke=ke.map(Mt=>Ge[this.task].prefix+Mt));const Ue=this.tokenizer,He={padding:!0,truncation:!0};let ct;this instanceof A&&"_build_translation_inputs"in Ue?ct=Ue._build_translation_inputs(ke,He,je):ct=Ue(ke,He);const yt=await this.model.generate({...ct,...je});return Ue.batch_decode(yt,{skip_special_tokens:!0}).map(Mt=>({[this._key]:Mt}))}}class L extends X{constructor(ke){super(ke);xe(this,"_key","summary_text")}}class A extends X{constructor(ke){super(ke);xe(this,"_key","translation_text")}}function D(De){return Array.isArray(De)&&De.every(re=>"role"in re&&"content"in re)}class k extends me{constructor(re){super(re)}async _call(re,ke={}){let je=!1,Ge=!1,Ue;if(typeof re=="string")Ue=re=[re];else if(Array.isArray(re)&&re.every(C=>typeof C=="string"))je=!0,Ue=re;else{if(D(re))re=[re];else if(Array.isArray(re)&&re.every(D))je=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");Ge=!0,Ue=re.map(C=>this.tokenizer.apply_chat_template(C,{tokenize:!1,add_generation_prompt:!0}))}const He=ke.add_special_tokens??!1,ct=Ge?!1:ke.return_full_text??!0;this.tokenizer.padding_side="left";const yt=this.tokenizer(Ue,{add_special_tokens:He,padding:!0,truncation:!0}),Mt=await this.model.generate({...yt,...ke}),Et=this.tokenizer.batch_decode(Mt,{skip_special_tokens:!0});let x;!ct&&yt.input_ids.dims.at(-1)>0&&(x=this.tokenizer.batch_decode(yt.input_ids,{skip_special_tokens:!0}).map(C=>C.length));const G=Array.from({length:re.length},C=>[]);for(let C=0;C<Et.length;++C){const Y=Math.floor(C/Mt.dims[0]*re.length);x&&(Et[C]=Et[C].slice(x[Y])),G[Y].push({generated_text:Ge?[...re[Y],{role:"assistant",content:Et[C]}]:Et[C]})}return!je&&G.length===1?G[0]:G}}class de extends me{constructor(re){super(re),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([ke,je])=>[ke.toLowerCase(),je])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(re,ke,{hypothesis_template:je="This example is {}.",multi_label:Ge=!1}={}){const Ue=Array.isArray(re);Ue||(re=[re]),Array.isArray(ke)||(ke=[ke]);const He=ke.map(Mt=>je.replace("{}",Mt)),ct=Ge||ke.length===1,yt=[];for(const Mt of re){const Et=[];for(const C of He){const Y=this.tokenizer(Mt,{text_pair:C,padding:!0,truncation:!0}),ce=await this.model(Y);ct?Et.push([ce.logits.data[this.contradiction_id],ce.logits.data[this.entailment_id]]):Et.push(ce.logits.data[this.entailment_id])}const G=(ct?Et.map(C=>(0,N.softmax)(C)[1]):(0,N.softmax)(Et)).map((C,Y)=>[C,Y]).sort((C,Y)=>Y[0]-C[0]);yt.push({sequence:Mt,labels:G.map(C=>ke[C[1]]),scores:G.map(C=>C[0])})}return Ue?yt:yt[0]}}class ve extends me{constructor(re){super(re)}async _call(re,{pooling:ke="none",normalize:je=!1,quantize:Ge=!1,precision:Ue="binary"}={}){const He=this.tokenizer(re,{padding:!0,truncation:!0}),ct=await this.model(He);let yt=ct.last_hidden_state??ct.logits??ct.token_embeddings;if(ke!=="none")if(ke==="mean")yt=(0,V.mean_pooling)(yt,He.attention_mask);else if(ke==="cls")yt=yt.slice(null,0);else throw Error(`Pooling method '${ke}' not supported.`);return je&&(yt=yt.normalize(2,-1)),Ge&&(yt=(0,V.quantize_embeddings)(yt,Ue)),yt}}class Ee extends me{constructor(re){super(re)}async _call(re,{pool:ke=null}={}){const je=await Z(re),{pixel_values:Ge}=await this.processor(je),Ue=await this.model({pixel_values:Ge});let He;if(ke){if(!("pooler_output"in Ue))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");He=Ue.pooler_output}else He=Ue.last_hidden_state??Ue.logits??Ue.image_embeds;return He}}class Ie extends me{constructor(re){super(re)}async _call(re,{top_k:ke=5}={}){const je=this.processor.feature_extractor.config.sampling_rate,Ge=await se(re,je),Ue=this.model.config.id2label,He=[];for(const ct of Ge){const yt=await this.processor(ct),Et=(await this.model(yt)).logits[0],x=await(0,V.topk)(new V.Tensor("float32",(0,N.softmax)(Et.data),Et.dims),ke),G=x[0].tolist(),Y=x[1].tolist().map((ce,Je)=>({label:Ue?Ue[ce]:`LABEL_${ce}`,score:G[Je]}));He.push(Y)}return Array.isArray(re)?He:He[0]}}class Ae extends me{constructor(re){super(re)}async _call(re,ke,{hypothesis_template:je="This is a sound of {}."}={}){const Ge=!Array.isArray(re);Ge&&(re=[re]);const Ue=ke.map(Et=>je.replace("{}",Et)),He=this.tokenizer(Ue,{padding:!0,truncation:!0}),ct=this.processor.feature_extractor.config.sampling_rate,yt=await se(re,ct),Mt=[];for(const Et of yt){const x=await this.processor(Et),G=await this.model({...He,...x}),C=(0,N.softmax)(G.logits_per_audio.data);Mt.push([...C].map((Y,ce)=>({score:Y,label:ke[ce]})))}return Ge?Mt[0]:Mt}}class tt extends me{constructor(re){super(re)}async _call(re,ke={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(re,ke);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(re,ke);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(re,ke){ke.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),ke.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const je=!Array.isArray(re);je&&(re=[re]);const Ge=this.processor.feature_extractor.config.sampling_rate,Ue=await se(re,Ge),He=[];for(const ct of Ue){const yt=await this.processor(ct),Et=(await this.model(yt)).logits[0],x=[];for(const C of Et)x.push((0,N.max)(C.data)[1]);const G=this.tokenizer.decode(x);He.push({text:G})}return je?He[0]:He}async _call_whisper(re,ke){const je=ke.return_timestamps??!1,Ge=ke.chunk_length_s??0,Ue=ke.force_full_sequences??!1;let He=ke.stride_length_s??null;const ct={...ke};je==="word"&&(ct.return_token_timestamps=!0,ct.return_timestamps=!1);const yt=!Array.isArray(re);yt&&(re=[re]);const Mt=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,Et=this.processor.feature_extractor.config.hop_length,x=this.processor.feature_extractor.config.sampling_rate,G=await se(re,x),C=[];for(const Y of G){let ce=[];if(Ge>0){if(He===null)He=Ge/6;else if(Ge<=He)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const xt=x*Ge,Qe=x*He,_t=xt-2*Qe;let Bt=0;for(;;){const tr=Bt+xt,jr=Y.subarray(Bt,tr),Cr=await this.processor(jr),Zr=Bt===0,Dr=tr>=Y.length;if(ce.push({stride:[jr.length,Zr?0:Qe,Dr?0:Qe],input_features:Cr.input_features,is_last:Dr}),Dr)break;Bt+=_t}}else ce=[{stride:[Y.length,0,0],input_features:(await this.processor(Y)).input_features,is_last:!0}];for(const xt of ce){ct.num_frames=Math.floor(xt.stride[0]/Et);const Qe=await this.model.generate({inputs:xt.input_features,...ct});je==="word"?(xt.tokens=Qe.sequences.tolist()[0],xt.token_timestamps=Qe.token_timestamps.tolist()[0].map(_t=>(0,N.round)(_t,2))):xt.tokens=Qe[0].tolist(),xt.stride=xt.stride.map(_t=>_t/x)}const[Je,Ke]=this.tokenizer._decode_asr(ce,{time_precision:Mt,return_timestamps:je,force_full_sequences:Ue});C.push({text:Je,...Ke})}return yt?C[0]:C}}class Ye extends me{constructor(re){super(re)}async _call(re,ke={}){const je=Array.isArray(re),Ge=await Z(re),{pixel_values:Ue}=await this.processor(Ge),He=[];for(const ct of Ue){ct.dims=[1,...ct.dims];const yt=await this.model.generate({inputs:ct,...ke}),Mt=this.tokenizer.batch_decode(yt,{skip_special_tokens:!0}).map(Et=>({generated_text:Et.trim()}));He.push(Mt)}return je?He:He[0]}}class pt extends me{constructor(re){super(re)}async _call(re,{top_k:ke=5}={}){const je=await Z(re),{pixel_values:Ge}=await this.processor(je),Ue=await this.model({pixel_values:Ge}),He=this.model.config.id2label,ct=[];for(const yt of Ue.logits){const Mt=await(0,V.topk)(new V.Tensor("float32",(0,N.softmax)(yt.data),yt.dims),ke),Et=Mt[0].tolist(),G=Mt[1].tolist().map((C,Y)=>({label:He?He[C]:`LABEL_${C}`,score:Et[Y]}));ct.push(G)}return Array.isArray(re)?ct:ct[0]}}class _e extends me{constructor(re){super(re),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(re,{threshold:ke=.5,mask_threshold:je=.5,overlap_mask_area_threshold:Ge=.8,label_ids_to_fuse:Ue=null,target_sizes:He=null,subtask:ct=null}={}){if(Array.isArray(re)&&re.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const Mt=await Z(re),Et=Mt.map(Ke=>[Ke.height,Ke.width]),{pixel_values:x,pixel_mask:G}=await this.processor(Mt),C=await this.model({pixel_values:x,pixel_mask:G});let Y=null;if(ct!==null)Y=this.subtasks_mapping[ct];else for(let[Ke,xt]of Object.entries(this.subtasks_mapping))if(xt in this.processor.feature_extractor){Y=this.processor.feature_extractor[xt].bind(this.processor.feature_extractor),ct=Ke;break}const ce=this.model.config.id2label,Je=[];if(ct==="panoptic"||ct==="instance"){const Ke=Y(C,ke,je,Ge,Ue,He??Et)[0],xt=Ke.segmentation;for(const Qe of Ke.segments_info){const _t=new Uint8ClampedArray(xt.data.length);for(let tr=0;tr<xt.data.length;++tr)xt.data[tr]===Qe.id&&(_t[tr]=255);const Bt=new I.RawImage(_t,xt.dims[1],xt.dims[0],1);Je.push({score:Qe.score,label:ce[Qe.label_id],mask:Bt})}}else if(ct==="semantic"){const{segmentation:Ke,labels:xt}=Y(C,He??Et)[0];for(const Qe of xt){const _t=new Uint8ClampedArray(Ke.data.length);for(let tr=0;tr<Ke.data.length;++tr)Ke.data[tr]===Qe&&(_t[tr]=255);const Bt=new I.RawImage(_t,Ke.dims[1],Ke.dims[0],1);Je.push({score:null,label:ce[Qe],mask:Bt})}}else throw Error(`Subtask ${ct} not supported.`);return Je}}class U extends me{constructor(re){super(re)}async _call(re,ke,{hypothesis_template:je="This is a photo of {}"}={}){const Ge=Array.isArray(re),Ue=await Z(re),He=ke.map(G=>je.replace("{}",G)),ct=this.tokenizer(He,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:yt}=await this.processor(Ue),Mt=await this.model({...ct,pixel_values:yt}),Et=this.model.config.model_type==="siglip"?G=>G.sigmoid().data:G=>(0,N.softmax)(G.data),x=[];for(const G of Mt.logits_per_image){const Y=[...Et(G)].map((ce,Je)=>({score:ce,label:ke[Je]}));Y.sort((ce,Je)=>Je.score-ce.score),x.push(Y)}return Ge?x:x[0]}}class ue extends me{constructor(re){super(re)}async _call(re,{threshold:ke=.9,percentage:je=!1}={}){const Ge=Array.isArray(re);if(Ge&&re.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const Ue=await Z(re),He=je?null:Ue.map(C=>[C.height,C.width]),{pixel_values:ct,pixel_mask:yt}=await this.processor(Ue),Mt=await this.model({pixel_values:ct,pixel_mask:yt}),Et=this.processor.feature_extractor.post_process_object_detection(Mt,ke,He),x=this.model.config.id2label,G=Et.map(C=>C.boxes.map((Y,ce)=>({score:C.scores[ce],label:x[C.classes[ce]],box:le(Y,!je)})));return Ge?G:G[0]}}class Ce extends me{constructor(re){super(re)}async _call(re,ke,{threshold:je=.1,top_k:Ge=null,percentage:Ue=!1}={}){const He=Array.isArray(re),ct=await Z(re),yt=this.tokenizer(ke,{padding:!0,truncation:!0}),Mt=await this.processor(ct),Et=[];for(let x=0;x<ct.length;++x){const G=ct[x],C=Ue?null:[[G.height,G.width]],Y=Mt.pixel_values[x].unsqueeze_(0),ce=await this.model({...yt,pixel_values:Y}),Je=this.processor.feature_extractor.post_process_object_detection(ce,je,C,!0)[0];let Ke=Je.boxes.map((xt,Qe)=>({score:Je.scores[Qe],label:ke[Je.classes[Qe]],box:le(xt,!Ue)})).sort((xt,Qe)=>Qe.score-xt.score);Ge!==null&&(Ke=Ke.slice(0,Ge)),Et.push(Ke)}return He?Et:Et[0]}}class Q extends me{constructor(re){super(re)}async _call(re,ke,je={}){throw new Error("This pipeline is not yet supported in Transformers.js v3.")}}class qe extends me{constructor(ke){super(ke);xe(this,"DEFAULT_VOCODER_ID","Xenova/speecht5_hifigan");this.vocoder=ke.vocoder??null}async _call(ke,{speaker_embeddings:je=null}={}){return this.processor?this._call_text_to_spectrogram(ke,{speaker_embeddings:je}):this._call_text_to_waveform(ke)}async _call_text_to_waveform(ke){const je=this.tokenizer(ke,{padding:!0,truncation:!0}),{waveform:Ge}=await this.model(je),Ue=this.model.config.sampling_rate;return{audio:Ge.data,sampling_rate:Ue}}async _call_text_to_spectrogram(ke,{speaker_embeddings:je}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await fe.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof je=="string"||je instanceof URL)&&(je=new Float32Array(await(await fetch(je)).arrayBuffer())),je instanceof Float32Array)je=new V.Tensor("float32",je,[1,je.length]);else if(!(je instanceof V.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:Ge}=this.tokenizer(ke,{padding:!0,truncation:!0}),{waveform:Ue}=await this.model.generate_speech(Ge,je,{vocoder:this.vocoder}),He=this.processor.feature_extractor.config.sampling_rate;return{audio:Ue.data,sampling_rate:He}}}class ht extends me{constructor(re){super(re)}async _call(re){const ke=await Z(re),je=await this.processor(ke),Ge=await this.model(je),Ue=[];for(const He of Ge.reconstruction){const ct=He.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");Ue.push(I.RawImage.fromTensor(ct))}return Ue.length>1?Ue:Ue[0]}}class st extends me{constructor(re){super(re)}async _call(re){const ke=await Z(re),je=await this.processor(ke),{predicted_depth:Ge}=await this.model(je),Ue=[];for(let He=0;He<ke.length;++He){const ct=(0,V.interpolate)(Ge[He],ke[He].size.reverse(),"bilinear",!1),yt=ct.mul_(255/(0,N.max)(ct.data)[0]).to("uint8");Ue.push({predicted_depth:Ge[He],depth:I.RawImage.fromTensor(yt)})}return Ue.length>1?Ue:Ue[0]}}const dt=Object.freeze({"text-classification":{tokenizer:z.AutoTokenizer,pipeline:B,model:fe.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:z.AutoTokenizer,pipeline:J,model:fe.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:z.AutoTokenizer,pipeline:ne,model:fe.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:z.AutoTokenizer,pipeline:ae,model:fe.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:z.AutoTokenizer,pipeline:L,model:fe.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:z.AutoTokenizer,pipeline:A,model:fe.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:z.AutoTokenizer,pipeline:X,model:fe.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:z.AutoTokenizer,pipeline:k,model:fe.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:z.AutoTokenizer,pipeline:de,model:fe.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:Ie,model:fe.AutoModelForAudioClassification,processor:Me.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:z.AutoTokenizer,pipeline:Ae,model:fe.AutoModel,processor:Me.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:z.AutoTokenizer,pipeline:tt,model:[fe.AutoModelForSpeechSeq2Seq,fe.AutoModelForCTC],processor:Me.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:z.AutoTokenizer,pipeline:qe,model:[fe.AutoModelForTextToWaveform,fe.AutoModelForTextToSpectrogram],processor:[Me.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:z.AutoTokenizer,pipeline:Ye,model:fe.AutoModelForVision2Seq,processor:Me.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:pt,model:fe.AutoModelForImageClassification,processor:Me.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:_e,model:[fe.AutoModelForImageSegmentation,fe.AutoModelForSemanticSegmentation,fe.AutoModelForUniversalSegmentation],processor:Me.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:z.AutoTokenizer,pipeline:U,model:fe.AutoModel,processor:Me.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:ue,model:fe.AutoModelForObjectDetection,processor:Me.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:z.AutoTokenizer,pipeline:Ce,model:fe.AutoModelForZeroShotObjectDetection,processor:Me.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:z.AutoTokenizer,pipeline:Q,model:fe.AutoModelForDocumentQuestionAnswering,processor:Me.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:ht,model:fe.AutoModelForImageToImage,processor:Me.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:st,model:fe.AutoModelForDepthEstimation,processor:Me.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:z.AutoTokenizer,pipeline:ve,model:fe.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:Me.AutoProcessor,pipeline:Ee,model:[fe.AutoModelForImageFeatureExtraction,fe.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),Re=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function at(De,re=null,{progress_callback:ke=null,config:je=null,cache_dir:Ge=null,local_files_only:Ue=!1,revision:He="main",device:ct=null,dtype:yt=null,model_file_name:Mt=null,session_options:Et={}}={}){De=Re[De]??De;const x=dt[De.split("_",1)[0]];if(!x)throw Error(`Unsupported pipeline: ${De}. Must be one of [${Object.keys(dt)}]`);re||(re=x.default.model,console.log(`No model specified. Using default model: "${re}".`));const G={progress_callback:ke,config:je,cache_dir:Ge,local_files_only:Ue,revision:He,device:ct,dtype:yt,model_file_name:Mt,session_options:Et},C=new Map([["tokenizer",x.tokenizer],["model",x.model],["processor",x.processor]]),Y=await $t(C,re,G);Y.task=De,(0,Te.dispatchCallback)(ke,{status:"ready",task:De,model:re});const ce=x.pipeline;return new ce(Y)}async function $t(De,re,ke){const je=Object.create(null),Ge=[];for(const[Ue,He]of De.entries()){if(!He)continue;let ct;Array.isArray(He)?ct=new Promise(async(yt,Mt)=>{let Et;for(const x of He){if(x===null){yt(null);return}try{yt(await x.from_pretrained(re,ke));return}catch(G){if(G.message?.includes("Unsupported model type"))Et=G;else if(G.message?.includes("Could not locate file"))Et=G;else{Mt(G);return}}}Mt(Et)}):ct=He.from_pretrained(re,ke),je[Ue]=ct,Ge.push(ct)}await Promise.all(Ge);for(const[Ue,He]of Object.entries(je))je[Ue]=await He;return je}},"./src/processors.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{ASTFeatureExtractor:()=>Y,AutoProcessor:()=>qr,BeitFeatureExtractor:()=>ke,BitImageProcessor:()=>ve,CLIPFeatureExtractor:()=>Ie,CLIPImageProcessor:()=>Ae,ChineseCLIPFeatureExtractor:()=>tt,ClapFeatureExtractor:()=>ce,ConvNextFeatureExtractor:()=>pt,ConvNextImageProcessor:()=>_e,DPTFeatureExtractor:()=>k,DPTImageProcessor:()=>de,DeiTFeatureExtractor:()=>re,DetrFeatureExtractor:()=>Ue,DonutFeatureExtractor:()=>je,EfficientNetImageProcessor:()=>Ce,FeatureExtractor:()=>ae,Florence2Processor:()=>Dr,GLPNFeatureExtractor:()=>Ee,ImageFeatureExtractor:()=>X,MaskFormerFeatureExtractor:()=>He,MobileNetV1FeatureExtractor:()=>Q,MobileNetV2FeatureExtractor:()=>qe,MobileNetV3FeatureExtractor:()=>ht,MobileNetV4FeatureExtractor:()=>st,MobileViTFeatureExtractor:()=>dt,MobileViTImageProcessor:()=>Re,NougatImageProcessor:()=>Ge,OwlViTFeatureExtractor:()=>at,OwlViTProcessor:()=>Zr,Owlv2ImageProcessor:()=>$t,Processor:()=>Qe,PvtImageProcessor:()=>D,PyAnnoteFeatureExtractor:()=>Je,PyAnnoteProcessor:()=>jr,RTDetrImageProcessor:()=>De,SamImageProcessor:()=>yt,SamProcessor:()=>_t,SapiensFeatureExtractor:()=>L,SeamlessM4TFeatureExtractor:()=>C,SegformerFeatureExtractor:()=>A,SiglipImageProcessor:()=>Ye,SpeechT5FeatureExtractor:()=>xt,SpeechT5Processor:()=>Cr,Swin2SRImageProcessor:()=>Mt,ViTFeatureExtractor:()=>U,ViTImageProcessor:()=>ue,VitMatteImageProcessor:()=>Et,Wav2Vec2FeatureExtractor:()=>G,Wav2Vec2ProcessorWithLM:()=>tr,WeSpeakerFeatureExtractor:()=>Ke,WhisperFeatureExtractor:()=>x,WhisperProcessor:()=>Bt,YolosFeatureExtractor:()=>ct});var z=R("./src/utils/generic.js"),fe=R("./src/utils/core.js"),Me=R("./src/utils/hub.js"),$e=R("./src/utils/maths.js"),Te=R("./src/utils/tensor.js");R("./src/utils/image.js");var N=R("./src/utils/audio.js");function $([lt,j,ge,Pe]){return[lt-ge/2,j-Pe/2,lt+ge/2,j+Pe/2]}function V(lt,j=.5,ge=null,Pe=!1){const rt=lt.logits,we=lt.pred_boxes,[nt,gt,ft]=rt.dims;if(ge!==null&&ge.length!==nt)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let St=[];for(let mt=0;mt<nt;++mt){let It=ge!==null?ge[mt]:null,Lt={boxes:[],classes:[],scores:[]},zt=rt[mt],Ut=we[mt];for(let be=0;be<gt;++be){let et=zt[be],ot=[],Ht;if(Pe){Ht=et.sigmoid().data;for(let $r=0;$r<Ht.length;++$r)Ht[$r]>j&&ot.push($r)}else{let $r=(0,$e.max)(et.data)[1];if($r===ft-1||(Ht=(0,$e.softmax)(et.data),Ht[$r]<j))continue;ot.push($r)}for(const $r of ot){let Ur=Ut[be].data;Ur=$(Ur),It!==null&&(Ur=Ur.map((vr,Pr)=>vr*It[(Pr+1)%2])),Lt.boxes.push(Ur),Lt.classes.push($r),Lt.scores.push(Ht[$r])}}St.push(Lt)}return St}function I(lt,j=null){const ge=lt.logits,Pe=ge.dims[0];if(j!==null&&j.length!==Pe)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const rt=[];for(let we=0;we<Pe;++we){const nt=j!==null?j[we]:null;let gt=ge[we];nt!==null&&(gt=(0,Te.interpolate)(gt,nt,"bilinear",!1));const[ft,St]=nt??gt.dims.slice(-2),mt=new Te.Tensor("int32",new Int32Array(ft*St),[ft,St]),It=gt[0].data,Lt=mt.data;for(let be=1;be<gt.dims[0];++be){const et=gt[be].data;for(let ot=0;ot<et.length;++ot)et[ot]>It[ot]&&(It[ot]=et[ot],Lt[ot]=be)}const zt=new Array(gt.dims[0]);for(let be=0;be<Lt.length;++be){const et=Lt[be];zt[et]=et}const Ut=zt.filter(be=>be!==void 0);rt.push({segmentation:mt,labels:Ut})}return rt}function Z(lt,j,ge,Pe){const rt=[],we=[],nt=[];for(let gt=0;gt<lt.dims[0];++gt){const ft=lt[gt],St=j[gt],mt=(0,$e.max)(ft.data)[1];if(mt===Pe)continue;const Lt=(0,$e.softmax)(ft.data)[mt];Lt>ge&&(rt.push(St),we.push(Lt),nt.push(mt))}return[rt,we,nt]}function se(lt,j,ge,Pe=.5,rt=.8){const we=[];let nt=0,gt=0;const ft=j[ge].data;for(let mt=0;mt<lt.length;++mt)lt[mt]===ge&&(we.push(mt),++nt),ft[mt]>=Pe&&++gt;let St=nt>0&&gt>0;return St&&(St=nt/gt>rt),[St,we]}function le(lt,j,ge,Pe,rt,we=null,nt=null){const[gt,ft]=nt??lt[0].dims,St=new Te.Tensor("int32",new Int32Array(gt*ft),[gt,ft]),mt=[];if(nt!==null)for(let be=0;be<lt.length;++be)lt[be]=(0,Te.interpolate)(lt[be],nt,"bilinear",!1);const It=new Int32Array(lt[0].data.length),Lt=new Float32Array(lt[0].data.length);for(let be=0;be<lt.length;++be){let et=j[be];const ot=lt[be].data;for(let Ht=0;Ht<ot.length;++Ht)ot[Ht]*=et,ot[Ht]>Lt[Ht]&&(It[Ht]=be,Lt[Ht]=ot[Ht])}let zt=0;const Ut=St.data;for(let be=0;be<ge.length;++be){const et=ge[be],[ot,Ht]=se(It,lt,be,Pe,rt);if(ot){++zt;for(const $r of Ht)Ut[$r]=zt;mt.push({id:zt,label_id:et,score:j[be]})}}return[St,mt]}function me(lt,j=.5,ge=.5,Pe=.8,rt=null,we=null){rt===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),rt=new Set);const nt=lt.class_queries_logits??lt.logits,ft=(lt.masks_queries_logits??lt.pred_masks).sigmoid();let[St,mt,It]=nt.dims;if(It-=1,we!==null&&we.length!==St)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Lt=[];for(let zt=0;zt<St;++zt){let Ut=we!==null?we[zt]:null,be=nt[zt],et=ft[zt],[ot,Ht,$r]=Z(be,et,j,It);if($r.length===0){let[Pr,Ar]=Ut??et.dims.slice(-2),Dn=new Te.Tensor("int32",new Int32Array(Pr*Ar).fill(-1),[Pr,Ar]);Lt.push({segmentation:Dn,segments_info:[]});continue}let[Ur,vr]=le(ot,Ht,$r,ge,Pe,rt,Ut);Lt.push({segmentation:Ur,segments_info:vr})}return Lt}function B(lt,j){if(!(lt instanceof Float32Array||lt instanceof Float64Array))throw new Error(`${j} expects input to be a Float32Array or a Float64Array, but got ${lt?.constructor?.name??typeof lt} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}function J(lt,j,ge=0,Pe=null){const rt=lt/j;let we=(0,$e.bankers_round)(rt)*j;return Pe!==null&&we>Pe&&(we=Math.floor(rt)*j),we<ge&&(we=Math.ceil(rt)*j),we}function ne([lt,j],ge){return[Math.max(Math.floor(lt/ge),1)*ge,Math.max(Math.floor(j/ge),1)*ge]}class ae extends z.Callable{constructor(j){super(),this.config=j}}class X extends ae{constructor(j){super(j),this.image_mean=this.config.image_mean??this.config.mean,this.image_std=this.config.image_std??this.config.std,this.resample=this.config.resample??2,this.do_rescale=this.config.do_rescale??!0,this.rescale_factor=this.config.rescale_factor??.00392156862745098,this.do_normalize=this.config.do_normalize,this.do_resize=this.config.do_resize,this.do_thumbnail=this.config.do_thumbnail,this.size=this.config.size,this.size_divisibility=this.config.size_divisibility??this.config.size_divisor,this.do_center_crop=this.config.do_center_crop,this.crop_size=this.config.crop_size,this.do_convert_rgb=this.config.do_convert_rgb??!0,this.do_crop_margin=this.config.do_crop_margin,this.pad_size=this.config.pad_size,this.do_pad=this.config.do_pad,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=this.config.do_flip_channel_order??!1}async thumbnail(j,ge,Pe=2){const rt=j.height,we=j.width,nt=ge.height,gt=ge.width;let ft=Math.min(rt,nt),St=Math.min(we,gt);return ft===rt&&St===we?j:(rt>we?St=Math.floor(we*ft/rt):we>rt&&(ft=Math.floor(rt*St/we)),await j.resize(St,ft,{resample:Pe}))}async crop_margin(j,ge=200){const Pe=j.clone().grayscale(),rt=(0,$e.min)(Pe.data)[0],nt=(0,$e.max)(Pe.data)[0]-rt;if(nt===0)return j;const gt=ge/255;let ft=Pe.width,St=Pe.height,mt=0,It=0;const Lt=Pe.data;for(let zt=0;zt<Pe.height;++zt){const Ut=zt*Pe.width;for(let be=0;be<Pe.width;++be)(Lt[Ut+be]-rt)/nt<gt&&(ft=Math.min(ft,be),St=Math.min(St,zt),mt=Math.max(mt,be),It=Math.max(It,zt))}return j=await j.crop([ft,St,mt,It]),j}pad_image(j,ge,Pe,{mode:rt="constant",center:we=!1,constant_values:nt=0}={}){const[gt,ft,St]=ge;let mt,It;if(typeof Pe=="number"?(mt=Pe,It=Pe):(mt=Pe.width,It=Pe.height),mt!==ft||It!==gt){const Lt=new Float32Array(mt*It*St);if(Array.isArray(nt))for(let be=0;be<Lt.length;++be)Lt[be]=nt[be%St];else nt!==0&&Lt.fill(nt);const[zt,Ut]=we?[Math.floor((mt-ft)/2),Math.floor((It-gt)/2)]:[0,0];for(let be=0;be<gt;++be){const et=(be+Ut)*mt,ot=be*ft;for(let Ht=0;Ht<ft;++Ht){const $r=(et+Ht+zt)*St,Ur=(ot+Ht)*St;for(let vr=0;vr<St;++vr)Lt[$r+vr]=j[Ur+vr]}}if(rt==="symmetric"){if(we)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const be=gt-1,et=ft-1;for(let ot=0;ot<It;++ot){const Ht=ot*mt,$r=(0,fe.calculateReflectOffset)(ot,be)*ft;for(let Ur=0;Ur<mt;++Ur){if(ot<gt&&Ur<ft)continue;const vr=(Ht+Ur)*St,Pr=($r+(0,fe.calculateReflectOffset)(Ur,et))*St;for(let Ar=0;Ar<St;++Ar)Lt[vr+Ar]=j[Pr+Ar]}}}j=Lt,ge=[It,mt,St]}return[j,ge]}rescale(j){for(let ge=0;ge<j.length;++ge)j[ge]=this.rescale_factor*j[ge]}get_resize_output_image_size(j,ge){const[Pe,rt]=j.size;let we,nt;if(this.do_thumbnail){const{height:gt,width:ft}=ge;we=Math.min(gt,ft)}else Number.isInteger(ge)?(we=ge,nt=this.config.max_size??we):ge!==void 0&&(we=ge.shortest_edge,nt=ge.longest_edge);if(we!==void 0||nt!==void 0){const gt=we===void 0?1:Math.max(we/Pe,we/rt),ft=Pe*gt,St=rt*gt,mt=nt===void 0?1:Math.min(nt/ft,nt/St);let It=Math.floor(Number((ft*mt).toFixed(2))),Lt=Math.floor(Number((St*mt).toFixed(2)));return this.size_divisibility!==void 0&&([It,Lt]=ne([It,Lt],this.size_divisibility)),[It,Lt]}else if(ge!==void 0&&ge.width!==void 0&&ge.height!==void 0){let gt=ge.width,ft=ge.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let St=ft/rt,mt=gt/Pe;Math.abs(1-mt)<Math.abs(1-St)?St=mt:mt=St,ft=J(St*rt,this.config.ensure_multiple_of),gt=J(mt*Pe,this.config.ensure_multiple_of)}return[gt,ft]}else{if(this.size_divisibility!==void 0)return ne([Pe,rt],this.size_divisibility);throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(ge)}`)}}async resize(j){const[ge,Pe]=this.get_resize_output_image_size(j,this.size);return await j.resize(ge,Pe,{resample:this.resample})}async preprocess(j,{do_normalize:ge=null,do_pad:Pe=null,do_convert_rgb:rt=null,do_convert_grayscale:we=null,do_flip_channel_order:nt=null}={}){this.do_crop_margin&&(j=await this.crop_margin(j));const[gt,ft]=j.size;if(rt??this.do_convert_rgb?j=j.rgb():we&&(j=j.grayscale()),this.do_resize&&(j=await this.resize(j)),this.do_thumbnail&&(j=await this.thumbnail(j,this.size,this.resample)),this.do_center_crop){let zt,Ut;Number.isInteger(this.crop_size)?(zt=this.crop_size,Ut=this.crop_size):(zt=this.crop_size.width,Ut=this.crop_size.height),j=await j.center_crop(zt,Ut)}const St=[j.height,j.width];let mt=Float32Array.from(j.data),It=[j.height,j.width,j.channels];if(this.do_rescale&&this.rescale(mt),ge??this.do_normalize){let zt=this.image_mean;Array.isArray(this.image_mean)||(zt=new Array(j.channels).fill(zt));let Ut=this.image_std;if(Array.isArray(this.image_std)||(Ut=new Array(j.channels).fill(zt)),zt.length!==j.channels||Ut.length!==j.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${zt.length}) and \`image_std\` (${Ut.length}) must match the number of channels in the image (${j.channels}).`);for(let be=0;be<mt.length;be+=j.channels)for(let et=0;et<j.channels;++et)mt[be+et]=(mt[be+et]-zt[et])/Ut[et]}if(Pe??this.do_pad){if(this.pad_size)[mt,It]=this.pad_image(mt,[j.height,j.width,j.channels],this.pad_size);else if(this.size_divisibility){const[zt,Ut]=ne([It[1],It[0]],this.size_divisibility);[mt,It]=this.pad_image(mt,It,{width:zt,height:Ut})}}if(nt??this.do_flip_channel_order){if(It[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let zt=0;zt<mt.length;zt+=3){const Ut=mt[zt];mt[zt]=mt[zt+2],mt[zt+2]=Ut}}const Lt=new Te.Tensor("float32",mt,It).permute(2,0,1);return{original_size:[ft,gt],reshaped_input_size:St,pixel_values:Lt}}async _call(j,...ge){Array.isArray(j)||(j=[j]);const Pe=await Promise.all(j.map(we=>this.preprocess(we)));return{pixel_values:(0,Te.stack)(Pe.map(we=>we.pixel_values),0),original_sizes:Pe.map(we=>we.original_size),reshaped_input_sizes:Pe.map(we=>we.reshaped_input_size)}}}class L extends X{post_process_semantic_segmentation(...j){return I(...j)}}class A extends X{post_process_semantic_segmentation(...j){return I(...j)}}class D extends X{}class k extends X{}class de extends k{}class ve extends X{}class Ee extends X{}class Ie extends X{}class Ae extends Ie{}class tt extends X{}class Ye extends X{}class pt extends X{constructor(j){super(j),this.crop_pct=this.config.crop_pct??.875}async resize(j){const ge=this.size?.shortest_edge;if(ge===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(ge<384){const Pe=Math.floor(ge/this.crop_pct),[rt,we]=this.get_resize_output_image_size(j,{shortest_edge:Pe});j=await j.resize(rt,we,{resample:this.resample}),j=await j.center_crop(ge,ge)}else j=await j.resize(ge,ge,{resample:this.resample});return j}}class _e extends pt{}class U extends X{}class ue extends X{}class Ce extends X{constructor(j){super(j),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(ge=>ge*ge))}}class Q extends X{}class qe extends X{}class ht extends X{}class st extends X{}class dt extends X{}class Re extends dt{}class at extends X{post_process_object_detection(...j){return V(...j)}}class $t extends at{}class De extends X{post_process_object_detection(...j){return V(...j)}}class re extends X{}class ke extends X{}class je extends X{pad_image(j,ge,Pe,rt={}){const[we,nt,gt]=ge;let ft=this.image_mean;Array.isArray(this.image_mean)||(ft=new Array(gt).fill(ft));let St=this.image_std;Array.isArray(St)||(St=new Array(gt).fill(ft));const mt=ft.map((It,Lt)=>-It/St[Lt]);return super.pad_image(j,ge,Pe,{center:!0,constant_values:mt,...rt})}}class Ge extends je{}class Ue extends X{async _call(j){const ge=await super._call(j),Pe=[ge.pixel_values.dims[0],64,64],rt=(0,Te.full)(Pe,1n);return{...ge,pixel_mask:rt}}post_process_object_detection(...j){return V(...j)}post_process_panoptic_segmentation(...j){return me(...j)}post_process_instance_segmentation(){throw Error("Not implemented yet")}}class He extends X{post_process_panoptic_segmentation(...j){return me(...j)}post_process_instance_segmentation(){throw Error("Not implemented yet")}}class ct extends X{post_process_object_detection(...j){return V(...j)}}class yt extends X{reshape_input_points(j,ge,Pe,rt=!1){j=structuredClone(j);let we=(0,fe.calculateDimensions)(j);if(we.length===3)rt||(we=[1,...we]),j=[j];else if(we.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let nt=0;nt<j.length;++nt){let gt=ge[nt],ft=Pe[nt],St=[ft[0]/gt[0],ft[1]/gt[1]];for(let mt=0;mt<j[nt].length;++mt)for(let It=0;It<j[nt][mt].length;++It)for(let Lt=0;Lt<j[nt][mt][It].length;++Lt)j[nt][mt][It][Lt]*=St[Lt%2]}return new Te.Tensor("float32",Float32Array.from(j.flat(1/0)),we)}add_input_labels(j,ge){let Pe=(0,fe.calculateDimensions)(j);if(Pe.length===2)Pe=[1,...Pe],j=[j];else if(Pe.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(Pe.some((rt,we)=>rt!==ge.dims[we]))throw Error(`The first ${Pe.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new Te.Tensor("int64",j.flat(1/0).map(BigInt),Pe)}async _call(j,{input_points:ge=null,input_labels:Pe=null,input_boxes:rt=null}={}){const we=await super._call(j);if(ge&&(we.input_points=this.reshape_input_points(ge,we.original_sizes,we.reshaped_input_sizes)),Pe){if(!we.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");we.input_labels=this.add_input_labels(Pe,we.input_points)}return rt&&(we.input_boxes=this.reshape_input_points(rt,we.original_sizes,we.reshaped_input_sizes,!0)),we}async post_process_masks(j,ge,Pe,{mask_threshold:rt=0,binarize:we=!0,pad_size:nt=null}={}){const gt=[];nt=nt??this.pad_size;const ft=[nt.height,nt.width];for(let St=0;St<ge.length;++St){const mt=ge[St],It=Pe[St];let Lt=await(0,Te.interpolate_4d)(j[St],{mode:"bilinear",size:ft});if(Lt=Lt.slice(null,null,[0,It[0]],[0,It[1]]),Lt=await(0,Te.interpolate_4d)(Lt,{mode:"bilinear",size:mt}),we){const zt=Lt.data,Ut=new Uint8Array(zt.length);for(let be=0;be<zt.length;++be)zt[be]>rt&&(Ut[be]=1);Lt=new Te.Tensor("bool",Ut,Lt.dims)}gt.push(Lt)}return gt}generate_crop_boxes(j,ge,{crop_n_layers:Pe=0,overlap_ratio:rt=.3413333333333333,points_per_crop:we=32,crop_n_points_downscale_factor:nt=1}={}){}}class Mt extends X{pad_image(j,ge,Pe,rt={}){const[we,nt,gt]=ge;return super.pad_image(j,ge,{width:nt+(Pe-nt%Pe)%Pe,height:we+(Pe-we%Pe)%Pe},{mode:"symmetric",center:!1,constant_values:-1,...rt})}}class Et extends X{async _call(j,ge){Array.isArray(j)||(j=[j]),Array.isArray(ge)||(ge=[ge]);const Pe=await Promise.all(j.map(nt=>this.preprocess(nt))),rt=await Promise.all(ge.map(nt=>this.preprocess(nt,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,Te.stack)(Pe.map((nt,gt)=>(0,Te.cat)([nt.pixel_values,rt[gt].pixel_values],0)),0),original_sizes:Pe.map(nt=>nt.original_size),reshaped_input_sizes:Pe.map(nt=>nt.reshaped_input_size)}}}class x extends ae{constructor(j){var ge;super(j),(ge=this.config).mel_filters??(ge.mel_filters=(0,N.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney")),this.window=(0,N.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(j){const ge=await(0,N.spectrogram)(j,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),Pe=ge.data,rt=(0,$e.max)(Pe)[0];for(let we=0;we<Pe.length;++we)Pe[we]=(Math.max(Pe[we],rt-8)+4)/4;return ge}async _call(j){B(j,"WhisperFeatureExtractor");let ge;return j.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),ge=j.slice(0,this.config.n_samples)):(ge=new Float32Array(this.config.n_samples),ge.set(j)),{input_features:(await this._extract_fbank_features(ge)).unsqueeze_(0)}}}class G extends ae{_zero_mean_unit_var_norm(j){const Pe=j.reduce((we,nt)=>we+nt,0)/j.length,rt=j.reduce((we,nt)=>we+(nt-Pe)**2,0)/j.length;return j.map(we=>(we-Pe)/Math.sqrt(rt+1e-7))}async _call(j){B(j,"Wav2Vec2FeatureExtractor"),j instanceof Float64Array&&(j=new Float32Array(j));let ge=j;this.config.do_normalize&&(ge=this._zero_mean_unit_var_norm(ge));const Pe=[1,ge.length];return{input_values:new Te.Tensor("float32",ge,Pe),attention_mask:new Te.Tensor("int64",new BigInt64Array(ge.length).fill(1n),Pe)}}}class C extends ae{constructor(j){super(j);const ge=this.config.sampling_rate,Pe=(0,N.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ge/2),ge,null,"kaldi",!0);for(let rt=0;rt<Pe.length;++rt)Pe[rt].push(0);this.mel_filters=Pe,this.window=(0,N.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(j,ge){return j=j.map(Pe=>Pe*32768),(0,N.spectrogram)(j,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:ge,transpose:!0})}async _call(j,{padding:ge=!0,pad_to_multiple_of:Pe=2,do_normalize_per_mel_bins:rt=!0,return_attention_mask:we=!0}={}){B(j,"SeamlessM4TFeatureExtractor");let nt=await this._extract_fbank_features(j,this.config.max_length);if(rt){const[Ut,be]=nt.dims,et=nt.data;for(let ot=0;ot<be;++ot){let Ht=0;for(let Pr=0;Pr<Ut;++Pr)Ht+=et[Pr*be+ot];const $r=Ht/Ut;let Ur=0;for(let Pr=0;Pr<Ut;++Pr)Ur+=(et[Pr*be+ot]-$r)**2;Ur/=Ut-1;const vr=Math.sqrt(Ur+1e-7);for(let Pr=0;Pr<Ut;++Pr){const Ar=Pr*be+ot;et[Ar]=(et[Ar]-$r)/vr}}}let gt;if(ge){const[Ut,be]=nt.dims,et=nt.data,ot=Ut%Pe;if(ot>0){const Ht=new Float32Array(be*(Ut+ot));Ht.set(et),Ht.fill(this.config.padding_value,et.length);const $r=Ut+ot;nt=new Te.Tensor(nt.type,Ht,[$r,be]),we&&(gt=new Te.Tensor("int64",new BigInt64Array($r),[1,$r]),gt.data.fill(1n,0,Ut))}}const[ft,St]=nt.dims,mt=this.config.stride;if(ft%mt!==0)throw new Error(`The number of frames (${ft}) must be a multiple of the stride (${mt}).`);const Lt=nt.view(1,Math.floor(ft/mt),St*mt),zt={input_features:Lt};if(we){const Ut=Lt.dims[1],be=new BigInt64Array(Ut);if(gt){const et=gt.data;for(let ot=1,Ht=0;ot<ft;ot+=mt,++Ht)be[Ht]=et[ot]}else be.fill(1n);zt.attention_mask=new Te.Tensor("int64",be,[1,Ut])}return zt}}class Y extends ae{constructor(j){super(j);const ge=this.config.sampling_rate,Pe=(0,N.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ge/2),ge,null,"kaldi",!0);for(let rt=0;rt<Pe.length;++rt)Pe[rt].push(0);this.mel_filters=Pe,this.window=(0,N.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(j,ge){return(0,N.spectrogram)(j,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:ge,transpose:!0})}async _call(j){B(j,"ASTFeatureExtractor");const ge=await this._extract_fbank_features(j,this.config.max_length);if(this.config.do_normalize){const Pe=this.std*2,rt=ge.data;for(let we=0;we<rt.length;++we)rt[we]=(rt[we]-this.mean)/Pe}return{input_values:ge.unsqueeze_(0)}}}class ce extends ae{constructor(j){super(j),this.mel_filters=(0,N.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,N.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,N.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(j,ge,Pe,rt){let we;const nt=j.length-ge;if(nt>0)if(Pe==="rand_trunc"){const gt=Math.floor(Math.random()*(nt+1));j=j.subarray(gt,gt+ge),we=await this._extract_fbank_features(j,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${Pe}" not implemented`);else{if(nt<0){let gt=new Float64Array(ge);if(gt.set(j),rt==="repeat")for(let ft=j.length;ft<ge;ft+=j.length)gt.set(j.subarray(0,Math.min(j.length,ge-ft)),ft);else if(rt==="repeatpad")for(let ft=j.length;ft<-nt;ft+=j.length)gt.set(j,ft);j=gt}if(Pe==="fusion")throw new Error(`Truncation strategy "${Pe}" not implemented`);we=await this._extract_fbank_features(j,this.mel_filters_slaney,this.config.nb_max_samples)}return we.unsqueeze_(0)}async _extract_fbank_features(j,ge,Pe=null){return(0,N.spectrogram)(j,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:ge,log_mel:"dB",max_num_frames:Pe,do_pad:!1,transpose:!0})}async _call(j,{max_length:ge=null}={}){return B(j,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(j,ge??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}class Je extends ae{async _call(j){B(j,"PyAnnoteFeatureExtractor"),j instanceof Float64Array&&(j=new Float32Array(j));const ge=[1,1,j.length];return{input_values:new Te.Tensor("float32",j,ge)}}samples_to_frames(j){return(j-this.config.offset)/this.config.step}post_process_speaker_diarization(j,ge){const Pe=ge/this.samples_to_frames(ge)/this.config.sampling_rate,rt=[];for(const we of j.tolist()){const nt=[];let gt=-1;for(let ft=0;ft<we.length;++ft){const St=(0,$e.softmax)(we[ft]),[mt,It]=(0,$e.max)(St),[Lt,zt]=[ft,ft+1];It!==gt?(gt=It,nt.push({id:It,start:Lt,end:zt,score:mt})):(nt.at(-1).end=zt,nt.at(-1).score+=mt)}rt.push(nt.map(({id:ft,start:St,end:mt,score:It})=>({id:ft,start:St*Pe,end:mt*Pe,confidence:It/(mt-St)})))}return rt}}class Ke extends ae{constructor(j){super(j);const ge=this.config.sampling_rate,Pe=(0,N.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ge/2),ge,null,"kaldi",!0);for(let rt=0;rt<Pe.length;++rt)Pe[rt].push(0);this.mel_filters=Pe,this.window=(0,N.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(j){return j=j.map(ge=>ge*32768),(0,N.spectrogram)(j,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(j){B(j,"WeSpeakerFeatureExtractor");const ge=(await this._extract_fbank_features(j)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const Pe=ge.mean(1).data,rt=ge.data,[we,nt,gt]=ge.dims;for(let ft=0;ft<we;++ft){const St=ft*nt*gt,mt=ft*gt;for(let It=0;It<nt;++It){const Lt=St+It*gt;for(let zt=0;zt<gt;++zt)rt[Lt+zt]-=Pe[mt+zt]}}}return{input_features:ge}}}class xt extends ae{}class Qe extends z.Callable{constructor(j){super(),this.feature_extractor=j}async _call(j,...ge){return await this.feature_extractor(j,...ge)}}class _t extends Qe{async _call(...j){return await this.feature_extractor(...j)}post_process_masks(...j){return this.feature_extractor.post_process_masks(...j)}reshape_input_points(...j){return this.feature_extractor.reshape_input_points(...j)}}class Bt extends Qe{async _call(j){return await this.feature_extractor(j)}}class tr extends Qe{async _call(j){return await this.feature_extractor(j)}}class jr extends Qe{async _call(j){return await this.feature_extractor(j)}post_process_speaker_diarization(...j){return this.feature_extractor.post_process_speaker_diarization(...j)}}class Cr extends Qe{async _call(j){return await this.feature_extractor(j)}}class Zr extends Qe{}class Dr extends Qe{constructor(j){super(j);const{tasks_answer_post_processing_type:ge,task_prompts_without_inputs:Pe,task_prompts_with_input:rt}=j.config;this.tasks_answer_post_processing_type=new Map(Object.entries(ge??{})),this.task_prompts_without_inputs=new Map(Object.entries(Pe??{})),this.task_prompts_with_input=new Map(Object.entries(rt??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(j){typeof j=="string"&&(j=[j]);const ge=[];for(const Pe of j)if(this.task_prompts_without_inputs.has(Pe))ge.push(this.task_prompts_without_inputs.get(Pe));else{for(const[rt,we]of this.task_prompts_with_input)if(Pe.includes(rt)){ge.push(we.replaceAll("{input}",Pe).replaceAll(rt,""));break}ge.length!==j.length&&ge.push(Pe)}return ge}post_process_generation(j,ge,Pe){const rt=this.tasks_answer_post_processing_type.get(ge)??"pure_text";j=j.replaceAll("<s>","").replaceAll("</s>","");let we;switch(rt){case"pure_text":we=j;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const nt=rt==="ocr"?"quad_boxes":"bboxes",gt=j.matchAll(this.regexes[nt]),ft=[],St=[];for(const[mt,It,...Lt]of gt)ft.push(It?It.trim():ft.at(-1)??""),St.push(Lt.map((zt,Ut)=>(Number(zt)+.5)/this.size_per_bin*Pe[Ut%2]));we={labels:ft,[nt]:St};break;default:throw new Error(`Task "${ge}" (of type "${rt}") not yet implemented.`)}return{[ge]:we}}}class qr{static async from_pretrained(j,{progress_callback:ge=null,config:Pe=null,cache_dir:rt=null,local_files_only:we=!1,revision:nt="main"}={}){let gt=Pe??await(0,Me.getModelJSON)(j,"preprocessor_config.json",!0,{progress_callback:ge,config:Pe,cache_dir:rt,local_files_only:we,revision:nt}),ft=gt.feature_extractor_type??gt.image_processor_type,St=this.FEATURE_EXTRACTOR_CLASS_MAPPING[ft];if(!St)if(gt.size!==void 0)console.warn(`Feature extractor type "${ft}" not found, assuming ImageFeatureExtractor due to size parameter in config.`),St=X;else throw new Error(`Unknown Feature Extractor type: ${ft}`);let mt=this.PROCESSOR_CLASS_MAPPING[gt.processor_class]??Qe,It=new St(gt);return new mt(It)}}xe(qr,"FEATURE_EXTRACTOR_CLASS_MAPPING",{ImageFeatureExtractor:X,WhisperFeatureExtractor:x,ViTFeatureExtractor:U,MobileViTFeatureExtractor:dt,MobileViTImageProcessor:Re,MobileNetV1FeatureExtractor:Q,MobileNetV2FeatureExtractor:qe,MobileNetV3FeatureExtractor:ht,MobileNetV4FeatureExtractor:st,OwlViTFeatureExtractor:at,Owlv2ImageProcessor:$t,CLIPFeatureExtractor:Ie,CLIPImageProcessor:Ae,Florence2Processor:Dr,ChineseCLIPFeatureExtractor:tt,SiglipImageProcessor:Ye,ConvNextFeatureExtractor:pt,ConvNextImageProcessor:_e,SegformerFeatureExtractor:A,SapiensFeatureExtractor:L,BitImageProcessor:ve,DPTImageProcessor:de,DPTFeatureExtractor:k,PvtImageProcessor:D,GLPNFeatureExtractor:Ee,BeitFeatureExtractor:ke,DeiTFeatureExtractor:re,DetrFeatureExtractor:Ue,RTDetrImageProcessor:De,MaskFormerFeatureExtractor:He,YolosFeatureExtractor:ct,DonutFeatureExtractor:je,NougatImageProcessor:Ge,EfficientNetImageProcessor:Ce,ViTImageProcessor:ue,VitMatteImageProcessor:Et,SamImageProcessor:yt,Swin2SRImageProcessor:Mt,Wav2Vec2FeatureExtractor:G,SeamlessM4TFeatureExtractor:C,SpeechT5FeatureExtractor:xt,ASTFeatureExtractor:Y,ClapFeatureExtractor:ce,PyAnnoteFeatureExtractor:Je,WeSpeakerFeatureExtractor:Ke}),xe(qr,"PROCESSOR_CLASS_MAPPING",{WhisperProcessor:Bt,Wav2Vec2ProcessorWithLM:tr,PyAnnoteProcessor:jr,SamProcessor:_t,SpeechT5Processor:Cr,OwlViTProcessor:Zr,Florence2Processor:Dr})},"./src/tokenizers.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{AlbertTokenizer:()=>gt,AutoTokenizer:()=>wn,BartTokenizer:()=>vr,BertTokenizer:()=>nt,BlenderbotSmallTokenizer:()=>Ss,BlenderbotTokenizer:()=>ps,BloomTokenizer:()=>Wr,CLIPTokenizer:()=>Kt,CamembertTokenizer:()=>et,CodeGenTokenizer:()=>cs,CodeLlamaTokenizer:()=>Hs,CohereTokenizer:()=>Gr,ConvBertTokenizer:()=>zt,DebertaTokenizer:()=>mt,DebertaV2Tokenizer:()=>It,DistilBertTokenizer:()=>be,ElectraTokenizer:()=>Ht,EsmTokenizer:()=>qn,FalconTokenizer:()=>Ms,GPT2Tokenizer:()=>Ur,GPTNeoXTokenizer:()=>vs,GemmaTokenizer:()=>us,Grok1Tokenizer:()=>In,HerbertTokenizer:()=>Lt,LlamaTokenizer:()=>Bn,M2M100Tokenizer:()=>Jn,MBart50Tokenizer:()=>Ar,MBartTokenizer:()=>Pr,MPNetTokenizer:()=>bs,MarianTokenizer:()=>xs,MobileBertTokenizer:()=>ft,NllbTokenizer:()=>Ln,NougatTokenizer:()=>hs,PreTrainedTokenizer:()=>we,Qwen2Tokenizer:()=>Ks,RoFormerTokenizer:()=>Ut,RobertaTokenizer:()=>Dn,SiglipTokenizer:()=>es,SpeechT5Tokenizer:()=>Es,SqueezeBertTokenizer:()=>St,T5Tokenizer:()=>$r,TokenizerModel:()=>Ee,VitsTokenizer:()=>Cs,Wav2Vec2CTCTokenizer:()=>Ts,WhisperTokenizer:()=>ds,XLMRobertaTokenizer:()=>ys,XLMTokenizer:()=>ot,is_chinese_char:()=>X});var z=R("./src/utils/generic.js"),fe=R("./src/utils/core.js"),Me=R("./src/utils/hub.js"),$e=R("./src/utils/maths.js"),Te=R("./src/utils/tensor.js"),N=R("./src/utils/data-structures.js"),$=R("./node_modules/@huggingface/jinja/dist/index.js"),V=R("./src/models/whisper/common_whisper.js"),I=R("./src/utils/constants.js");async function Z(ye,_){const P=await Promise.all([(0,Me.getModelJSON)(ye,"tokenizer.json",!0,_),(0,Me.getModelJSON)(ye,"tokenizer_config.json",!0,_)]);return _.legacy!==null&&(P[1].legacy=_.legacy),P}function se(ye,_){const P=[];let H=0;for(const ie of ye.matchAll(_)){const pe=ie[0];H<ie.index&&P.push(ye.slice(H,ie.index)),pe.length>0&&P.push(pe),H=ie.index+pe.length}return H<ye.length&&P.push(ye.slice(H)),P}function le(ye,_=!0){if(ye.Regex!==void 0){let P=ye.Regex.replace(/\\([#&~])/g,"$1");for(const[H,ie]of de)P=P.replaceAll(H,ie);return new RegExp(P,"gu")}else if(ye.String!==void 0){const P=(0,fe.escapeRegExp)(ye.String);return new RegExp(_?P:`(${P})`,"gu")}else return console.warn("Unknown pattern type:",ye),null}function me(ye){return new Map(Object.entries(ye))}function B(ye){const _=ye.dims;switch(_.length){case 1:return ye.tolist();case 2:if(_[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return ye.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${_.length}.`)}}function J(ye){return ye.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function ne(ye){return ye.replace(/[\u0300-\u036f]/g,"")}function ae(ye){return ne(ye.toLowerCase())}function X(ye){return ye>=19968&&ye<=40959||ye>=13312&&ye<=19903||ye>=131072&&ye<=173791||ye>=173824&&ye<=177983||ye>=177984&&ye<=178207||ye>=178208&&ye<=183983||ye>=63744&&ye<=64255||ye>=194560&&ye<=195103}function L(ye,_,P){const H=[];let ie=0;for(;ie<ye.length;){if(H.push(ye[ie]),(_.get(ye[ie])??P)!==P){++ie;continue}for(;++ie<ye.length&&(_.get(ye[ie])??P)===P;)_.get(H.at(-1))!==P&&(H[H.length-1]+=ye[ie])}return H}function A(ye){return ye.match(/\S+/g)||[]}const D="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",k=new RegExp(`^[${D}]+$`,"gu"),de=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"]]);class ve{constructor(_){this.content=_.content,this.id=_.id,this.single_word=_.single_word??!1,this.lstrip=_.lstrip??!1,this.rstrip=_.rstrip??!1,this.special=_.special??!1,this.normalized=_.normalized??null}}class Ee extends z.Callable{constructor(_){super(),this.config=_,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(_,...P){switch(_.type){case"WordPiece":return new Ie(_);case"Unigram":return new Ae(_,...P);case"BPE":return new pt(_);default:if(_.vocab)return new _e(_,...P);throw new Error(`Unknown TokenizerModel type: ${_.type}`)}}_call(_){return _=this.encode(_),this.fuse_unk&&(_=L(_,this.tokens_to_ids,this.unk_token_id)),_}encode(_){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(_){return _.map(P=>this.tokens_to_ids.get(P)??this.unk_token_id)}convert_ids_to_tokens(_){return _.map(P=>this.vocab[P]??this.unk_token)}}class Ie extends Ee{constructor(_){super(_),this.tokens_to_ids=me(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.max_input_chars_per_word=_.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[P,H]of this.tokens_to_ids)this.vocab[H]=P}encode(_){const P=[];for(const H of _){const ie=[...H];if(ie.length>this.max_input_chars_per_word){P.push(this.unk_token);continue}let pe=!1,ze=0;const wt=[];for(;ze<ie.length;){let Tt=ie.length,vt=null;for(;ze<Tt;){let Ot=ie.slice(ze,Tt).join("");if(ze>0&&(Ot=this.config.continuing_subword_prefix+Ot),this.tokens_to_ids.has(Ot)){vt=Ot;break}--Tt}if(vt===null){pe=!0;break}wt.push(vt),ze=Tt}pe?P.push(this.unk_token):P.push(...wt)}return P}}class Ae extends Ee{constructor(_,P){super(_);const H=_.vocab.length;this.vocab=new Array(H),this.scores=new Array(H);for(let ie=0;ie<H;++ie){const pe=_.vocab[ie];this.vocab[ie]=pe[0],this.scores[ie]=pe[1]}this.unk_token_id=_.unk_id,this.unk_token=this.vocab[_.unk_id],this.tokens_to_ids=new Map(this.vocab.map((ie,pe)=>[ie,pe])),this.bosToken=" ",this.bosTokenId=this.tokens_to_ids.get(this.bosToken),this.eosToken=P.eos_token,this.eosTokenId=this.tokens_to_ids.get(this.eosToken),this.unkToken=this.vocab[this.unk_token_id],this.minScore=(0,$e.min)(this.scores)[0],this.unkScore=this.minScore-10,this.scores[this.unk_token_id]=this.unkScore,this.trie=new N.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(_){const P=_.sentence,H=P.length;let ie=0;for(;ie<H;){let ze=!1;for(let wt of this.trie.commonPrefixSearch(P.slice(ie))){const Tt=this.tokens_to_ids.get(wt),vt=this.scores[Tt],Ot=wt.length;_.insert(ie,Ot,vt,Tt),!ze&&Ot===1&&(ze=!0)}ze||_.insert(ie,1,this.unkScore,this.unk_token_id),ie+=1}}tokenize(_){const P=new N.TokenLattice(_,this.bosTokenId,this.eosTokenId);return this.populateNodes(P),P.tokens()}encode(_){const P=[];for(const H of _){const ie=this.tokenize(H);P.push(...ie)}return P}}const tt=(()=>{const ye=[...Array.from({length:94},(ie,pe)=>pe+33),...Array.from({length:12},(ie,pe)=>pe+161),...Array.from({length:82},(ie,pe)=>pe+174)],_=ye.slice();let P=0;for(let ie=0;ie<256;++ie)ye.includes(ie)||(ye.push(ie),_.push(256+P),P+=1);const H=_.map(ie=>String.fromCharCode(ie));return Object.fromEntries(ye.map((ie,pe)=>[ie,H[pe]]))})(),Ye=(0,fe.reverseDictionary)(tt);class pt extends Ee{constructor(_){super(_),this.BPE_SPLIT_TOKEN=" ",this.tokens_to_ids=me(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[P,H]of this.tokens_to_ids)this.vocab[H]=P;this.bpe_ranks=new Map(_.merges.map((P,H)=>[P,H])),this.merges=_.merges.map(P=>P.split(this.BPE_SPLIT_TOKEN)),this.end_of_word_suffix=_.end_of_word_suffix,this.continuing_subword_suffix=_.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.cache=new Map}bpe(_){if(_.length===0)return[];const P=this.cache.get(_);if(P!==void 0)return P;const H=Array.from(_);this.end_of_word_suffix&&(H[H.length-1]+=this.end_of_word_suffix);let ie=[];if(H.length>1){const pe=new N.PriorityQueue((Tt,vt)=>Tt.score<vt.score);let ze={token:H[0],bias:0,prev:null,next:null},wt=ze;for(let Tt=1;Tt<H.length;++Tt){const vt={bias:Tt/H.length,token:H[Tt],prev:wt,next:null};wt.next=vt,this._add_node(pe,wt),wt=vt}for(;!pe.isEmpty();){const Tt=pe.pop();if(Tt.deleted||!Tt.next||Tt.next.deleted)continue;if(Tt.deleted=!0,Tt.next.deleted=!0,Tt.prev){const Ot={...Tt.prev};Tt.prev.deleted=!0,Tt.prev=Ot,Ot.prev?Ot.prev.next=Ot:ze=Ot}const vt={token:Tt.token+Tt.next.token,bias:Tt.bias,prev:Tt.prev,next:Tt.next.next};vt.prev?(vt.prev.next=vt,this._add_node(pe,vt.prev)):ze=vt,vt.next&&(vt.next.prev=vt,this._add_node(pe,vt))}for(let Tt=ze;Tt!==null;Tt=Tt.next)ie.push(Tt.token)}else ie=H;if(this.continuing_subword_suffix)for(let pe=0;pe<ie.length-1;++pe)ie[pe]+=this.continuing_subword_suffix;return this.cache.set(_,ie),ie}_add_node(_,P){const H=this.bpe_ranks.get(P.token+this.BPE_SPLIT_TOKEN+P.next.token);H!==void 0&&(P.score=H+P.bias,_.push(P))}encode(_){const P=[];for(const H of _){if(this.ignore_merges&&this.tokens_to_ids.has(H)){P.push(H);continue}const ie=this.bpe(H);for(const pe of ie)if(this.tokens_to_ids.has(pe))P.push(pe);else if(this.byte_fallback){const ze=Array.from(this.text_encoder.encode(pe)).map(wt=>`<0x${wt.toString(16).toUpperCase().padStart(2,"0")}>`);ze.every(wt=>this.tokens_to_ids.has(wt))?P.push(...ze):P.push(this.unk_token)}else P.push(this.unk_token)}return P}}class _e extends Ee{constructor(_,P){super(_),this.tokens_to_ids=me(P.target_lang?_.vocab[P.target_lang]:_.vocab),this.bos_token=P.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=P.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=P.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=P.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[H,ie]of this.tokens_to_ids)this.vocab[ie]=H}encode(_){return _}}class U extends z.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"BertNormalizer":return new $t(_);case"Precompiled":return new Zr(_);case"Sequence":return new at(_);case"Replace":return new ue(_);case"NFC":return new Ce(_);case"NFKC":return new Q(_);case"NFKD":return new qe(_);case"Strip":return new ht(_);case"StripAccents":return new st(_);case"Lowercase":return new dt(_);case"Prepend":return new Re(_);default:throw new Error(`Unknown Normalizer type: ${_.type}`)}}normalize(_){throw Error("normalize should be implemented in subclass.")}_call(_){return this.normalize(_)}}class ue extends U{normalize(_){const P=le(this.config.pattern);return P===null?_:_.replaceAll(P,this.config.content)}}class Ce extends U{normalize(_){return _=_.normalize("NFC"),_}}class Q extends U{normalize(_){return _=_.normalize("NFKC"),_}}class qe extends U{normalize(_){return _=_.normalize("NFKD"),_}}class ht extends U{normalize(_){return this.config.strip_left&&this.config.strip_right?_=_.trim():(this.config.strip_left&&(_=_.trimStart()),this.config.strip_right&&(_=_.trimEnd())),_}}class st extends U{normalize(_){return _=ne(_),_}}class dt extends U{normalize(_){return _=_.toLowerCase(),_}}class Re extends U{normalize(_){return _=this.config.prepend+_,_}}class at extends U{constructor(_){super(_),this.normalizers=_.normalizers.map(P=>U.fromConfig(P))}normalize(_){return this.normalizers.reduce((P,H)=>H.normalize(P),_)}}class $t extends U{_tokenize_chinese_chars(_){const P=[];for(let H=0;H<_.length;++H){const ie=_[H],pe=ie.charCodeAt(0);X(pe)?(P.push(" "),P.push(ie),P.push(" ")):P.push(ie)}return P.join("")}stripAccents(_){return _.normalize("NFD").replace(/[\u0300-\u036f]/g,"")}_is_control(_){switch(_){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(_)}}_clean_text(_){const P=[];for(const H of _){const ie=H.charCodeAt(0);ie===0||ie===65533||this._is_control(H)||(/^\s$/.test(H)?P.push(" "):P.push(H))}return P.join("")}normalize(_){return this.config.clean_text&&(_=this._clean_text(_)),this.config.handle_chinese_chars&&(_=this._tokenize_chinese_chars(_)),this.config.lowercase?(_=_.toLowerCase(),this.config.strip_accents!==!1&&(_=this.stripAccents(_))):this.config.strip_accents&&(_=this.stripAccents(_)),_}}class De extends z.Callable{static fromConfig(_){if(_===null)return null;switch(_.type){case"BertPreTokenizer":return new re(_);case"Sequence":return new Dr(_);case"Whitespace":return new qr(_);case"WhitespaceSplit":return new lt(_);case"Metaspace":return new jr(_);case"ByteLevel":return new ke(_);case"Split":return new je(_);case"Punctuation":return new Ge(_);case"Digits":return new Ue(_);case"Replace":return new j(_);default:throw new Error(`Unknown PreTokenizer type: ${_.type}`)}}pre_tokenize_text(_,P){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(_,P){return(Array.isArray(_)?_.map(H=>this.pre_tokenize_text(H,P)):this.pre_tokenize_text(_,P)).flat()}_call(_,P){return this.pre_tokenize(_,P)}}class re extends De{constructor(_){super(),this.pattern=new RegExp(`[^\\s${D}]+|[${D}]`,"gu")}pre_tokenize_text(_,P){return _.trim().match(this.pattern)||[]}}class ke extends De{constructor(_){super(),this.config=_,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=tt,this.text_encoder=new TextEncoder}pre_tokenize_text(_,P){return this.add_prefix_space&&!_.startsWith(" ")&&(_=" "+_),(this.use_regex?_.match(this.pattern)||[]:[_]).map(ie=>Array.from(this.text_encoder.encode(ie),pe=>this.byte_encoder[pe]).join(""))}}class je extends De{constructor(_){super(),this.config=_,this.pattern=le(this.config.pattern,this.config.invert)}pre_tokenize_text(_,P){return this.pattern===null?[]:this.config.invert?_.match(this.pattern)||[]:se(_,this.pattern)}}class Ge extends De{constructor(_){super(),this.config=_,this.pattern=new RegExp(`[^${D}]+|[${D}]+`,"gu")}pre_tokenize_text(_,P){return _.match(this.pattern)||[]}}class Ue extends De{constructor(_){super(),this.config=_;const P=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(P,"gu")}pre_tokenize_text(_,P){return _.match(this.pattern)||[]}}class He extends z.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"TemplateProcessing":return new Mt(_);case"ByteLevel":return new Et(_);case"RobertaProcessing":return new yt(_);case"BertProcessing":return new ct(_);case"Sequence":return new x(_);default:throw new Error(`Unknown PostProcessor type: ${_.type}`)}}post_process(_,...P){throw Error("post_process should be implemented in subclass.")}_call(_,...P){return this.post_process(_,...P)}}class ct extends He{constructor(_){super(_),this.cls=_.cls[0],this.sep=_.sep[0]}post_process(_,P=null,{add_special_tokens:H=!0}={}){H&&(_=(0,fe.mergeArrays)([this.cls],_,[this.sep]));let ie=new Array(_.length).fill(0);if(P!==null){const pe=H&&this instanceof yt?[this.sep]:[],ze=H?[this.sep]:[];_=(0,fe.mergeArrays)(_,pe,P,ze),ie=(0,fe.mergeArrays)(ie,new Array(P.length+pe.length+ze.length).fill(1))}return{tokens:_,token_type_ids:ie}}}class yt extends ct{}class Mt extends He{constructor(_){super(_),this.single=_.single,this.pair=_.pair}post_process(_,P=null,{add_special_tokens:H=!0}={}){const ie=P===null?this.single:this.pair;let pe=[],ze=[];for(const wt of ie)"SpecialToken"in wt?H&&(pe.push(wt.SpecialToken.id),ze.push(wt.SpecialToken.type_id)):"Sequence"in wt&&(wt.Sequence.id==="A"?(pe=(0,fe.mergeArrays)(pe,_),ze=(0,fe.mergeArrays)(ze,new Array(_.length).fill(wt.Sequence.type_id))):wt.Sequence.id==="B"&&(pe=(0,fe.mergeArrays)(pe,P),ze=(0,fe.mergeArrays)(ze,new Array(P.length).fill(wt.Sequence.type_id))));return{tokens:pe,token_type_ids:ze}}}class Et extends He{post_process(_,P=null){return P&&(_=(0,fe.mergeArrays)(_,P)),{tokens:_}}}class x extends He{constructor(_){super(_),this.processors=_.processors.map(P=>He.fromConfig(P))}post_process(_,P=null,H={}){let ie;for(const pe of this.processors)if(pe instanceof Et)_=pe.post_process(_).tokens,P&&(P=pe.post_process(P).tokens);else{const ze=pe.post_process(_,P,H);_=ze.tokens,ie=ze.token_type_ids}return{tokens:_,token_type_ids:ie}}}class G extends z.Callable{constructor(_){super(),this.config=_,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=_.trim_offsets}static fromConfig(_){if(_===null)return null;switch(_.type){case"WordPiece":return new Ke(_);case"Metaspace":return new Cr(_);case"ByteLevel":return new xt(_);case"Replace":return new C(_);case"ByteFallback":return new Y(_);case"Fuse":return new ce(_);case"Strip":return new Je(_);case"Sequence":return new _t(_);case"CTC":return new Qe(_);case"BPEDecoder":return new Bt(_);default:throw new Error(`Unknown Decoder type: ${_.type}`)}}_call(_){return this.decode(_)}decode(_){return this.decode_chain(_).join("")}decode_chain(_){throw Error("`decode_chain` should be implemented in subclass.")}}class C extends G{decode_chain(_){const P=le(this.config.pattern);return P===null?_:_.map(H=>H.replaceAll(P,this.config.content))}}class Y extends G{constructor(_){super(_),this.text_decoder=new TextDecoder}decode_chain(_){const P=[];let H=[];for(const ie of _){let pe=null;if(ie.length===6&&ie.startsWith("<0x")&&ie.endsWith(">")){const ze=parseInt(ie.slice(3,5),16);isNaN(ze)||(pe=ze)}if(pe!==null)H.push(pe);else{if(H.length>0){const ze=this.text_decoder.decode(Uint8Array.from(H));P.push(ze),H=[]}P.push(ie)}}if(H.length>0){const ie=this.text_decoder.decode(Uint8Array.from(H));P.push(ie),H=[]}return P}}class ce extends G{decode_chain(_){return[_.join("")]}}class Je extends G{constructor(_){super(_),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(_){return _.map(P=>{let H=0;for(let pe=0;pe<this.start&&P[pe]===this.content;++pe){H=pe+1;continue}let ie=P.length;for(let pe=0;pe<this.stop;++pe){const ze=P.length-pe-1;if(P[ze]===this.content){ie=ze;continue}else break}return P.slice(H,ie)})}}class Ke extends G{constructor(_){super(_),this.cleanup=_.cleanup}decode_chain(_){return _.map((P,H)=>(H!==0&&(P.startsWith(this.config.prefix)?P=P.replace(this.config.prefix,""):P=" "+P),this.cleanup&&(P=J(P)),P))}}class xt extends G{constructor(_){super(_),this.byte_decoder=Ye,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(_){const P=_.join(""),H=new Uint8Array([...P].map(pe=>this.byte_decoder[pe]));return this.text_decoder.decode(H)}decode_chain(_){const P=[];let H=[];for(const ie of _)this.added_tokens.find(pe=>pe.content===ie)!==void 0?(H.length>0&&(P.push(this.convert_tokens_to_string(H)),H=[]),P.push(ie)):H.push(ie);return H.length>0&&P.push(this.convert_tokens_to_string(H)),P}}class Qe extends G{constructor(_){super(_),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(_){if(_.length===0)return"";const P=[_[0]];for(let pe=1;pe<_.length;++pe)_[pe]!==P.at(-1)&&P.push(_[pe]);let ie=P.filter(pe=>pe!==this.pad_token).join("");return this.cleanup&&(ie=J(ie).replaceAll(this.word_delimiter_token," ").trim()),ie}decode_chain(_){return[this.convert_tokens_to_string(_)]}}class _t extends G{constructor(_){super(_),this.decoders=_.decoders.map(P=>G.fromConfig(P))}decode_chain(_){return this.decoders.reduce((P,H)=>H.decode_chain(P),_)}}class Bt extends G{constructor(_){super(_),this.suffix=this.config.suffix}decode_chain(_){return _.map((P,H)=>P.replaceAll(this.suffix,H===_.length-1?"":" "))}}class tr extends G{decode_chain(_){let P="";for(let H=1;H<_.length;H+=2)P+=_[H];return[P]}}class jr extends De{constructor(_){super(),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement,this.strRep=_.str_rep||this.replacement,this.prepend_scheme=_.prepend_scheme??"always"}pre_tokenize_text(_,{section_index:P=void 0}={}){let H=_.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!H.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&P===0)&&(H=this.strRep+H),[H]}}class Cr extends G{constructor(_){super(_),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement}decode_chain(_){const P=[];for(let H=0;H<_.length;++H){let ie=_[H].replaceAll(this.replacement," ");this.addPrefixSpace&&H==0&&ie.startsWith(" ")&&(ie=ie.substring(1)),P.push(ie)}return P}}class Zr extends U{constructor(_){super(_),this.charsmap=_.precompiled_charsmap}normalize(_){return _=_.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),_=_.replace(/[\u0009\u000A\u000C\u000D\u1680\u200B\u200C\u200E\u200F\u2028\u2029\u2581\uFEFF\uFFFD]/gm," "),_.includes("～")?_=_.split("～").map(H=>H.normalize("NFKC")).join("～"):_=_.normalize("NFKC"),_}}class Dr extends De{constructor(_){super(),this.tokenizers=_.pretokenizers.map(P=>De.fromConfig(P))}pre_tokenize_text(_,P){return this.tokenizers.reduce((H,ie)=>ie.pre_tokenize(H,P),[_])}}class qr extends De{constructor(_){super()}pre_tokenize_text(_,P){return _.match(/\w+|[^\w\s]+/g)||[]}}class lt extends De{constructor(_){super()}pre_tokenize_text(_,P){return A(_)}}class j extends De{constructor(_){super(),this.config=_,this.pattern=le(this.config.pattern),this.content=this.config.content}pre_tokenize_text(_,P){return this.pattern===null?[_]:[_.replaceAll(this.pattern,this.config.content)]}}const ge=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Pe(ye,_,P,H){for(const ie of Object.keys(ye)){const pe=_-ye[ie].length,ze=P(ie),wt=new Array(pe).fill(ze);ye[ie]=H==="right"?(0,fe.mergeArrays)(ye[ie],wt):(0,fe.mergeArrays)(wt,ye[ie])}}function rt(ye,_){for(const P of Object.keys(ye))ye[P].length=_}class we extends z.Callable{constructor(P,H){super();xe(this,"return_token_type_ids",!1);xe(this,"padding_side","right");this._tokenizer_config=H,this.normalizer=U.fromConfig(P.normalizer),this.pre_tokenizer=De.fromConfig(P.pre_tokenizer),this.model=Ee.fromConfig(P.model,H),this.post_processor=He.fromConfig(P.post_processor),this.decoder=G.fromConfig(P.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const ie of P.added_tokens){const pe=new ve(ie);this.added_tokens.push(pe),this.model.tokens_to_ids.set(pe.content,pe.id),this.model.vocab[pe.id]=pe.content,pe.special&&(this.special_tokens.push(pe.content),this.all_special_ids.push(pe.id))}if(this.additional_special_tokens=H.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.slice().sort((ie,pe)=>pe.content.length-ie.content.length).map(ie=>`${ie.lstrip?"\\s*":""}(${(0,fe.escapeRegExp)(ie.content)})${ie.rstrip?"\\s*":""}`).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.model_max_length=H.model_max_length,this.remove_space=H.remove_space,this.clean_up_tokenization_spaces=H.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=H.do_lowercase_and_remove_accent??!1,H.padding_side&&(this.padding_side=H.padding_side),this.legacy=!1,this.chat_template=H.chat_template??null,Array.isArray(this.chat_template)){const ie=Object.create(null);for(const{name:pe,template:ze}of this.chat_template){if(typeof pe!="string"||typeof ze!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');ie[pe]=ze}this.chat_template=ie}this._compiled_template_cache=new Map}getToken(...P){for(const H of P){const ie=this._tokenizer_config[H];if(ie)if(typeof ie=="object"){if(ie.__type==="AddedToken")return ie.content;throw Error(`Unknown token: ${ie}`)}else return ie}return null}static async from_pretrained(P,{progress_callback:H=null,config:ie=null,cache_dir:pe=null,local_files_only:ze=!1,revision:wt="main",legacy:Tt=null}={}){const vt=await Z(P,{progress_callback:H,config:ie,cache_dir:pe,local_files_only:ze,revision:wt,legacy:Tt});return new this(...vt)}_call(P,{text_pair:H=null,add_special_tokens:ie=!0,padding:pe=!1,truncation:ze=null,max_length:wt=null,return_tensor:Tt=!0,return_token_type_ids:vt=null}={}){const Ot=Array.isArray(P);let Jt;if(Ot){if(P.length===0)throw Error("text array must be non-empty");if(H!==null){if(Array.isArray(H)){if(P.length!==H.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");Jt=P.map((nr,Wt)=>this._encode_plus(nr,{text_pair:H[Wt],add_special_tokens:ie,return_token_type_ids:vt}))}else Jt=P.map(nr=>this._encode_plus(nr,{add_special_tokens:ie,return_token_type_ids:vt}))}else{if(P==null)throw Error("text may not be null or undefined");if(Array.isArray(H))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");Jt=[this._encode_plus(P,{text_pair:H,add_special_tokens:ie,return_token_type_ids:vt})]}if(wt===null?pe==="max_length"?wt=this.model_max_length:wt=(0,$e.max)(Jt.map(nr=>nr.input_ids.length))[0]:ze||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),wt=Math.min(wt,this.model_max_length??1/0),pe||ze)for(let nr=0;nr<Jt.length;++nr)Jt[nr].input_ids.length!==wt&&(Jt[nr].input_ids.length>wt?ze&&rt(Jt[nr],wt):pe&&Pe(Jt[nr],wt,Wt=>Wt==="input_ids"?this.pad_token_id:0,this.padding_side));const Rr={};if(Tt){if(!(pe&&ze)&&Jt.some(Wt=>{for(const pr of Object.keys(Wt))if(Wt[pr].length!==Jt[0][pr]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const nr=[Jt.length,Jt[0].input_ids.length];for(const Wt of Object.keys(Jt[0]))Rr[Wt]=new Te.Tensor("int64",BigInt64Array.from(Jt.flatMap(pr=>pr[Wt]).map(BigInt)),nr)}else{for(const nr of Object.keys(Jt[0]))Rr[nr]=Jt.map(Wt=>Wt[nr]);if(!Ot)for(const nr of Object.keys(Rr))Rr[nr]=Rr[nr][0]}return Rr}_encode_text(P){return P===null?null:(this.added_tokens_regex?P.split(this.added_tokens_regex).filter(pe=>pe):[P]).map((pe,ze)=>{if(this.added_tokens.find(Tt=>Tt.content===pe)!==void 0)return pe;{if(this.remove_space===!0&&(pe=pe.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(pe=ae(pe)),this.normalizer!==null&&(pe=this.normalizer(pe)),pe.length===0)return[];const Tt=this.pre_tokenizer!==null?this.pre_tokenizer(pe,{section_index:ze}):[pe];return this.model(Tt)}}).flat()}_encode_plus(P,{text_pair:H=null,add_special_tokens:ie=!0,return_token_type_ids:pe=null}={}){const{tokens:ze,token_type_ids:wt}=this._tokenize_helper(P,{pair:H,add_special_tokens:ie}),Tt=this.model.convert_tokens_to_ids(ze),vt={input_ids:Tt,attention_mask:new Array(Tt.length).fill(1)};return(pe??this.return_token_type_ids)&&wt&&(vt.token_type_ids=wt),vt}_tokenize_helper(P,{pair:H=null,add_special_tokens:ie=!1}={}){const pe=this._encode_text(P),ze=this._encode_text(H);return this.post_processor?this.post_processor(pe,ze,{add_special_tokens:ie}):{tokens:(0,fe.mergeArrays)(pe??[],ze??[])}}tokenize(P,{pair:H=null,add_special_tokens:ie=!1}={}){return this._tokenize_helper(P,{pair:H,add_special_tokens:ie}).tokens}encode(P,{text_pair:H=null,add_special_tokens:ie=!0,return_token_type_ids:pe=null}={}){return this._encode_plus(P,{text_pair:H,add_special_tokens:ie,return_token_type_ids:pe}).input_ids}batch_decode(P,H={}){return P instanceof Te.Tensor&&(P=P.tolist()),P.map(ie=>this.decode(ie,H))}decode(P,H={}){if(P instanceof Te.Tensor&&(P=B(P)),!Array.isArray(P)||P.length===0||!(0,fe.isIntegralNumber)(P[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(P,H)}decode_single(P,{skip_special_tokens:H=!1,clean_up_tokenization_spaces:ie=null}){let pe=this.model.convert_ids_to_tokens(P);H&&(pe=pe.filter(wt=>!this.special_tokens.includes(wt)));let ze=this.decoder?this.decoder(pe):pe.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(ze=ze.replaceAll(this.decoder.end_of_word_suffix," "),H&&(ze=ze.trim())),(ie??this.clean_up_tokenization_spaces)&&(ze=J(ze)),ze}get_chat_template({chat_template:P=null,tools:H=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const ie=this.chat_template;if(P!==null&&Object.hasOwn(ie,P))P=ie[P];else if(P===null)if(H!==null&&"tool_use"in ie)P=ie.tool_use;else if("default"in ie)P=ie.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(ie).sort()}.`)}else if(P===null)if(this.chat_template)P=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at http://huggingface.co/docs/transformers/main/en/chat_templating");return P}apply_chat_template(P,{tools:H=null,documents:ie=null,chat_template:pe=null,add_generation_prompt:ze=!1,tokenize:wt=!0,padding:Tt=!1,truncation:vt=!1,max_length:Ot=null,return_tensor:Jt=!0,return_dict:Rr=!1,tokenizer_kwargs:nr={},...Wt}={}){if(pe=this.get_chat_template({chat_template:pe,tools:H}),typeof pe!="string")throw Error(`chat_template must be a string, but got ${typeof pe}`);let pr=this._compiled_template_cache.get(pe);pr===void 0&&(pr=new $.Template(pe),this._compiled_template_cache.set(pe,pr));const xn=Object.create(null);for(const Fe of ge){const Tn=this.getToken(Fe);Tn&&(xn[Fe]=Tn)}const sn=pr.render({messages:P,add_generation_prompt:ze,tools:H,documents:ie,...xn,...Wt});if(wt){const Fe=this._call(sn,{add_special_tokens:!1,padding:Tt,truncation:vt,max_length:Ot,return_tensor:Jt,...nr});return Rr?Fe:Fe.input_ids}return sn}}class nt extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class gt extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class ft extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class St extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class mt extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class It extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class Lt extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class zt extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class Ut extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class be extends we{}class et extends we{}class ot extends we{constructor(P,H){super(P,H);xe(this,"return_token_type_ids",!0);console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Ht extends we{constructor(){super(...arguments);xe(this,"return_token_type_ids",!0)}}class $r extends we{}class Ur extends we{}class vr extends we{}class Pr extends we{constructor(_,P){super(_,P),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(H=>this.languageRegex.test(H)),this.lang_to_token=H=>H}_build_translation_inputs(_,P,H){return Hn(this,_,P,H)}}class Ar extends Pr{}class Dn extends we{}class Wr extends we{constructor(_,P){const H=".,!?…。，、।۔،",ie=_.pre_tokenizer?.pretokenizers[0]?.pattern;ie&&ie.Regex===` ?[^(\\s|[${H}])]+`&&(ie.Regex=` ?[^\\s${H}]+`),super(_,P)}}const Gn="▁";class Bn extends we{constructor(P,H){super(P,H);xe(this,"padding_side","left");this.legacy=H.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new jr({replacement:Gn,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(P){if(P===null)return null;if(this.legacy||P.length===0)return super._encode_text(P);let H=super._encode_text(Gn+P.replaceAll(Gn," "));return H.length>1&&H[0]===Gn&&this.special_tokens.includes(H[1])&&(H=H.slice(1)),H}}class Hs extends we{}class ys extends we{}class bs extends we{}class Ms extends we{}class vs extends we{}class qn extends we{}class Ks extends we{}class us extends we{}class In extends we{}function Hn(ye,_,P,H){if(!("language_codes"in ye)||!Array.isArray(ye.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in ye)||!(ye.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in ye)||typeof ye.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const ie=H.src_lang,pe=H.tgt_lang;if(!ye.language_codes.includes(pe))throw new Error(`Target language code "${pe}" is not valid. Must be one of: {${ye.language_codes.join(", ")}}`);if(ie!==void 0){if(!ye.language_codes.includes(ie))throw new Error(`Source language code "${ie}" is not valid. Must be one of: {${ye.language_codes.join(", ")}}`);for(const ze of ye.post_processor.config.single)if("SpecialToken"in ze&&ye.languageRegex.test(ze.SpecialToken.id)){ze.SpecialToken.id=ye.lang_to_token(ie);break}}return H.forced_bos_token_id=ye.model.convert_tokens_to_ids([ye.lang_to_token(pe)])[0],ye._call(_,P)}class Ln extends we{constructor(_,P){super(_,P),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(H=>this.languageRegex.test(H)),this.lang_to_token=H=>H}_build_translation_inputs(_,P,H){return Hn(this,_,P,H)}}class Jn extends we{constructor(_,P){super(_,P),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(H=>this.languageRegex.test(H)).map(H=>H.slice(2,-2)),this.lang_to_token=H=>`__${H}__`}_build_translation_inputs(_,P,H){return Hn(this,_,P,H)}}class ds extends we{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(_,{return_timestamps:P=!1,return_language:H=!1,time_precision:ie=null,force_full_sequences:pe=!0}={}){if(ie===null)throw Error("Must specify time_precision");let ze=null;const wt=P==="word";function Tt(){return{language:ze,timestamp:[null,null],text:""}}const vt=[];let Ot=Tt(),Jt=0;const Rr=this.timestamp_begin;let nr=[],Wt=[],pr=!1,xn=null;const sn=new Set(this.all_special_ids);for(const xr of _){const nn=xr.tokens,yn=wt?xr.token_timestamps:null;let Xt=null,bn=Rr;if("stride"in xr){const[Tr,At,wr]=xr.stride;if(Jt-=At,xn=Tr-wr,At&&(bn=At/ie+Rr),wr)for(let Br=nn.length-1;Br>=0;--Br){const Hr=Number(nn[Br]);if(Hr>=Rr){if(Xt!==null&&(Hr-Rr)*ie<xn)break;Xt=Hr}}}let un=[],kr=[];for(let Tr=0;Tr<nn.length;++Tr){const At=Number(nn[Tr]);if(sn.has(At)){const wr=this.decode([At]),Br=V.WHISPER_LANGUAGE_MAPPING.get(wr.slice(2,-2));if(Br!==void 0){if(ze!==null&&Br!==ze&&!P){nr.push(un);const Hr=this.findLongestCommonSequence(nr)[0],Mn=this.decode(Hr);Ot.text=Mn,vt.push(Ot),nr=[],un=[],Ot=Tt()}ze=Ot.language=Br}}else if(At>=Rr){const wr=(At-Rr)*ie+Jt,Br=(0,$e.round)(wr,2);if(Xt!==null&&At>=Xt)pr=!0;else if(pr||nr.length>0&&At<bn)pr=!1;else if(Ot.timestamp[0]===null)Ot.timestamp[0]=Br;else if(Br!==Ot.timestamp[0]){Ot.timestamp[1]=Br,nr.push(un),wt&&Wt.push(kr);const[Hr,Mn]=this.findLongestCommonSequence(nr,Wt),Nt=this.decode(Hr);Ot.text=Nt,wt&&(Ot.words=this.collateWordTimestamps(Hr,Mn,ze)),vt.push(Ot),nr=[],un=[],Wt=[],kr=[],Ot=Tt()}}else if(un.push(At),wt){let wr=(0,$e.round)(yn[Tr]+Jt,2),Br;if(Tr+1<yn.length){Br=(0,$e.round)(yn[Tr+1]+Jt,2);const Hr=this.decode([At]);k.test(Hr)&&(Br=(0,$e.round)(Math.min(wr+ie,Br),2))}else Br=null;kr.push([wr,Br])}}if("stride"in xr){const[Tr,At,wr]=xr.stride;Jt+=Tr-wr}un.length>0?(nr.push(un),wt&&Wt.push(kr)):nr.every(Tr=>Tr.length===0)&&(Ot=Tt(),nr=[],un=[],Wt=[],kr=[])}if(nr.length>0){if(pe&&P)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[xr,nn]=this.findLongestCommonSequence(nr,Wt),yn=this.decode(xr);Ot.text=yn,wt&&(Ot.words=this.collateWordTimestamps(xr,nn,ze)),vt.push(Ot)}let Fe=Object.create(null);const Tn=vt.map(xr=>xr.text).join("");if(P||H){for(let xr=0;xr<vt.length;++xr){const nn=vt[xr];P||delete nn.timestamp,H||delete nn.language}if(wt){const xr=[];for(const nn of vt)for(const yn of nn.words)xr.push(yn);Fe={chunks:xr}}else Fe={chunks:vt}}return[Tn,Fe]}findLongestCommonSequence(_,P=null){let H=_[0],ie=H.length,pe=[];const ze=Array.isArray(P)&&P.length>0;let wt=ze?[]:null,Tt=ze?P[0]:null;for(let vt=1;vt<_.length;++vt){const Ot=_[vt];let Jt=0,Rr=[ie,ie,0,0];const nr=Ot.length;for(let xr=1;xr<ie+nr;++xr){const nn=Math.max(0,ie-xr),yn=Math.min(ie,ie+nr-xr),Xt=H.slice(nn,yn),bn=Math.max(0,xr-ie),un=Math.min(nr,xr),kr=Ot.slice(bn,un);if(Xt.length!==kr.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let Tr;ze?Tr=Xt.filter((Br,Hr)=>Br===kr[Hr]&&Tt[nn+Hr]<=P[vt][bn+Hr]).length:Tr=Xt.filter((Br,Hr)=>Br===kr[Hr]).length;const At=xr/1e4,wr=Tr/xr+At;Tr>1&&wr>Jt&&(Jt=wr,Rr=[nn,yn,bn,un])}const[Wt,pr,xn,sn]=Rr,Fe=Math.floor((pr+Wt)/2),Tn=Math.floor((sn+xn)/2);pe.push(...H.slice(0,Fe)),H=Ot.slice(Tn),ie=H.length,ze&&(wt.push(...Tt.slice(0,Fe)),Tt=P[vt].slice(Tn))}return pe.push(...H),ze?(wt.push(...Tt),[pe,wt]):[pe,[]]}collateWordTimestamps(_,P,H){const[ie,pe,ze]=this.combineTokensIntoWords(_,H),wt=[];for(let Tt=0;Tt<ie.length;++Tt){const vt=ze[Tt];wt.push({text:ie[Tt],timestamp:[P[vt.at(0)][0],P[vt.at(-1)][1]]})}return wt}combineTokensIntoWords(_,P,H=`"'“¡¿([{-`,ie=`"'.。,，!！?？:：”)]}、`){P=P??"english";let pe,ze,wt;return["chinese","japanese","thai","lao","myanmar"].includes(P)?[pe,ze,wt]=this.splitTokensOnUnicode(_):[pe,ze,wt]=this.splitTokensOnSpaces(_),this.mergePunctuations(pe,ze,wt,H,ie)}decode(_,P){let H;return P?.decode_with_timestamps?(_ instanceof Te.Tensor&&(_=B(_)),H=this.decodeWithTimestamps(_,P)):H=super.decode(_,P),H}decodeWithTimestamps(_,P){const H=P?.time_precision??.02,ie=Array.from(this.all_special_ids).at(-1)+1;let pe=[[]];for(let ze of _)if(ze=Number(ze),ze>=ie){const wt=((ze-ie)*H).toFixed(2);pe.push(`<|${wt}|>`),pe.push([])}else pe[pe.length-1].push(ze);return pe=pe.map(ze=>typeof ze=="string"?ze:super.decode(ze,P)),pe.join("")}splitTokensOnUnicode(_){const P=this.decode(_,{decode_with_timestamps:!0}),H="�",ie=[],pe=[],ze=[];let wt=[],Tt=[],vt=0;for(let Ot=0;Ot<_.length;++Ot){const Jt=_[Ot];wt.push(Jt),Tt.push(Ot);const Rr=this.decode(wt,{decode_with_timestamps:!0});(!Rr.includes(H)||P[vt+Rr.indexOf(H)]===H)&&(ie.push(Rr),pe.push(wt),ze.push(Tt),wt=[],Tt=[],vt+=Rr.length)}return[ie,pe,ze]}splitTokensOnSpaces(_){const[P,H,ie]=this.splitTokensOnUnicode(_),pe=[],ze=[],wt=[],Tt=new RegExp(`^[${D}]$`,"gu");for(let vt=0;vt<P.length;++vt){const Ot=P[vt],Jt=H[vt],Rr=ie[vt],nr=Jt[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),Wt=Ot.startsWith(" "),pr=Ot.trim(),xn=Tt.test(pr);if(nr||Wt||xn||pe.length===0)pe.push(Ot),ze.push(Jt),wt.push(Rr);else{const sn=pe.length-1;pe[sn]+=Ot,ze[sn].push(...Jt),wt[sn].push(...Rr)}}return[pe,ze,wt]}mergePunctuations(_,P,H,ie,pe){const ze=structuredClone(_),wt=structuredClone(P),Tt=structuredClone(H);let vt=ze.length-2,Ot=ze.length-1;for(;vt>=0;)ze[vt].startsWith(" ")&&ie.includes(ze[vt].trim())?(ze[Ot]=ze[vt]+ze[Ot],wt[Ot]=(0,fe.mergeArrays)(wt[vt],wt[Ot]),Tt[Ot]=(0,fe.mergeArrays)(Tt[vt],Tt[Ot]),ze[vt]="",wt[vt]=[],Tt[vt]=[]):Ot=vt,--vt;for(vt=0,Ot=1;Ot<ze.length;)!ze[vt].endsWith(" ")&&pe.includes(ze[Ot])?(ze[vt]+=ze[Ot],wt[vt]=(0,fe.mergeArrays)(wt[vt],wt[Ot]),Tt[vt]=(0,fe.mergeArrays)(Tt[vt],Tt[Ot]),ze[Ot]="",wt[Ot]=[],Tt[Ot]=[]):vt=Ot,++Ot;return[ze.filter(Jt=>Jt),wt.filter(Jt=>Jt.length>0),Tt.filter(Jt=>Jt.length>0)]}get_decoder_prompt_ids({language:_=null,task:P=null,no_timestamps:H=!0}={}){const ie=[];if(_){const pe=(0,V.whisper_language_to_code)(_),ze=this.model.tokens_to_ids.get(`<|${pe}|>`);if(ze===void 0)throw new Error(`Unable to find language "${pe}" in model vocabulary. Please report this issue at ${I.GITHUB_ISSUE_URL}.`);ie.push(ze)}else ie.push(null);if(P){if(P=P.toLowerCase(),P!=="transcribe"&&P!=="translate")throw new Error(`Task "${P}" is not supported. Must be one of: ["transcribe", "translate"]`);const pe=this.model.tokens_to_ids.get(`<|${P}|>`);if(pe===void 0)throw new Error(`Unable to find task "${P}" in model vocabulary. Please report this issue at ${I.GITHUB_ISSUE_URL}.`);ie.push(pe)}else ie.push(null);if(H){const pe=this.model.tokens_to_ids.get("<|notimestamps|>");if(pe===void 0)throw new Error(`Unable to find "<|notimestamps|>" in model vocabulary. Please report this issue at ${I.GITHUB_ISSUE_URL}.`);ie.push(pe)}return ie.map((pe,ze)=>[ze+1,pe]).filter(pe=>pe[1]!==null)}}class cs extends we{}class Kt extends we{}class es extends we{}class xs extends we{constructor(_,P){super(_,P),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(H=>this.languageRegex.test(H)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(_){if(_===null)return null;const[P,...H]=_.trim().split(this.languageRegex);if(H.length===0)return super._encode_text(P);if(H.length===2){const[ie,pe]=H;return this.supported_language_codes.includes(ie)||console.warn(`Unsupported language code "${ie}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,fe.mergeArrays)([ie],super._encode_text(pe))}}}class Ts extends we{}class ps extends we{}class Ss extends we{}class Es extends we{}class hs extends we{}class Cs extends we{constructor(_,P){super(_,P),this.decoder=new tr({})}}class Gr extends we{}class wn{static async from_pretrained(_,{progress_callback:P=null,config:H=null,cache_dir:ie=null,local_files_only:pe=!1,revision:ze="main",legacy:wt=null}={}){const[Tt,vt]=await Z(_,{progress_callback:P,config:H,cache_dir:ie,local_files_only:pe,revision:ze,legacy:wt}),Ot=vt.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let Jt=this.TOKENIZER_CLASS_MAPPING[Ot];return Jt||(console.warn(`Unknown tokenizer class "${Ot}", attempting to construct from base class.`),Jt=we),new Jt(Tt,vt)}}xe(wn,"TOKENIZER_CLASS_MAPPING",{T5Tokenizer:$r,DistilBertTokenizer:be,CamembertTokenizer:et,DebertaTokenizer:mt,DebertaV2Tokenizer:It,BertTokenizer:nt,HerbertTokenizer:Lt,ConvBertTokenizer:zt,RoFormerTokenizer:Ut,XLMTokenizer:ot,ElectraTokenizer:Ht,MobileBertTokenizer:ft,SqueezeBertTokenizer:St,AlbertTokenizer:gt,GPT2Tokenizer:Ur,BartTokenizer:vr,MBartTokenizer:Pr,MBart50Tokenizer:Ar,RobertaTokenizer:Dn,WhisperTokenizer:ds,CodeGenTokenizer:cs,CLIPTokenizer:Kt,SiglipTokenizer:es,MarianTokenizer:xs,BloomTokenizer:Wr,NllbTokenizer:Ln,M2M100Tokenizer:Jn,LlamaTokenizer:Bn,CodeLlamaTokenizer:Hs,XLMRobertaTokenizer:ys,MPNetTokenizer:bs,FalconTokenizer:Ms,GPTNeoXTokenizer:vs,EsmTokenizer:qn,Wav2Vec2CTCTokenizer:Ts,BlenderbotTokenizer:ps,BlenderbotSmallTokenizer:Ss,SpeechT5Tokenizer:Es,NougatTokenizer:hs,VitsTokenizer:Cs,Qwen2Tokenizer:Ks,GemmaTokenizer:us,Grok1Tokenizer:In,CohereTokenizer:Gr,PreTrainedTokenizer:we})},"./src/utils/audio.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{hamming:()=>V,hanning:()=>$,mel_filter_bank:()=>J,read_audio:()=>Te,spectrogram:()=>A,window_function:()=>D});var z=R("./src/utils/hub.js"),fe=R("./src/utils/maths.js"),Me=R("./src/utils/core.js"),$e=R("./src/utils/tensor.js");async function Te(k,de){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see http://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const ve=await(await(0,z.getFile)(k)).arrayBuffer(),Ee=new AudioContext({sampleRate:de});typeof de>"u"&&console.warn(`No sampling rate provided, using default of ${Ee.sampleRate}Hz.`);const Ie=await Ee.decodeAudioData(ve);let Ae;if(Ie.numberOfChannels===2){const tt=Math.sqrt(2),Ye=Ie.getChannelData(0),pt=Ie.getChannelData(1);Ae=new Float32Array(Ye.length);for(let _e=0;_e<Ie.length;++_e)Ae[_e]=tt*(Ye[_e]+pt[_e])/2}else Ae=Ie.getChannelData(0);return Ae}function N(k,de){if(k<1)return new Float64Array;if(k===1)return new Float64Array([1]);const ve=1-de,Ee=2*Math.PI/(k-1),Ie=new Float64Array(k);for(let Ae=0;Ae<k;++Ae)Ie[Ae]=de-ve*Math.cos(Ae*Ee);return Ie}function $(k){return N(k,.5)}function V(k){return N(k,.54)}const I={htk:k=>2595*Math.log10(1+k/700),kaldi:k=>1127*Math.log(1+k/700),slaney:(k,de=1e3,ve=15,Ee=27/Math.log(6.4))=>k>=de?ve+Math.log(k/de)*Ee:3*k/200};function Z(k,de="htk"){const ve=I[de];if(!ve)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof k=="number"?ve(k):k.map(Ee=>ve(Ee))}const se={htk:k=>700*(10**(k/2595)-1),kaldi:k=>700*(Math.exp(k/1127)-1),slaney:(k,de=1e3,ve=15,Ee=Math.log(6.4)/27)=>k>=ve?de*Math.exp(Ee*(k-ve)):200*k/3};function le(k,de="htk"){const ve=se[de];if(!ve)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof k=="number"?ve(k):k.map(Ee=>ve(Ee))}function me(k,de){const ve=Float64Array.from({length:de.length-1},(tt,Ye)=>de[Ye+1]-de[Ye]),Ee=Array.from({length:k.length},()=>new Array(de.length));for(let tt=0;tt<k.length;++tt){const Ye=Ee[tt];for(let pt=0;pt<de.length;++pt)Ye[pt]=de[pt]-k[tt]}const Ie=de.length-2,Ae=Array.from({length:Ie},()=>new Array(k.length));for(let tt=0;tt<k.length;++tt){const Ye=Ee[tt];for(let pt=0;pt<Ie;++pt){const _e=-Ye[pt]/ve[pt],U=Ye[pt+2]/ve[pt+1];Ae[pt][tt]=Math.max(0,Math.min(_e,U))}}return Ae}function B(k,de,ve){const Ee=(de-k)/(ve-1);return Float64Array.from({length:ve},(Ie,Ae)=>k+Ee*Ae)}function J(k,de,ve,Ee,Ie,Ae=null,tt="htk",Ye=!1){if(Ae!==null&&Ae!=="slaney")throw new Error('norm must be one of null or "slaney"');const pt=Z(ve,tt),_e=Z(Ee,tt),U=B(pt,_e,de+2);let ue=le(U,tt),Ce;if(Ye){const qe=Ie/(k*2);Ce=Z(Float64Array.from({length:k},(ht,st)=>st*qe),tt),ue=U}else Ce=B(0,Math.floor(Ie/2),k);const Q=me(Ce,ue);if(Ae!==null&&Ae==="slaney")for(let qe=0;qe<de;++qe){const ht=Q[qe],st=2/(ue[qe+2]-ue[qe]);for(let dt=0;dt<k;++dt)ht[dt]*=st}return Q}function ne(k,de,ve){const Ee=new k.constructor(k.length+de+ve),Ie=k.length-1;for(let Ae=0;Ae<k.length;++Ae)Ee[de+Ae]=k[Ae];for(let Ae=1;Ae<=de;++Ae)Ee[de-Ae]=k[(0,Me.calculateReflectOffset)(Ae,Ie)];for(let Ae=1;Ae<=ve;++Ae)Ee[Ie+de+Ae]=k[(0,Me.calculateReflectOffset)(Ie-Ae,Ie)];return Ee}function ae(k,de,ve,Ee,Ie){if(ve<=0)throw new Error("reference must be greater than zero");if(Ee<=0)throw new Error("min_value must be greater than zero");ve=Math.max(Ee,ve);const Ae=Math.log10(ve);for(let tt=0;tt<k.length;++tt)k[tt]=de*Math.log10(Math.max(Ee,k[tt])-Ae);if(Ie!==null){if(Ie<=0)throw new Error("db_range must be greater than zero");const tt=(0,fe.max)(k)[0]-Ie;for(let Ye=0;Ye<k.length;++Ye)k[Ye]=Math.max(k[Ye],tt)}return k}function X(k,de=1,ve=1e-5,Ee=null){return ae(k,20,de,ve,Ee)}function L(k,de=1,ve=1e-10,Ee=null){return ae(k,10,de,ve,Ee)}async function A(k,de,ve,Ee,{fft_length:Ie=null,power:Ae=1,center:tt=!0,pad_mode:Ye="reflect",onesided:pt=!0,preemphasis:_e=null,mel_filters:U=null,mel_floor:ue=1e-10,log_mel:Ce=null,reference:Q=1,min_value:qe=1e-10,db_range:ht=null,remove_dc_offset:st=null,min_num_frames:dt=null,max_num_frames:Re=null,do_pad:at=!0,transpose:$t=!1}={}){const De=de.length;if(Ie===null&&(Ie=ve),ve>Ie)throw Error(`frame_length (${ve}) may not be larger than fft_length (${Ie})`);if(De!==ve)throw new Error(`Length of the window (${De}) must equal frame_length (${ve})`);if(Ee<=0)throw new Error("hop_length must be greater than zero");if(Ae===null&&U!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(tt){if(Ye!=="reflect")throw new Error(`pad_mode="${Ye}" not implemented yet.`);const G=Math.floor((Ie-1)/2)+1;k=ne(k,G,G)}let re=Math.floor(1+Math.floor((k.length-ve)/Ee));dt!==null&&re<dt&&(re=dt);const ke=pt?Math.floor(Ie/2)+1:Ie;let je=re,Ge=re;Re!==null&&(Re>re?at&&(Ge=Re):Ge=je=Re);const Ue=new fe.FFT(Ie),He=new Float64Array(Ie),ct=new Float64Array(Ue.outputBufferSize),yt=new Float32Array(ke*Ge);for(let G=0;G<je;++G){const C=G*Ee,Y=Math.min(k.length-C,ve);Y!==ve&&He.fill(0,0,ve);for(let ce=0;ce<Y;++ce)He[ce]=k[C+ce];if(st){let ce=0;for(let Ke=0;Ke<Y;++Ke)ce+=He[Ke];const Je=ce/Y;for(let Ke=0;Ke<Y;++Ke)He[Ke]-=Je}if(_e!==null){for(let ce=Y-1;ce>=1;--ce)He[ce]-=_e*He[ce-1];He[0]*=1-_e}for(let ce=0;ce<de.length;++ce)He[ce]*=de[ce];Ue.realTransform(ct,He);for(let ce=0;ce<ke;++ce){const Je=ce<<1;yt[ce*Ge+G]=ct[Je]**2+ct[Je+1]**2}}if(Ae!==null&&Ae!==2){const G=2/Ae;for(let C=0;C<yt.length;++C)yt[C]**=G}const Mt=U.length;let Et=await(0,$e.matmul)(new $e.Tensor("float32",U.flat(),[Mt,ke]),new $e.Tensor("float32",yt,[ke,Ge]));$t&&(Et=Et.transpose(1,0));const x=Et.data;for(let G=0;G<x.length;++G)x[G]=Math.max(ue,x[G]);if(Ae!==null&&Ce!==null){const G=Math.min(x.length,je*Mt);switch(Ce){case"log":for(let C=0;C<G;++C)x[C]=Math.log(x[C]);break;case"log10":for(let C=0;C<G;++C)x[C]=Math.log10(x[C]);break;case"dB":if(Ae===1)X(x,Q,qe,ht);else if(Ae===2)L(x,Q,qe,ht);else throw new Error(`Cannot use log_mel option '${Ce}' with power ${Ae}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${Ce}'`)}}return Et}function D(k,de,{periodic:ve=!0,frame_length:Ee=null,center:Ie=!0}={}){const Ae=ve?k+1:k;let tt;switch(de){case"boxcar":tt=new Float64Array(Ae).fill(1);break;case"hann":case"hann_window":tt=$(Ae);break;case"hamming":tt=V(Ae);break;case"povey":tt=$(Ae).map(Ye=>Math.pow(Ye,.85));break;default:throw new Error(`Unknown window type ${de}.`)}if(ve&&(tt=tt.subarray(0,k)),Ee===null)return tt;if(k>Ee)throw new Error(`Length of the window (${k}) may not be larger than frame_length (${Ee})`);return tt}},"./src/utils/constants.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{GITHUB_ISSUE_URL:()=>z});const z="http://github.com/xenova/transformers.js/issues/new/choose"},"./src/utils/core.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{calculateDimensions:()=>N,calculateReflectOffset:()=>Z,dispatchCallback:()=>z,escapeRegExp:()=>Me,isIntegralNumber:()=>Te,isTypedArray:()=>$e,mergeArrays:()=>V,pick:()=>se,pop:()=>$,product:()=>I,reverseDictionary:()=>fe});function z(le,me){le&&le(me)}function fe(le){return Object.fromEntries(Object.entries(le).map(([me,B])=>[B,me]))}function Me(le){return le.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function $e(le){return le?.prototype?.__proto__?.constructor?.name==="TypedArray"}function Te(le){return Number.isInteger(le)||typeof le=="bigint"}function N(le){const me=[];let B=le;for(;Array.isArray(B);)me.push(B.length),B=B[0];return me}function $(le,me,B=void 0){const J=le[me];if(J!==void 0)return delete le[me],J;if(B===void 0)throw Error(`Key ${me} does not exist in object.`);return B}function V(...le){return Array.prototype.concat.apply([],le)}function I(...le){return le.reduce((me,B)=>me.flatMap(J=>B.map(ne=>[J,ne])))}function Z(le,me){return Math.abs((le+me)%(2*me)-me)}function se(le,me){return Object.assign({},...me.map(B=>{if(le[B]!==void 0)return{[B]:le[B]}}))}},"./src/utils/data-structures.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{CharTrie:()=>fe,PriorityQueue:()=>z,TokenLattice:()=>$e});class z{constructor($=(I,Z)=>I>Z,V=1/0){this._heap=[],this._comparator=$,this._maxSize=V}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...$){return this.extend($)}extend($){for(const V of $)if(this.size<this._maxSize)this._heap.push(V),this._siftUp();else{const I=this._smallest();this._comparator(V,this._heap[I])&&(this._heap[I]=V,this._siftUpFrom(I))}return this.size}pop(){const $=this.peek(),V=this.size-1;return V>0&&this._swap(0,V),this._heap.pop(),this._siftDown(),$}replace($){const V=this.peek();return this._heap[0]=$,this._siftDown(),V}_parent($){return($+1>>>1)-1}_left($){return($<<1)+1}_right($){return $+1<<1}_greater($,V){return this._comparator(this._heap[$],this._heap[V])}_swap($,V){const I=this._heap[$];this._heap[$]=this._heap[V],this._heap[V]=I}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom($){for(;$>0&&this._greater($,this._parent($));)this._swap($,this._parent($)),$=this._parent($)}_siftDown(){let $=0;for(;this._left($)<this.size&&this._greater(this._left($),$)||this._right($)<this.size&&this._greater(this._right($),$);){const V=this._right($)<this.size&&this._greater(this._right($),this._left($))?this._right($):this._left($);this._swap($,V),$=V}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class fe{constructor(){this.root=Me.default()}extend($){for(let V of $)this.push(V)}push($){let V=this.root;for(let I of $){let Z=V.children.get(I);Z===void 0&&(Z=Me.default(),V.children.set(I,Z)),V=Z}V.isLeaf=!0}*commonPrefixSearch($){let V=this.root,I="";for(let Z=0;Z<$.length&&V!==void 0;++Z){const se=$[Z];I+=se,V=V.children.get(se),V!==void 0&&V.isLeaf&&(yield I)}}}class Me{constructor($,V){this.isLeaf=$,this.children=V}static default(){return new Me(!1,new Map)}}class $e{constructor($,V,I){this.sentence=$,this.len=$.length,this.bosTokenId=V,this.eosTokenId=I,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const Z=new Te(this.bosTokenId,0,0,0,0),se=new Te(this.eosTokenId,1,this.len,0,0);this.nodes.push(Z.clone()),this.nodes.push(se.clone()),this.beginNodes[this.len].push(se),this.endNodes[0].push(Z)}insert($,V,I,Z){const se=this.nodes.length,le=new Te(Z,se,$,V,I);this.beginNodes[$].push(le),this.endNodes[$+V].push(le),this.nodes.push(le)}viterbi(){const $=this.len;let V=0;for(;V<=$;){if(this.beginNodes[V].length==0)return[];for(let me of this.beginNodes[V]){me.prev=null;let B=0,J=null;for(let ne of this.endNodes[V]){const ae=ne.backtraceScore+me.score;(J===null||ae>B)&&(J=ne.clone(),B=ae)}if(J!==null)me.prev=J,me.backtraceScore=B;else return[]}++V}const I=[],se=this.beginNodes[$][0].prev;if(se===null)return[];let le=se.clone();for(;le.prev!==null;)I.push(le.clone()),le=le.clone().prev.clone();return I.reverse(),I}piece($){return this.sentence.slice($.pos,$.pos+$.length)}tokens(){return this.viterbi().map(V=>this.piece(V))}tokenIds(){return this.viterbi().map(V=>V.tokenId)}}class Te{constructor($,V,I,Z,se){this.tokenId=$,this.nodeId=V,this.pos=I,this.length=Z,this.score=se,this.prev=null,this.backtraceScore=0}clone(){const $=new Te(this.tokenId,this.nodeId,this.pos,this.length,this.score);return $.prev=this.prev,$.backtraceScore=this.backtraceScore,$}}},"./src/utils/devices.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{DEVICE_TYPES:()=>z});const z=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{DATA_TYPES:()=>$e,DEFAULT_DEVICE_DTYPE_MAPPING:()=>Te,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>N,isWebGpuFp16Supported:()=>Me});var z=R("./src/env.js"),fe=R("./src/utils/devices.js");const Me=function(){let $;return async function(){if($===void 0)if(!z.apis.IS_WEBGPU_AVAILABLE)$=!1;else try{$=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{$=!1}return $}}(),$e=Object.freeze({fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),Te=Object.freeze({[fe.DEVICE_TYPES.wasm]:$e.q8}),N=Object.freeze({[$e.fp32]:"",[$e.fp16]:"_fp16",[$e.int8]:"_int8",[$e.uint8]:"_uint8",[$e.q8]:"_quantized",[$e.q4]:"_q4",[$e.q4f16]:"_q4f16",[$e.bnb4]:"_bnb4"})},"./src/utils/generic.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{Callable:()=>z});const z=class{constructor(){let fe=function(...Me){return fe._call(...Me)};return Object.setPrototypeOf(fe,new.target.prototype)}_call(...fe){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{getFile:()=>V,getModelFile:()=>me,getModelJSON:()=>B});var z=R("?7a2c"),fe=R("?a42a"),Me=R("./src/env.js"),$e=R("./src/utils/core.js");const Te={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class N{constructor(X){if(this.filePath=X,this.headers=new Headers,this.exists=z.existsSync(X),this.exists){this.status=200,this.statusText="OK";let L=z.statSync(X);this.headers.set("content-length",L.size.toString()),this.updateContentType();let A=this;this.body=new ReadableStream({start(D){A.arrayBuffer().then(k=>{D.enqueue(new Uint8Array(k)),D.close()})}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const X=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",Te[X]??"application/octet-stream")}clone(){let X=new N(this.filePath);return X.exists=this.exists,X.status=this.status,X.statusText=this.statusText,X.headers=new Headers(this.headers),X}async arrayBuffer(){return(await z.promises.readFile(this.filePath)).buffer}async blob(){const X=await z.promises.readFile(this.filePath);return new Blob([X],{type:this.headers.get("content-type")})}async text(){return await z.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function $(ae,X=null,L=null){let A;try{A=new URL(ae)}catch{return!1}return!(X&&!X.includes(A.protocol)||L&&!L.includes(A.hostname))}async function V(ae){if(Me.env.useFS&&!$(ae,["http:","https:","blob:"]))return new N(ae);if(typeof process<"u"&&process?.release?.name==="node"){const X=!!Gc?.TESTING_REMOTELY,L=Me.env.version,A=new Headers;if(A.set("User-Agent",`transformers.js/${L}; is_ci/${X};`),$(ae,["http:","https:"],["huggingface.co","hf.co"])){const k=Gc?.HF_TOKEN??Gc?.HF_ACCESS_TOKEN;k&&A.set("Authorization",`Bearer ${k}`)}return fetch(ae,{headers:A})}else return fetch(ae)}const I={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function Z(ae,X,L){if(!L)return null;const A=I[ae]??`Error (${ae}) occurred while trying to load file`;throw Error(`${A}: "${X}".`)}class se{constructor(X){this.path=X}async match(X){let L=fe.join(this.path,X),A=new N(L);if(A.exists)return A}async put(X,L){const A=Buffer.from(await L.arrayBuffer());let D=fe.join(this.path,X);try{await z.promises.mkdir(fe.dirname(D),{recursive:!0}),await z.promises.writeFile(D,A)}catch(k){console.warn("An error occurred while writing the file to cache:",k)}}}async function le(ae,...X){for(let L of X)try{let A=await ae.match(L);if(A)return A}catch{continue}}async function me(ae,X,L=!0,A={}){if(!Me.env.allowLocalModels){if(A.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!Me.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,$e.dispatchCallback)(A.progress_callback,{status:"initiate",name:ae,file:X});let D;if(!D&&Me.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{D=await caches.open("transformers-cache")}catch(Ce){console.warn("An error occurred while opening the browser cache:",Ce)}}if(!D&&Me.env.useFSCache&&(D=new se(A.cache_dir??Me.env.cacheDir)),!D&&Me.env.useCustomCache){if(!Me.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!Me.env.customCache.match||!Me.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see http://developer.mozilla.org/en-US/docs/Web/API/Cache");D=Me.env.customCache}const k=A.revision??"main";let de=ne(ae,X),ve=ne(Me.env.localModelPath,de),Ee=ne(Me.env.remoteHost,Me.env.remotePathTemplate.replaceAll("{model}",ae).replaceAll("{revision}",encodeURIComponent(k)),X),Ie=k==="main"?de:ne(ae,k,X),Ae,tt=D instanceof se?Ie:Ee,Ye=!1,pt;D&&(pt=await le(D,ve,tt));const _e=pt!==void 0;if(pt===void 0){if(Me.env.allowLocalModels)if($(de,["http:","https:"])){if(A.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${de}.`);if(!Me.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${de}.`)}else try{pt=await V(ve),Ae=ve}catch(Q){console.warn(`Unable to load from local path "${ve}": "${Q}"`)}if(pt===void 0||pt.status===404){if(A.local_files_only||!Me.env.allowRemoteModels){if(L)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${ve}".`);return null}if(pt=await V(Ee),pt.status!==200)return Z(pt.status,Ee,L);Ae=tt}Ye=D&&typeof Response<"u"&&pt instanceof Response&&pt.status===200}(0,$e.dispatchCallback)(A.progress_callback,{status:"download",name:ae,file:X});const U={status:"progress",name:ae,file:X};let ue;return A.progress_callback?_e&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(ue=new Uint8Array(await pt.arrayBuffer()),(0,$e.dispatchCallback)(A.progress_callback,{...U,progress:100,loaded:ue.length,total:ue.length})):ue=await J(pt,Ce=>{(0,$e.dispatchCallback)(A.progress_callback,{...U,...Ce})}):ue=new Uint8Array(await pt.arrayBuffer()),Ye&&Ae&&await D.match(Ae)===void 0&&await D.put(Ae,new Response(ue,{headers:pt.headers})).catch(Ce=>{console.warn(`Unable to add response to browser cache: ${Ce}.`)}),(0,$e.dispatchCallback)(A.progress_callback,{status:"done",name:ae,file:X}),ue}async function B(ae,X,L=!0,A={}){let D=await me(ae,X,L,A);if(D===null)return{};let de=new TextDecoder("utf-8").decode(D);return JSON.parse(de)}async function J(ae,X){const L=ae.headers.get("Content-Length");L===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let A=parseInt(L??"0"),D=new Uint8Array(A),k=0;const de=ae.body.getReader();async function ve(){const{done:Ee,value:Ie}=await de.read();if(Ee)return;let Ae=k+Ie.length;if(Ae>A){A=Ae;let Ye=new Uint8Array(A);Ye.set(D),D=Ye}D.set(Ie,k),k=Ae;const tt=k/A*100;return X({progress:tt,loaded:k,total:A}),ve()}return await ve(),D}function ne(...ae){return ae=ae.map((X,L)=>(L&&(X=X.replace(new RegExp("^/"),"")),L!==ae.length-1&&(X=X.replace(new RegExp("/$"),"")),X)),ae.join("/")}},"./src/utils/image.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{RawImage:()=>le});var z=R("./src/utils/hub.js"),fe=R("./src/env.js"),Me=R("./src/utils/tensor.js"),$e=R("?2b25");const Te=typeof self<"u",N=Te&&self.constructor.name==="DedicatedWorkerGlobalScope";let $,V,I;if(Te)$=(me,B)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(me,B)},I=self.createImageBitmap,V=self.ImageData;else if($e)I=async me=>{const J=(await me.metadata()).channels,{data:ne,info:ae}=await me.rotate().raw().toBuffer({resolveWithObject:!0}),X=new le(new Uint8ClampedArray(ne),ae.width,ae.height,ae.channels);return J!==void 0&&J!==ae.channels&&X.convert(J),X};else throw new Error("Unable to load image processing library.");const Z={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},se=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class le{constructor(B,J,ne,ae){this.data=B,this.width=J,this.height=ne,this.channels=ae}get size(){return[this.width,this.height]}static async read(B){if(B instanceof le)return B;if(typeof B=="string"||B instanceof URL)return await this.fromURL(B);throw new Error(`Unsupported input type: ${typeof B}`)}static fromCanvas(B){if(!Te)throw new Error("fromCanvas() is only supported in browser environments.");const ne=B.getContext("2d").getImageData(0,0,B.width,B.height).data;return new le(ne,B.width,B.height,4)}static async fromURL(B){const J=await(0,z.getFile)(B);if(J.status!==200)throw new Error(`Unable to read image from "${B}" (${J.status} ${J.statusText})`);const ne=await J.blob();return this.fromBlob(ne)}static async fromBlob(B){if(Te){const J=await I(B),ne=$(J.width,J.height).getContext("2d");return ne.drawImage(J,0,0),new this(ne.getImageData(0,0,J.width,J.height).data,J.width,J.height,4)}else{const J=$e(await B.arrayBuffer());return await I(J)}}static fromTensor(B,J="CHW"){if(B.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${B.dims.length} dimensions.`);if(J==="CHW")B=B.transpose(1,2,0);else if(J!=="HWC")throw new Error(`Unsupported channel format: ${J}`);if(!(B.data instanceof Uint8ClampedArray||B.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${B.type}`);switch(B.dims[2]){case 1:case 2:case 3:case 4:return new le(B.data,B.dims[1],B.dims[0],B.dims[2]);default:throw new Error(`Unsupported number of channels: ${B.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const B=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let J=0,ne=0;J<this.data.length;J+=this.channels){const ae=this.data[J],X=this.data[J+1],L=this.data[J+2];B[ne++]=Math.round(.2989*ae+.587*X+.114*L)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(B,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const B=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let J=0,ne=0;J<this.data.length;++J)B[ne++]=this.data[J],B[ne++]=this.data[J],B[ne++]=this.data[J];break;case 4:for(let J=0,ne=0;J<this.data.length;J+=4)B[ne++]=this.data[J],B[ne++]=this.data[J+1],B[ne++]=this.data[J+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(B,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const B=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let J=0,ne=0;J<this.data.length;++J)B[ne++]=this.data[J],B[ne++]=this.data[J],B[ne++]=this.data[J],B[ne++]=255;break;case 3:for(let J=0,ne=0;J<this.data.length;J+=3)B[ne++]=this.data[J],B[ne++]=this.data[J+1],B[ne++]=this.data[J+2],B[ne++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(B,this.width,this.height,4)}async resize(B,J,{resample:ne=2}={}){let ae=Z[ne]??ne;if(Te){const X=this.channels,L=this.toCanvas(),A=$(B,J).getContext("2d");return A.drawImage(L,0,0,B,J),new le(A.getImageData(0,0,B,J).data,B,J,4).convert(X)}else{let X=this.toSharp();switch(ae){case"box":case"hamming":(ae==="box"||ae==="hamming")&&(console.warn(`Resampling method ${ae} is not yet supported. Using bilinear instead.`),ae="bilinear");case"nearest":case"bilinear":case"bicubic":X=X.affine([B/this.width,0,0,J/this.height],{interpolator:ae});break;case"lanczos":X=X.resize({width:B,height:J,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${ae} is not supported.`)}return await I(X)}}async pad([B,J,ne,ae]){if(B=Math.max(B,0),J=Math.max(J,0),ne=Math.max(ne,0),ae=Math.max(ae,0),B===0&&J===0&&ne===0&&ae===0)return this;if(Te){const X=this.channels,L=this.toCanvas(),A=this.width+B+J,D=this.height+ne+ae,k=$(A,D).getContext("2d");return k.drawImage(L,0,0,this.width,this.height,B,ne,A,D),new le(k.getImageData(0,0,A,D).data,A,D,4).convert(X)}else{const X=this.toSharp().extend({left:B,right:J,top:ne,bottom:ae});return await I(X)}}async crop([B,J,ne,ae]){if(B=Math.max(B,0),J=Math.max(J,0),ne=Math.min(ne,this.width-1),ae=Math.min(ae,this.height-1),B===0&&J===0&&ne===this.width-1&&ae===this.height-1)return this;const X=ne-B+1,L=ae-J+1;if(Te){const A=this.channels,D=this.toCanvas(),k=$(X,L).getContext("2d");return k.drawImage(D,B,J,X,L,0,0,X,L),new le(k.getImageData(0,0,X,L).data,X,L,4).convert(A)}else{const A=this.toSharp().extract({left:B,top:J,width:X,height:L});return await I(A)}}async center_crop(B,J){if(this.width===B&&this.height===J)return this;const ne=(this.width-B)/2,ae=(this.height-J)/2;if(Te){const X=this.channels,L=this.toCanvas(),A=$(B,J).getContext("2d");let D=0,k=0,de=0,ve=0;return ne>=0?D=ne:de=-ne,ae>=0?k=ae:ve=-ae,A.drawImage(L,D,k,B,J,de,ve,B,J),new le(A.getImageData(0,0,B,J).data,B,J,4).convert(X)}else{let X=this.toSharp();if(ne>=0&&ae>=0)X=X.extract({left:Math.floor(ne),top:Math.floor(ae),width:B,height:J});else if(ne<=0&&ae<=0){const L=Math.floor(-ae),A=Math.floor(-ne);X=X.extend({top:L,left:A,right:B-this.width-A,bottom:J-this.height-L})}else{let L=[0,0],A=0;ae<0?(L[0]=Math.floor(-ae),L[1]=J-this.height-L[0]):A=Math.floor(ae);let D=[0,0],k=0;ne<0?(D[0]=Math.floor(-ne),D[1]=B-this.width-D[0]):k=Math.floor(ne),X=X.extend({top:L[0],bottom:L[1],left:D[0],right:D[1]}).extract({left:k,top:A,width:B,height:J})}return await I(X)}}async toBlob(B="image/png",J=1){if(!Te)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:B,quality:J})}toTensor(B="CHW"){let J=new Me.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(B!=="HWC")if(B==="CHW")J=J.permute(2,0,1);else throw new Error(`Unsupported channel format: ${B}`);return J}toCanvas(){if(!Te)throw new Error("toCanvas() is only supported in browser environments.");const B=this.clone().rgba(),J=$(B.width,B.height),ne=new V(B.data,B.width,B.height);return J.getContext("2d").putImageData(ne,0,0),J}_update(B,J,ne,ae=null){return this.data=B,this.width=J,this.height=ne,ae!==null&&(this.channels=ae),this}clone(){return new le(this.data.slice(),this.width,this.height,this.channels)}convert(B){if(this.channels===B)return this;switch(B){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(B){if(Te){if(N)throw new Error("Unable to save an image from a Web Worker.");const J=B.split(".").pop().toLowerCase(),ne=se.get(J)??"image/png",ae=await this.toBlob(ne),X=URL.createObjectURL(ae),L=document.createElement("a");L.href=X,L.download=B,L.click(),L.remove()}else{if(fe.env.useFS)return await this.toSharp().toFile(B);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(Te)throw new Error("toSharp() is only supported in server-side environments.");return $e(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}},"./src/utils/maths.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{FFT:()=>me,bankers_round:()=>ne,cos_sim:()=>N,dot:()=>Te,dynamic_time_warping:()=>ae,interpolate_data:()=>z,log_softmax:()=>$e,magnitude:()=>$,max:()=>I,medianFilter:()=>B,min:()=>V,permute_data:()=>fe,round:()=>J,softmax:()=>Me});function z(X,[L,A,D],[k,de],ve="bilinear",Ee=!1){const Ie=de/D,Ae=k/A,tt=new X.constructor(k*de*L),Ye=A*D,pt=k*de;for(let _e=0;_e<k;++_e)for(let U=0;U<de;++U){const ue=_e*de+U,Ce=(U+.5)/Ie-.5,Q=(_e+.5)/Ae-.5;let qe=Math.floor(Ce),ht=Math.floor(Q);const st=Math.min(qe+1,D-1),dt=Math.min(ht+1,A-1);qe=Math.max(qe,0),ht=Math.max(ht,0);const Re=Ce-qe,at=Q-ht,$t=(1-Re)*(1-at),De=Re*(1-at),re=(1-Re)*at,ke=Re*at,je=ht*D,Ge=dt*D,Ue=je+qe,He=je+st,ct=Ge+qe,yt=Ge+st;for(let Mt=0;Mt<L;++Mt){const Et=Mt*Ye;tt[Mt*pt+ue]=$t*X[Et+Ue]+De*X[Et+He]+re*X[Et+ct]+ke*X[Et+yt]}}return tt}function fe(X,L,A){const D=new Array(A.length),k=new Array(A.length);for(let Ee=A.length-1,Ie=1;Ee>=0;--Ee)k[Ee]=Ie,D[Ee]=L[A[Ee]],Ie*=D[Ee];const de=A.map((Ee,Ie)=>k[A.indexOf(Ie)]),ve=new X.constructor(X.length);for(let Ee=0;Ee<X.length;++Ee){let Ie=0;for(let Ae=L.length-1,tt=Ee;Ae>=0;--Ae)Ie+=tt%L[Ae]*de[Ae],tt=Math.floor(tt/L[Ae]);ve[Ie]=X[Ee]}return[ve,D]}function Me(X){const L=I(X)[0],A=X.map(de=>Math.exp(de-L)),D=A.reduce((de,ve)=>de+ve,0);return A.map(de=>de/D)}function $e(X){const L=I(X)[0];let A=0;for(let de=0;de<X.length;++de)A+=Math.exp(X[de]-L);const D=Math.log(A);return X.map(de=>de-L-D)}function Te(X,L){let A=0;for(let D=0;D<X.length;++D)A+=X[D]*L[D];return A}function N(X,L){const A=Te(X,L),D=$(X),k=$(L);return A/(D*k)}function $(X){return Math.sqrt(X.reduce((L,A)=>L+A*A,0))}function V(X){if(X.length===0)throw Error("Array must not be empty");let L=X[0],A=0;for(let D=1;D<X.length;++D)X[D]<L&&(L=X[D],A=D);return[L,A]}function I(X){if(X.length===0)throw Error("Array must not be empty");let L=X[0],A=0;for(let D=1;D<X.length;++D)X[D]>L&&(L=X[D],A=D);return[Number(L),A]}function Z(X){return X>0&&(X&X-1)===0}class se{constructor(L){if(this.size=L|0,this.size<=1||!Z(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=L<<1,this.table=new Float64Array(this.size*2);for(let D=0;D<this.table.length;D+=2){const k=Math.PI*D/this.size;this.table[D]=Math.cos(k),this.table[D+1]=-Math.sin(k)}let A=0;for(let D=1;this.size>D;D<<=1)++A;this._width=A%2===0?A-1:A,this._bitrev=new Int32Array(1<<this._width);for(let D=0;D<this._bitrev.length;++D){this._bitrev[D]=0;for(let k=0;k<this._width;k+=2){const de=this._width-k-2;this._bitrev[D]|=(D>>>k&3)<<de}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(L,A){const D=A||new Array(L.length>>>1);for(let k=0;k<L.length;k+=2)D[k>>>1]=L[k];return D}toComplexArray(L,A){const D=A||this.createComplexArray();for(let k=0;k<D.length;k+=2)D[k]=L[k>>>1],D[k+1]=0;return D}transform(L,A){if(L===A)throw new Error("Input and output buffers must be different");this._transform4(L,A,1)}realTransform(L,A){if(L===A)throw new Error("Input and output buffers must be different");this._realTransform4(L,A,1)}inverseTransform(L,A){if(L===A)throw new Error("Input and output buffers must be different");this._transform4(L,A,-1);for(let D=0;D<L.length;++D)L[D]/=this.size}_transform4(L,A,D){const k=this._csize;let ve=1<<this._width,Ee=k/ve<<1,Ie,Ae;const tt=this._bitrev;if(Ee===4)for(Ie=0,Ae=0;Ie<k;Ie+=Ee,++Ae){const pt=tt[Ae];this._singleTransform2(A,L,Ie,pt,ve)}else for(Ie=0,Ae=0;Ie<k;Ie+=Ee,++Ae){const pt=tt[Ae];this._singleTransform4(A,L,Ie,pt,ve,D)}const Ye=this.table;for(ve>>=2;ve>=2;ve>>=2){Ee=k/ve<<1;const pt=Ee>>>2;for(Ie=0;Ie<k;Ie+=Ee){const _e=Ie+pt-1;for(let U=Ie,ue=0;U<_e;U+=2,ue+=ve){const Ce=U,Q=Ce+pt,qe=Q+pt,ht=qe+pt,st=L[Ce],dt=L[Ce+1],Re=L[Q],at=L[Q+1],$t=L[qe],De=L[qe+1],re=L[ht],ke=L[ht+1],je=Ye[ue],Ge=D*Ye[ue+1],Ue=Re*je-at*Ge,He=Re*Ge+at*je,ct=Ye[2*ue],yt=D*Ye[2*ue+1],Mt=$t*ct-De*yt,Et=$t*yt+De*ct,x=Ye[3*ue],G=D*Ye[3*ue+1],C=re*x-ke*G,Y=re*G+ke*x,ce=st+Mt,Je=dt+Et,Ke=st-Mt,xt=dt-Et,Qe=Ue+C,_t=He+Y,Bt=D*(Ue-C),tr=D*(He-Y);L[Ce]=ce+Qe,L[Ce+1]=Je+_t,L[Q]=Ke+tr,L[Q+1]=xt-Bt,L[qe]=ce-Qe,L[qe+1]=Je-_t,L[ht]=Ke-tr,L[ht+1]=xt+Bt}}}}_singleTransform2(L,A,D,k,de){const ve=L[k],Ee=L[k+1],Ie=L[k+de],Ae=L[k+de+1];A[D]=ve+Ie,A[D+1]=Ee+Ae,A[D+2]=ve-Ie,A[D+3]=Ee-Ae}_singleTransform4(L,A,D,k,de,ve){const Ee=de*2,Ie=de*3,Ae=L[k],tt=L[k+1],Ye=L[k+de],pt=L[k+de+1],_e=L[k+Ee],U=L[k+Ee+1],ue=L[k+Ie],Ce=L[k+Ie+1],Q=Ae+_e,qe=tt+U,ht=Ae-_e,st=tt-U,dt=Ye+ue,Re=pt+Ce,at=ve*(Ye-ue),$t=ve*(pt-Ce);A[D]=Q+dt,A[D+1]=qe+Re,A[D+2]=ht+$t,A[D+3]=st-at,A[D+4]=Q-dt,A[D+5]=qe-Re,A[D+6]=ht-$t,A[D+7]=st+at}_realTransform4(L,A,D){const k=this._csize;let ve=1<<this._width,Ee=k/ve<<1,Ie,Ae;const tt=this._bitrev;if(Ee===4)for(Ie=0,Ae=0;Ie<k;Ie+=Ee,++Ae){const _e=tt[Ae];this._singleRealTransform2(A,L,Ie,_e>>>1,ve>>>1)}else for(Ie=0,Ae=0;Ie<k;Ie+=Ee,++Ae){const _e=tt[Ae];this._singleRealTransform4(A,L,Ie,_e>>>1,ve>>>1,D)}const Ye=this.table;for(ve>>=2;ve>=2;ve>>=2){Ee=k/ve<<1;const _e=Ee>>>1,U=_e>>>1,ue=U>>>1;for(Ie=0;Ie<k;Ie+=Ee)for(let Ce=0,Q=0;Ce<=ue;Ce+=2,Q+=ve){const qe=Ie+Ce,ht=qe+U,st=ht+U,dt=st+U,Re=L[qe],at=L[qe+1],$t=L[ht],De=L[ht+1],re=L[st],ke=L[st+1],je=L[dt],Ge=L[dt+1],Ue=Re,He=at,ct=Ye[Q],yt=D*Ye[Q+1],Mt=$t*ct-De*yt,Et=$t*yt+De*ct,x=Ye[2*Q],G=D*Ye[2*Q+1],C=re*x-ke*G,Y=re*G+ke*x,ce=Ye[3*Q],Je=D*Ye[3*Q+1],Ke=je*ce-Ge*Je,xt=je*Je+Ge*ce,Qe=Ue+C,_t=He+Y,Bt=Ue-C,tr=He-Y,jr=Mt+Ke,Cr=Et+xt,Zr=D*(Mt-Ke),Dr=D*(Et-xt);if(L[qe]=Qe+jr,L[qe+1]=_t+Cr,L[ht]=Bt+Dr,L[ht+1]=tr-Zr,Ce===0){L[st]=Qe-jr,L[st+1]=_t-Cr;continue}if(Ce===ue)continue;const qr=Ie+U-Ce,lt=Ie+_e-Ce;L[qr]=Bt-D*Dr,L[qr+1]=-tr-D*Zr,L[lt]=Qe-D*jr,L[lt+1]=-_t+D*Cr}}const pt=k>>>1;for(let _e=2;_e<pt;_e+=2)L[k-_e]=L[_e],L[k-_e+1]=-L[_e+1]}_singleRealTransform2(L,A,D,k,de){const ve=L[k],Ee=L[k+de];A[D]=ve+Ee,A[D+1]=0,A[D+2]=ve-Ee,A[D+3]=0}_singleRealTransform4(L,A,D,k,de,ve){const Ee=de*2,Ie=de*3,Ae=L[k],tt=L[k+de],Ye=L[k+Ee],pt=L[k+Ie],_e=Ae+Ye,U=Ae-Ye,ue=tt+pt,Ce=ve*(tt-pt);A[D]=_e+ue,A[D+1]=0,A[D+2]=U,A[D+3]=-Ce,A[D+4]=_e-ue,A[D+5]=0,A[D+6]=U,A[D+7]=Ce}}class le{constructor(L){const A=2*(L-1),D=2*(2*L-1),k=2**Math.ceil(Math.log2(D));this.bufferSize=k,this._a=A;const de=new Float64Array(D),ve=new Float64Array(k);this._chirpBuffer=new Float64Array(k),this._buffer1=new Float64Array(k),this._buffer2=new Float64Array(k),this._outBuffer1=new Float64Array(k),this._outBuffer2=new Float64Array(k);const Ee=-2*Math.PI/L,Ie=Math.cos(Ee),Ae=Math.sin(Ee);for(let tt=0;tt<D>>1;++tt){const Ye=(tt+1-L)**2/2,pt=Math.sqrt(Ie**2+Ae**2)**Ye,_e=Ye*Math.atan2(Ae,Ie),U=2*tt;de[U]=pt*Math.cos(_e),de[U+1]=pt*Math.sin(_e),ve[U]=de[U],ve[U+1]=-de[U+1]}this._slicedChirpBuffer=de.subarray(A,D),this._f=new se(k>>1),this._f.transform(this._chirpBuffer,ve)}_transform(L,A,D){const k=this._buffer1,de=this._buffer2,ve=this._outBuffer1,Ee=this._outBuffer2,Ie=this._chirpBuffer,Ae=this._slicedChirpBuffer,tt=this._a;if(D)for(let Ye=0;Ye<Ae.length;Ye+=2){const pt=Ye+1,_e=Ye>>1,U=A[_e];k[Ye]=U*Ae[Ye],k[pt]=U*Ae[pt]}else for(let Ye=0;Ye<Ae.length;Ye+=2){const pt=Ye+1;k[Ye]=A[Ye]*Ae[Ye]-A[pt]*Ae[pt],k[pt]=A[Ye]*Ae[pt]+A[pt]*Ae[Ye]}this._f.transform(ve,k);for(let Ye=0;Ye<Ie.length;Ye+=2){const pt=Ye+1;de[Ye]=ve[Ye]*Ie[Ye]-ve[pt]*Ie[pt],de[pt]=ve[Ye]*Ie[pt]+ve[pt]*Ie[Ye]}this._f.inverseTransform(Ee,de);for(let Ye=0;Ye<Ee.length;Ye+=2){const pt=Ee[Ye+tt],_e=Ee[Ye+tt+1],U=Ae[Ye],ue=Ae[Ye+1];L[Ye]=pt*U-_e*ue,L[Ye+1]=pt*ue+_e*U}}transform(L,A){this._transform(L,A,!1)}realTransform(L,A){this._transform(L,A,!0)}}class me{constructor(L){this.fft_length=L,this.isPowerOfTwo=Z(L),this.isPowerOfTwo?(this.fft=new se(L),this.outputBufferSize=2*L):(this.fft=new le(L),this.outputBufferSize=this.fft.bufferSize)}realTransform(L,A){this.fft.realTransform(L,A)}transform(L,A){this.fft.transform(L,A)}}function B(X,L){if(L%2===0||L<=0)throw new Error("Window size must be a positive odd number");const A=new X.constructor(X.length),D=new X.constructor(L),k=Math.floor(L/2);for(let de=0;de<X.length;++de){let ve=0;for(let Ee=-k;Ee<=k;++Ee){let Ie=de+Ee;Ie<0?Ie=Math.abs(Ie):Ie>=X.length&&(Ie=2*(X.length-1)-Ie),D[ve++]=X[Ie]}D.sort(),A[de]=D[k]}return A}function J(X,L){const A=Math.pow(10,L);return Math.round(X*A)/A}function ne(X){const L=Math.round(X);return Math.abs(X)%1===.5?L%2===0?L:L-1:L}function ae(X){const L=X.length,A=X[0].length,D=[L+1,A+1],k=Array.from({length:D[0]},()=>Array(D[1]).fill(1/0));k[0][0]=0;const de=Array.from({length:D[0]},()=>Array(D[1]).fill(-1));for(let tt=1;tt<D[1];++tt)for(let Ye=1;Ye<D[0];++Ye){const pt=k[Ye-1][tt-1],_e=k[Ye-1][tt],U=k[Ye][tt-1];let ue,Ce;pt<_e&&pt<U?(ue=pt,Ce=0):_e<pt&&_e<U?(ue=_e,Ce=1):(ue=U,Ce=2),k[Ye][tt]=X[Ye-1][tt-1]+ue,de[Ye][tt]=Ce}for(let tt=0;tt<D[1];++tt)de[0][tt]=2;for(let tt=0;tt<D[0];++tt)de[tt][0]=1;let ve=L,Ee=A,Ie=[],Ae=[];for(;ve>0||Ee>0;)switch(Ie.push(ve-1),Ae.push(Ee-1),de[ve][Ee]){case 0:--ve,--Ee;break;case 1:--ve;break;case 2:--Ee;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${ve}, ${Ee}]. Please file a bug report.`)}return Ie.reverse(),Ae.reverse(),[Ie,Ae]}},"./src/utils/tensor.js":(Pt,Se,R)=>{R.r(Se),R.d(Se,{Tensor:()=>Te,cat:()=>X,full:()=>ve,full_like:()=>Ee,interpolate:()=>V,interpolate_4d:()=>I,layer_norm:()=>B,matmul:()=>Z,mean:()=>D,mean_pooling:()=>me,ones:()=>Ie,ones_like:()=>Ae,permute:()=>$,quantize_embeddings:()=>pt,rfft:()=>se,stack:()=>L,std_mean:()=>A,topk:()=>le,zeros:()=>tt,zeros_like:()=>Ye});var z=R("./src/utils/maths.js"),fe=R("./src/backends/onnx.js"),Me=R("./src/ops/registry.js");const $e=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array});class Te{constructor(...U){xe(this,"ort_tensor");return(0,fe.isONNXTensor)(U[0])?this.ort_tensor=U[0]:this.ort_tensor=new fe.Tensor(U[0],U[1],U[2]),new Proxy(this,{get:(ue,Ce)=>{if(typeof Ce=="string"){let Q=Number(Ce);if(Number.isInteger(Q))return ue._getitem(Q)}return ue[Ce]},set:(ue,Ce,Q)=>ue[Ce]=Q})}get dims(){return this.ort_tensor.dims}set dims(U){this.ort_tensor.dims=U}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[U,...ue]=this.dims;if(ue.length>0){const Ce=ue.reduce((Q,qe)=>Q*qe);for(let Q=0;Q<U;++Q)yield this._subarray(Q,Ce,ue)}else yield*this.data}_getitem(U){const[ue,...Ce]=this.dims;if(U=ae(U,ue),Ce.length>0){const Q=Ce.reduce((qe,ht)=>qe*ht);return this._subarray(U,Q,Ce)}else return new Te(this.type,[this.data[U]],Ce)}indexOf(U){const ue=this.data;for(let Ce=0;Ce<ue.length;++Ce)if(ue[Ce]==U)return Ce;return-1}_subarray(U,ue,Ce){const Q=U*ue,qe=(U+1)*ue,ht="subarray"in this.data?this.data.subarray(Q,qe):this.data.slice(Q,qe);return new Te(this.type,ht,Ce)}item(){const U=this.data;if(U.length!==1)throw new Error(`a Tensor with ${U.length} elements cannot be converted to Scalar`);return U[0]}tolist(){return N(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const U=this.data;for(let ue=0;ue<U.length;++ue)U[ue]=1/(1+Math.exp(-U[ue]));return this}mul(U){return this.clone().mul_(U)}mul_(U){const ue=this.data;for(let Ce=0;Ce<ue.length;++Ce)ue[Ce]*=U;return this}div(U){return this.clone().div_(U)}div_(U){const ue=this.data;for(let Ce=0;Ce<ue.length;++Ce)ue[Ce]/=U;return this}add(U){return this.clone().add_(U)}add_(U){const ue=this.data;for(let Ce=0;Ce<ue.length;++Ce)ue[Ce]+=U;return this}sub(U){return this.clone().sub_(U)}sub_(U){const ue=this.data;for(let Ce=0;Ce<ue.length;++Ce)ue[Ce]-=U;return this}clone(){return new Te(this.type,this.data.slice(),this.dims.slice())}slice(...U){const ue=[],Ce=[];for(let Re=0;Re<this.dims.length;++Re){let at=U[Re];if(at==null)Ce.push([0,this.dims[Re]]),ue.push(this.dims[Re]);else if(typeof at=="number")at=ae(at,this.dims[Re],Re),Ce.push([at,at+1]);else if(Array.isArray(at)&&at.length===2){let[$t,De]=at;if($t=$t===null?0:ae($t,this.dims[Re],Re,!1),De=De===null?this.dims[Re]:ae(De,this.dims[Re],Re,!1),$t>De)throw new Error(`Invalid slice: ${at}`);const re=[Math.max($t,0),Math.min(De,this.dims[Re])];Ce.push(re),ue.push(re[1]-re[0])}else throw new Error(`Invalid slice: ${at}`)}const Q=Ce.map(([Re,at])=>at-Re),qe=Q.reduce((Re,at)=>Re*at),ht=this.data,st=new ht.constructor(qe),dt=this.stride();for(let Re=0;Re<qe;++Re){let at=0;for(let $t=Q.length-1,De=Re;$t>=0;--$t){const re=Q[$t];at+=(De%re+Ce[$t][0])*dt[$t],De=Math.floor(De/re)}st[Re]=ht[at]}return new Te(this.type,st,ue)}permute(...U){return $(this,U)}transpose(...U){return this.permute(...U)}sum(U=null,ue=!1){return this.norm(1,U,ue)}norm(U="fro",ue=null,Ce=!1){if(U==="fro")U=2;else if(typeof U=="string")throw Error(`Unsupported norm: ${U}`);const Q=this.data;if(ue===null){let st=Q.reduce((dt,Re)=>dt+Re**U,0)**(1/U);return new Te(this.type,[st],[])}ue=ae(ue,this.dims.length);const qe=this.dims.slice();qe[ue]=1;const ht=new Q.constructor(Q.length/this.dims[ue]);for(let st=0;st<Q.length;++st){let dt=0;for(let Re=this.dims.length-1,at=st,$t=1;Re>=0;--Re){const De=this.dims[Re];if(Re!==ue){const re=at%De;dt+=re*$t,$t*=qe[Re]}at=Math.floor(at/De)}ht[dt]+=Q[st]**U}if(U!==1)for(let st=0;st<ht.length;++st)ht[st]=ht[st]**(1/U);return Ce||qe.splice(ue,1),new Te(this.type,ht,qe)}normalize_(U=2,ue=1){ue=ae(ue,this.dims.length);const Ce=this.norm(U,ue,!0),Q=this.data,qe=Ce.data;for(let ht=0;ht<Q.length;++ht){let st=0;for(let dt=this.dims.length-1,Re=ht,at=1;dt>=0;--dt){const $t=this.dims[dt];if(dt!==ue){const De=Re%$t;st+=De*at,at*=this.dims[dt]}Re=Math.floor(Re/$t)}Q[ht]/=qe[st]}return this}normalize(U=2,ue=1){return this.clone().normalize_(U,ue)}stride(){return k(this.dims)}squeeze(U=null){return new Te(this.type,this.data,J(this.dims,U))}squeeze_(U=null){return this.dims=J(this.dims,U),this}unsqueeze(U=null){return new Te(this.type,this.data,ne(this.dims,U))}unsqueeze_(U=null){return this.dims=ne(this.dims,U),this}flatten_(U=0,ue=-1){ue=(ue+this.dims.length)%this.dims.length;let Ce=this.dims.slice(0,U),Q=this.dims.slice(U,ue+1),qe=this.dims.slice(ue+1);return this.dims=[...Ce,Q.reduce((ht,st)=>ht*st,1),...qe],this}flatten(U=0,ue=-1){return this.clone().flatten_(U,ue)}view(...U){let ue=-1;for(let Q=0;Q<U.length;++Q)if(U[Q]===-1){if(ue!==-1)throw new Error("Only one dimension can be inferred");ue=Q}const Ce=this.data;if(ue!==-1){const Q=U.reduce((qe,ht,st)=>st!==ue?qe*ht:qe,1);U[ue]=Ce.length/Q}return new Te(this.type,Ce,U)}neg_(){const U=this.data;for(let ue=0;ue<U.length;++ue)U[ue]=-U[ue];return this}neg(){return this.clone().neg_()}clamp_(U,ue){const Ce=this.data;for(let Q=0;Q<Ce.length;++Q)Ce[Q]=Math.min(Math.max(Ce[Q],U),ue);return this}clamp(U,ue){return this.clone().clamp_(U,ue)}round_(){const U=this.data;for(let ue=0;ue<U.length;++ue)U[ue]=Math.round(U[ue]);return this}round(){return this.clone().round_()}mean(U=null,ue=!1){return D(this,U,ue)}to(U){if(this.type===U)return this;if(!$e.hasOwnProperty(U))throw new Error(`Unsupported type: ${U}`);return new Te(U,$e[U].from(this.data),this.dims)}}function N(_e,U){const ue=_e.length,Ce=U.reduce((qe,ht)=>qe*ht);if(ue!==Ce)throw Error(`cannot reshape array of size ${ue} into shape (${U})`);let Q=_e;for(let qe=U.length-1;qe>=0;qe--)Q=Q.reduce((ht,st)=>{let dt=ht[ht.length-1];return dt.length<U[qe]?dt.push(st):ht.push([st]),ht},[[]]);return Q[0]}function $(_e,U){const[ue,Ce]=(0,z.permute_data)(_e.data,_e.dims,U);return new Te(_e.type,ue,Ce)}function V(_e,[U,ue],Ce="bilinear",Q=!1){const qe=_e.dims.at(-3)??1,ht=_e.dims.at(-2),st=_e.dims.at(-1);let dt=(0,z.interpolate_data)(_e.data,[qe,ht,st],[U,ue],Ce,Q);return new Te(_e.type,dt,[qe,U,ue])}async function I(_e,{size:U=null,mode:ue="bilinear"}={}){if(_e.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!U)throw new Error("`interpolate_4d` requires a `size` argument.");let Ce;if(U.length===2)Ce=[..._e.dims.slice(0,2),...U];else if(U.length===3)Ce=[_e.dims[0],...U];else if(U.length===4)Ce=U;else throw new Error("`size` must be of length 2, 3, or 4.");let Q;if(ue==="bilinear")Q=await Me.TensorOpRegistry.bilinear_interpolate_4d;else if(ue==="bicubic")Q=await Me.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${ue}`);const qe=new Te("int64",new BigInt64Array(Ce.map(BigInt)),[Ce.length]);return await Q({x:_e,s:qe})}async function Z(_e,U){return await(await Me.TensorOpRegistry.matmul)({a:_e,b:U})}async function se(_e,U){return await(await Me.TensorOpRegistry.rfft)({x:_e,a:U})}async function le(_e,U){const ue=await Me.TensorOpRegistry.top_k;return U===null?U=_e.dims.at(-1):U=Math.min(U,_e.dims.at(-1)),await ue({x:_e,k:new Te("int64",[BigInt(U)],[1])})}function me(_e,U){const ue=_e.data,Ce=U.data,Q=[_e.dims[0],_e.dims[2]],qe=new ue.constructor(Q[0]*Q[1]),[ht,st,dt]=_e.dims;let Re=0;for(let at=0;at<ht;++at){const $t=at*dt*st;for(let De=0;De<dt;++De){let re=0,ke=0;const je=at*st,Ge=$t+De;for(let He=0;He<st;++He){const ct=Number(Ce[je+He]);ke+=ct,re+=ue[Ge+He*dt]*ct}const Ue=re/ke;qe[Re++]=Ue}}return new Te(_e.type,qe,Q)}function B(_e,U,{eps:ue=1e-5}={}){if(_e.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[Ce,Q]=_e.dims;if(U.length!==1&&U[0]!==Q)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[qe,ht]=A(_e,1,0,!0),st=qe.data,dt=ht.data,Re=_e.data,at=new Re.constructor(Re.length);for(let $t=0;$t<Ce;++$t){const De=$t*Q;for(let re=0;re<Q;++re){const ke=De+re;at[ke]=(Re[ke]-dt[$t])/(st[$t]+ue)}}return new Te(_e.type,at,_e.dims)}function J(_e,U){return _e=_e.slice(),U===null?_e=_e.filter(ue=>ue!==1):typeof U=="number"?_e[U]===1&&_e.splice(U,1):Array.isArray(U)&&(_e=_e.filter((ue,Ce)=>ue!==1||!U.includes(Ce))),_e}function ne(_e,U){return U=ae(U,_e.length+1),_e=_e.slice(),_e.splice(U,0,1),_e}function ae(_e,U,ue=null,Ce=!0){if(Ce&&(_e<-U||_e>=U))throw new Error(`IndexError: index ${_e} is out of bounds for dimension${ue===null?"":" "+ue} with size ${U}`);return _e<0&&(_e=(_e%U+U)%U),_e}function X(_e,U=0){U=ae(U,_e[0].dims.length);const ue=_e[0].dims.slice();ue[U]=_e.reduce((ht,st)=>ht+st.dims[U],0);const Ce=ue.reduce((ht,st)=>ht*st,1),Q=new _e[0].data.constructor(Ce),qe=_e[0].type;if(U===0){let ht=0;for(const st of _e){const dt=st.data;Q.set(dt,ht),ht+=dt.length}}else{let ht=0;for(let st=0;st<_e.length;++st){const{data:dt,dims:Re}=_e[st];for(let at=0;at<dt.length;++at){let $t=0;for(let De=Re.length-1,re=at,ke=1;De>=0;--De){const je=Re[De];let Ge=re%je;De===U&&(Ge+=ht),$t+=Ge*ke,ke*=ue[De],re=Math.floor(re/je)}Q[$t]=dt[at]}ht+=Re[U]}}return new Te(qe,Q,ue)}function L(_e,U=0){return X(_e.map(ue=>ue.unsqueeze(U)),U)}function A(_e,U=null,ue=1,Ce=!1){const Q=_e.data,qe=_e.dims;if(U===null){const De=Q.reduce((Ge,Ue)=>Ge+Ue,0)/Q.length,re=Math.sqrt(Q.reduce((Ge,Ue)=>Ge+(Ue-De)**2,0)/(Q.length-ue)),ke=new Te(_e.type,[De],[]);return[new Te(_e.type,[re],[]),ke]}U=ae(U,qe.length);const ht=D(_e,U,Ce),st=ht.data,dt=qe.slice();dt[U]=1;const Re=new Q.constructor(Q.length/qe[U]);for(let $t=0;$t<Q.length;++$t){let De=0;for(let re=qe.length-1,ke=$t,je=1;re>=0;--re){const Ge=qe[re];if(re!==U){const Ue=ke%Ge;De+=Ue*je,je*=dt[re]}ke=Math.floor(ke/Ge)}Re[De]+=(Q[$t]-st[De])**2}for(let $t=0;$t<Re.length;++$t)Re[$t]=Math.sqrt(Re[$t]/(qe[U]-ue));return Ce||dt.splice(U,1),[new Te(_e.type,Re,dt),ht]}function D(_e,U=null,ue=!1){const Ce=_e.data;if(U===null){const st=Ce.reduce((dt,Re)=>dt+Re,0);return new Te(_e.type,[st/Ce.length],[])}const Q=_e.dims;U=ae(U,Q.length);const qe=Q.slice();qe[U]=1;const ht=new Ce.constructor(Ce.length/Q[U]);for(let st=0;st<Ce.length;++st){let dt=0;for(let Re=Q.length-1,at=st,$t=1;Re>=0;--Re){const De=Q[Re];if(Re!==U){const re=at%De;dt+=re*$t,$t*=qe[Re]}at=Math.floor(at/De)}ht[dt]+=Ce[st]}if(Q[U]!==1)for(let st=0;st<ht.length;++st)ht[st]=ht[st]/Q[U];return ue||qe.splice(U,1),new Te(_e.type,ht,qe)}function k(_e){const U=new Array(_e.length);for(let ue=_e.length-1,Ce=1;ue>=0;--ue)U[ue]=Ce,Ce*=_e[ue];return U}function de(_e,U,ue,Ce){const Q=_e.reduce((qe,ht)=>qe*ht,1);return new Te(ue,new Ce(Q).fill(U),_e)}function ve(_e,U){let ue,Ce;if(typeof U=="number")ue="float32",Ce=Float32Array;else if(typeof U=="bigint")ue="int64",Ce=BigInt64Array;else throw new Error(`Unsupported data type: ${typeof U}`);return de(_e,U,ue,Ce)}function Ee(_e,U){return ve(_e.dims,U)}function Ie(_e){return de(_e,1n,"int64",BigInt64Array)}function Ae(_e){return Ie(_e.dims)}function tt(_e){return de(_e,0n,"int64",BigInt64Array)}function Ye(_e){return tt(_e.dims)}function pt(_e,U){if(_e.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(_e.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(U))throw new Error("The precision must be either 'binary' or 'ubinary'");const ue=U==="binary",Ce=ue?"int8":"uint8",Q=ue?Int8Array:Uint8Array,qe=_e.data,ht=new Q(qe.length/8);for(let st=0;st<qe.length;++st){const dt=qe[st]>0?1:0,Re=Math.floor(st/8),at=st%8;ht[Re]|=dt<<7-at,ue&&at===0&&(ht[Re]-=128)}return new Te(Ce,ht,[_e.dims[0],_e.dims[1]/8])}}},hf={};function Yr(Pt){var Se=hf[Pt];if(Se!==void 0)return Se.exports;var R=hf[Pt]={exports:{}};return ff[Pt](R,R.exports,Yr),R.exports}Yr.m=ff;(()=>{var Pt=Object.getPrototypeOf?R=>Object.getPrototypeOf(R):R=>R.__proto__,Se;Yr.t=function(R,z){if(z&1&&(R=this(R)),z&8||typeof R=="object"&&R&&(z&4&&R.__esModule||z&16&&typeof R.then=="function"))return R;var fe=Object.create(null);Yr.r(fe);var Me={};Se=Se||[null,Pt({}),Pt([]),Pt(Pt)];for(var $e=z&2&&R;typeof $e=="object"&&!~Se.indexOf($e);$e=Pt($e))Object.getOwnPropertyNames($e).forEach(Te=>Me[Te]=()=>R[Te]);return Me.default=()=>R,Yr.d(fe,Me),fe}})();Yr.d=(Pt,Se)=>{for(var R in Se)Yr.o(Se,R)&&!Yr.o(Pt,R)&&Object.defineProperty(Pt,R,{enumerable:!0,get:Se[R]})};Yr.o=(Pt,Se)=>Object.prototype.hasOwnProperty.call(Pt,Se);Yr.r=Pt=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(Pt,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Pt,"__esModule",{value:!0})};(()=>{var Pt;if(typeof import.meta.url=="string"&&(Pt=import.meta.url),!Pt)throw new Error("Automatic publicPath is not supported in this browser");Pt=Pt.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),Yr.p=Pt})();Yr.b=new URL("./",import.meta.url);var c={};/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/Yr.r(c);Yr.d(c,{ASTFeatureExtractor:()=>Yt.ASTFeatureExtractor,ASTForAudioClassification:()=>y.ASTForAudioClassification,ASTModel:()=>y.ASTModel,ASTPreTrainedModel:()=>y.ASTPreTrainedModel,AlbertForMaskedLM:()=>y.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>y.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>y.AlbertForSequenceClassification,AlbertModel:()=>y.AlbertModel,AlbertPreTrainedModel:()=>y.AlbertPreTrainedModel,AlbertTokenizer:()=>rr.AlbertTokenizer,AudioClassificationPipeline:()=>Qr.AudioClassificationPipeline,AutoConfig:()=>qc.AutoConfig,AutoModel:()=>y.AutoModel,AutoModelForAudioClassification:()=>y.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>y.AutoModelForAudioFrameClassification,AutoModelForCTC:()=>y.AutoModelForCTC,AutoModelForCausalLM:()=>y.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>y.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>y.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>y.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>y.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>y.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>y.AutoModelForImageSegmentation,AutoModelForImageToImage:()=>y.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>y.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>y.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>y.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>y.AutoModelForObjectDetection,AutoModelForQuestionAnswering:()=>y.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>y.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>y.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>y.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>y.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>y.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>y.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>y.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>y.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>y.AutoModelForVision2Seq,AutoModelForXVector:()=>y.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>y.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>Yt.AutoProcessor,AutoTokenizer:()=>rr.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>Qr.AutomaticSpeechRecognitionPipeline,BartForConditionalGeneration:()=>y.BartForConditionalGeneration,BartForSequenceClassification:()=>y.BartForSequenceClassification,BartModel:()=>y.BartModel,BartPretrainedModel:()=>y.BartPretrainedModel,BartTokenizer:()=>rr.BartTokenizer,BaseModelOutput:()=>y.BaseModelOutput,BaseStreamer:()=>Hc.BaseStreamer,BeitFeatureExtractor:()=>Yt.BeitFeatureExtractor,BeitForImageClassification:()=>y.BeitForImageClassification,BeitModel:()=>y.BeitModel,BeitPreTrainedModel:()=>y.BeitPreTrainedModel,BertForMaskedLM:()=>y.BertForMaskedLM,BertForQuestionAnswering:()=>y.BertForQuestionAnswering,BertForSequenceClassification:()=>y.BertForSequenceClassification,BertForTokenClassification:()=>y.BertForTokenClassification,BertModel:()=>y.BertModel,BertPreTrainedModel:()=>y.BertPreTrainedModel,BertTokenizer:()=>rr.BertTokenizer,BitImageProcessor:()=>Yt.BitImageProcessor,BlenderbotForConditionalGeneration:()=>y.BlenderbotForConditionalGeneration,BlenderbotModel:()=>y.BlenderbotModel,BlenderbotPreTrainedModel:()=>y.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>y.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>y.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>y.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>rr.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>rr.BlenderbotTokenizer,BloomForCausalLM:()=>y.BloomForCausalLM,BloomModel:()=>y.BloomModel,BloomPreTrainedModel:()=>y.BloomPreTrainedModel,BloomTokenizer:()=>rr.BloomTokenizer,CLIPFeatureExtractor:()=>Yt.CLIPFeatureExtractor,CLIPImageProcessor:()=>Yt.CLIPImageProcessor,CLIPModel:()=>y.CLIPModel,CLIPPreTrainedModel:()=>y.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>y.CLIPSegForImageSegmentation,CLIPSegModel:()=>y.CLIPSegModel,CLIPSegPreTrainedModel:()=>y.CLIPSegPreTrainedModel,CLIPTextModel:()=>y.CLIPTextModel,CLIPTextModelWithProjection:()=>y.CLIPTextModelWithProjection,CLIPTokenizer:()=>rr.CLIPTokenizer,CLIPVisionModel:()=>y.CLIPVisionModel,CLIPVisionModelWithProjection:()=>y.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>y.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>y.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>y.CamembertForSequenceClassification,CamembertForTokenClassification:()=>y.CamembertForTokenClassification,CamembertModel:()=>y.CamembertModel,CamembertPreTrainedModel:()=>y.CamembertPreTrainedModel,CamembertTokenizer:()=>rr.CamembertTokenizer,CausalLMOutput:()=>y.CausalLMOutput,CausalLMOutputWithPast:()=>y.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>Yt.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>y.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>y.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>y.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>Yt.ClapFeatureExtractor,ClapModel:()=>y.ClapModel,ClapPreTrainedModel:()=>y.ClapPreTrainedModel,ClapTextModelWithProjection:()=>y.ClapTextModelWithProjection,CodeGenForCausalLM:()=>y.CodeGenForCausalLM,CodeGenModel:()=>y.CodeGenModel,CodeGenPreTrainedModel:()=>y.CodeGenPreTrainedModel,CodeGenTokenizer:()=>rr.CodeGenTokenizer,CodeLlamaTokenizer:()=>rr.CodeLlamaTokenizer,CohereForCausalLM:()=>y.CohereForCausalLM,CohereModel:()=>y.CohereModel,CoherePreTrainedModel:()=>y.CoherePreTrainedModel,CohereTokenizer:()=>rr.CohereTokenizer,ConvBertForMaskedLM:()=>y.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>y.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>y.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>y.ConvBertForTokenClassification,ConvBertModel:()=>y.ConvBertModel,ConvBertPreTrainedModel:()=>y.ConvBertPreTrainedModel,ConvBertTokenizer:()=>rr.ConvBertTokenizer,ConvNextFeatureExtractor:()=>Yt.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>y.ConvNextForImageClassification,ConvNextImageProcessor:()=>Yt.ConvNextImageProcessor,ConvNextModel:()=>y.ConvNextModel,ConvNextPreTrainedModel:()=>y.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>y.ConvNextV2ForImageClassification,ConvNextV2Model:()=>y.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>y.ConvNextV2PreTrainedModel,DPTFeatureExtractor:()=>Yt.DPTFeatureExtractor,DPTForDepthEstimation:()=>y.DPTForDepthEstimation,DPTImageProcessor:()=>Yt.DPTImageProcessor,DPTModel:()=>y.DPTModel,DPTPreTrainedModel:()=>y.DPTPreTrainedModel,DebertaForMaskedLM:()=>y.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>y.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>y.DebertaForSequenceClassification,DebertaForTokenClassification:()=>y.DebertaForTokenClassification,DebertaModel:()=>y.DebertaModel,DebertaPreTrainedModel:()=>y.DebertaPreTrainedModel,DebertaTokenizer:()=>rr.DebertaTokenizer,DebertaV2ForMaskedLM:()=>y.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>y.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>y.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>y.DebertaV2ForTokenClassification,DebertaV2Model:()=>y.DebertaV2Model,DebertaV2PreTrainedModel:()=>y.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>rr.DebertaV2Tokenizer,DecisionTransformerModel:()=>y.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>y.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>Yt.DeiTFeatureExtractor,DeiTForImageClassification:()=>y.DeiTForImageClassification,DeiTModel:()=>y.DeiTModel,DeiTPreTrainedModel:()=>y.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>y.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>y.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>Qr.DepthEstimationPipeline,DetrFeatureExtractor:()=>Yt.DetrFeatureExtractor,DetrForObjectDetection:()=>y.DetrForObjectDetection,DetrForSegmentation:()=>y.DetrForSegmentation,DetrModel:()=>y.DetrModel,DetrObjectDetectionOutput:()=>y.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>y.DetrPreTrainedModel,DetrSegmentationOutput:()=>y.DetrSegmentationOutput,Dinov2ForImageClassification:()=>y.Dinov2ForImageClassification,Dinov2Model:()=>y.Dinov2Model,Dinov2PreTrainedModel:()=>y.Dinov2PreTrainedModel,DistilBertForMaskedLM:()=>y.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>y.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>y.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>y.DistilBertForTokenClassification,DistilBertModel:()=>y.DistilBertModel,DistilBertPreTrainedModel:()=>y.DistilBertPreTrainedModel,DistilBertTokenizer:()=>rr.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>Qr.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>Yt.DonutFeatureExtractor,DonutSwinModel:()=>y.DonutSwinModel,DonutSwinPreTrainedModel:()=>y.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>y.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>Yt.EfficientNetImageProcessor,EfficientNetModel:()=>y.EfficientNetModel,EfficientNetPreTrainedModel:()=>y.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>y.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>y.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>y.ElectraForSequenceClassification,ElectraForTokenClassification:()=>y.ElectraForTokenClassification,ElectraModel:()=>y.ElectraModel,ElectraPreTrainedModel:()=>y.ElectraPreTrainedModel,ElectraTokenizer:()=>rr.ElectraTokenizer,EosTokenCriteria:()=>ld.EosTokenCriteria,EsmForMaskedLM:()=>y.EsmForMaskedLM,EsmForSequenceClassification:()=>y.EsmForSequenceClassification,EsmForTokenClassification:()=>y.EsmForTokenClassification,EsmModel:()=>y.EsmModel,EsmPreTrainedModel:()=>y.EsmPreTrainedModel,EsmTokenizer:()=>rr.EsmTokenizer,FFT:()=>An.FFT,FalconForCausalLM:()=>y.FalconForCausalLM,FalconModel:()=>y.FalconModel,FalconPreTrainedModel:()=>y.FalconPreTrainedModel,FalconTokenizer:()=>rr.FalconTokenizer,FastViTForImageClassification:()=>y.FastViTForImageClassification,FastViTModel:()=>y.FastViTModel,FastViTPreTrainedModel:()=>y.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>Qr.FeatureExtractionPipeline,FeatureExtractor:()=>Yt.FeatureExtractor,FillMaskPipeline:()=>Qr.FillMaskPipeline,Florence2ForConditionalGeneration:()=>y.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>y.Florence2PreTrainedModel,Florence2Processor:()=>Yt.Florence2Processor,GLPNFeatureExtractor:()=>Yt.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>y.GLPNForDepthEstimation,GLPNModel:()=>y.GLPNModel,GLPNPreTrainedModel:()=>y.GLPNPreTrainedModel,GPT2LMHeadModel:()=>y.GPT2LMHeadModel,GPT2Model:()=>y.GPT2Model,GPT2PreTrainedModel:()=>y.GPT2PreTrainedModel,GPT2Tokenizer:()=>rr.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>y.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>y.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>y.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>y.GPTJForCausalLM,GPTJModel:()=>y.GPTJModel,GPTJPreTrainedModel:()=>y.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>y.GPTNeoForCausalLM,GPTNeoModel:()=>y.GPTNeoModel,GPTNeoPreTrainedModel:()=>y.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>y.GPTNeoXForCausalLM,GPTNeoXModel:()=>y.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>y.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>rr.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>y.Gemma2ForCausalLM,Gemma2Model:()=>y.Gemma2Model,Gemma2PreTrainedModel:()=>y.Gemma2PreTrainedModel,GemmaForCausalLM:()=>y.GemmaForCausalLM,GemmaModel:()=>y.GemmaModel,GemmaPreTrainedModel:()=>y.GemmaPreTrainedModel,GemmaTokenizer:()=>rr.GemmaTokenizer,Grok1Tokenizer:()=>rr.Grok1Tokenizer,GroupViTModel:()=>y.GroupViTModel,GroupViTPreTrainedModel:()=>y.GroupViTPreTrainedModel,HerbertTokenizer:()=>rr.HerbertTokenizer,HieraForImageClassification:()=>y.HieraForImageClassification,HieraModel:()=>y.HieraModel,HieraPreTrainedModel:()=>y.HieraPreTrainedModel,HubertForCTC:()=>y.HubertForCTC,HubertForSequenceClassification:()=>y.HubertForSequenceClassification,HubertModel:()=>y.HubertModel,HubertPreTrainedModel:()=>y.HubertPreTrainedModel,ImageClassificationPipeline:()=>Qr.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>Qr.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>Yt.ImageFeatureExtractor,ImageMattingOutput:()=>y.ImageMattingOutput,ImageSegmentationPipeline:()=>Qr.ImageSegmentationPipeline,ImageToImagePipeline:()=>Qr.ImageToImagePipeline,ImageToTextPipeline:()=>Qr.ImageToTextPipeline,InterruptableStoppingCriteria:()=>ld.InterruptableStoppingCriteria,JAISLMHeadModel:()=>y.JAISLMHeadModel,JAISModel:()=>y.JAISModel,JAISPreTrainedModel:()=>y.JAISPreTrainedModel,LlamaForCausalLM:()=>y.LlamaForCausalLM,LlamaModel:()=>y.LlamaModel,LlamaPreTrainedModel:()=>y.LlamaPreTrainedModel,LlamaTokenizer:()=>rr.LlamaTokenizer,LlavaForConditionalGeneration:()=>y.LlavaForConditionalGeneration,LlavaPreTrainedModel:()=>y.LlavaPreTrainedModel,LongT5ForConditionalGeneration:()=>y.LongT5ForConditionalGeneration,LongT5Model:()=>y.LongT5Model,LongT5PreTrainedModel:()=>y.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>y.M2M100ForConditionalGeneration,M2M100Model:()=>y.M2M100Model,M2M100PreTrainedModel:()=>y.M2M100PreTrainedModel,M2M100Tokenizer:()=>rr.M2M100Tokenizer,MBart50Tokenizer:()=>rr.MBart50Tokenizer,MBartForCausalLM:()=>y.MBartForCausalLM,MBartForConditionalGeneration:()=>y.MBartForConditionalGeneration,MBartForSequenceClassification:()=>y.MBartForSequenceClassification,MBartModel:()=>y.MBartModel,MBartPreTrainedModel:()=>y.MBartPreTrainedModel,MBartTokenizer:()=>rr.MBartTokenizer,MPNetForMaskedLM:()=>y.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>y.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>y.MPNetForSequenceClassification,MPNetForTokenClassification:()=>y.MPNetForTokenClassification,MPNetModel:()=>y.MPNetModel,MPNetPreTrainedModel:()=>y.MPNetPreTrainedModel,MPNetTokenizer:()=>rr.MPNetTokenizer,MT5ForConditionalGeneration:()=>y.MT5ForConditionalGeneration,MT5Model:()=>y.MT5Model,MT5PreTrainedModel:()=>y.MT5PreTrainedModel,MarianMTModel:()=>y.MarianMTModel,MarianModel:()=>y.MarianModel,MarianPreTrainedModel:()=>y.MarianPreTrainedModel,MarianTokenizer:()=>rr.MarianTokenizer,MaskFormerFeatureExtractor:()=>Yt.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>y.MaskFormerForInstanceSegmentation,MaskFormerModel:()=>y.MaskFormerModel,MaskFormerPreTrainedModel:()=>y.MaskFormerPreTrainedModel,MaskedLMOutput:()=>y.MaskedLMOutput,MaxLengthCriteria:()=>ld.MaxLengthCriteria,MistralForCausalLM:()=>y.MistralForCausalLM,MistralModel:()=>y.MistralModel,MistralPreTrainedModel:()=>y.MistralPreTrainedModel,MobileBertForMaskedLM:()=>y.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>y.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>y.MobileBertForSequenceClassification,MobileBertModel:()=>y.MobileBertModel,MobileBertPreTrainedModel:()=>y.MobileBertPreTrainedModel,MobileBertTokenizer:()=>rr.MobileBertTokenizer,MobileNetV1FeatureExtractor:()=>Yt.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>y.MobileNetV1ForImageClassification,MobileNetV1Model:()=>y.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>y.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>Yt.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>y.MobileNetV2ForImageClassification,MobileNetV2Model:()=>y.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>y.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>Yt.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>y.MobileNetV3ForImageClassification,MobileNetV3Model:()=>y.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>y.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>Yt.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>y.MobileNetV4ForImageClassification,MobileNetV4Model:()=>y.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>y.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>Yt.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>y.MobileViTForImageClassification,MobileViTImageProcessor:()=>Yt.MobileViTImageProcessor,MobileViTModel:()=>y.MobileViTModel,MobileViTPreTrainedModel:()=>y.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>y.MobileViTV2ForImageClassification,MobileViTV2Model:()=>y.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>y.MobileViTV2PreTrainedModel,ModelOutput:()=>y.ModelOutput,Moondream1ForConditionalGeneration:()=>y.Moondream1ForConditionalGeneration,MptForCausalLM:()=>y.MptForCausalLM,MptModel:()=>y.MptModel,MptPreTrainedModel:()=>y.MptPreTrainedModel,MusicgenForCausalLM:()=>y.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>y.MusicgenForConditionalGeneration,MusicgenModel:()=>y.MusicgenModel,MusicgenPreTrainedModel:()=>y.MusicgenPreTrainedModel,NllbTokenizer:()=>rr.NllbTokenizer,NomicBertModel:()=>y.NomicBertModel,NomicBertPreTrainedModel:()=>y.NomicBertPreTrainedModel,NougatImageProcessor:()=>Yt.NougatImageProcessor,NougatTokenizer:()=>rr.NougatTokenizer,OPTForCausalLM:()=>y.OPTForCausalLM,OPTModel:()=>y.OPTModel,OPTPreTrainedModel:()=>y.OPTPreTrainedModel,ObjectDetectionPipeline:()=>Qr.ObjectDetectionPipeline,OpenELMForCausalLM:()=>y.OpenELMForCausalLM,OpenELMModel:()=>y.OpenELMModel,OpenELMPreTrainedModel:()=>y.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>Yt.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>y.OwlViTForObjectDetection,OwlViTModel:()=>y.OwlViTModel,OwlViTPreTrainedModel:()=>y.OwlViTPreTrainedModel,OwlViTProcessor:()=>Yt.OwlViTProcessor,Owlv2ForObjectDetection:()=>y.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>Yt.Owlv2ImageProcessor,Owlv2Model:()=>y.Owlv2Model,Owlv2PreTrainedModel:()=>y.Owlv2PreTrainedModel,Phi3ForCausalLM:()=>y.Phi3ForCausalLM,Phi3Model:()=>y.Phi3Model,Phi3PreTrainedModel:()=>y.Phi3PreTrainedModel,PhiForCausalLM:()=>y.PhiForCausalLM,PhiModel:()=>y.PhiModel,PhiPreTrainedModel:()=>y.PhiPreTrainedModel,Pipeline:()=>Qr.Pipeline,PreTrainedModel:()=>y.PreTrainedModel,PreTrainedTokenizer:()=>rr.PreTrainedTokenizer,PretrainedConfig:()=>qc.PretrainedConfig,PretrainedMixin:()=>y.PretrainedMixin,Processor:()=>Yt.Processor,PvtForImageClassification:()=>y.PvtForImageClassification,PvtImageProcessor:()=>Yt.PvtImageProcessor,PvtModel:()=>y.PvtModel,PvtPreTrainedModel:()=>y.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>Yt.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>y.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>y.PyAnnoteModel,PyAnnotePreTrainedModel:()=>y.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>Yt.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>y.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>Qr.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>y.Qwen2ForCausalLM,Qwen2Model:()=>y.Qwen2Model,Qwen2PreTrainedModel:()=>y.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>rr.Qwen2Tokenizer,RTDetrForObjectDetection:()=>y.RTDetrForObjectDetection,RTDetrImageProcessor:()=>Yt.RTDetrImageProcessor,RTDetrModel:()=>y.RTDetrModel,RTDetrObjectDetectionOutput:()=>y.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>y.RTDetrPreTrainedModel,RawImage:()=>Jm.RawImage,ResNetForImageClassification:()=>y.ResNetForImageClassification,ResNetModel:()=>y.ResNetModel,ResNetPreTrainedModel:()=>y.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>y.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>y.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>y.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>y.RoFormerForTokenClassification,RoFormerModel:()=>y.RoFormerModel,RoFormerPreTrainedModel:()=>y.RoFormerPreTrainedModel,RoFormerTokenizer:()=>rr.RoFormerTokenizer,RobertaForMaskedLM:()=>y.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>y.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>y.RobertaForSequenceClassification,RobertaForTokenClassification:()=>y.RobertaForTokenClassification,RobertaModel:()=>y.RobertaModel,RobertaPreTrainedModel:()=>y.RobertaPreTrainedModel,RobertaTokenizer:()=>rr.RobertaTokenizer,SamImageProcessor:()=>Yt.SamImageProcessor,SamImageSegmentationOutput:()=>y.SamImageSegmentationOutput,SamModel:()=>y.SamModel,SamPreTrainedModel:()=>y.SamPreTrainedModel,SamProcessor:()=>Yt.SamProcessor,SapiensFeatureExtractor:()=>Yt.SapiensFeatureExtractor,SapiensForDepthEstimation:()=>y.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>y.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>y.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>y.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>Yt.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>Yt.SegformerFeatureExtractor,SegformerForImageClassification:()=>y.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>y.SegformerForSemanticSegmentation,SegformerModel:()=>y.SegformerModel,SegformerPreTrainedModel:()=>y.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>y.Seq2SeqLMOutput,SequenceClassifierOutput:()=>y.SequenceClassifierOutput,SiglipImageProcessor:()=>Yt.SiglipImageProcessor,SiglipModel:()=>y.SiglipModel,SiglipPreTrainedModel:()=>y.SiglipPreTrainedModel,SiglipTextModel:()=>y.SiglipTextModel,SiglipTokenizer:()=>rr.SiglipTokenizer,SiglipVisionModel:()=>y.SiglipVisionModel,SpeechT5FeatureExtractor:()=>Yt.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>y.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>y.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>y.SpeechT5HifiGan,SpeechT5Model:()=>y.SpeechT5Model,SpeechT5PreTrainedModel:()=>y.SpeechT5PreTrainedModel,SpeechT5Processor:()=>Yt.SpeechT5Processor,SpeechT5Tokenizer:()=>rr.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>y.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>y.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>y.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>y.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>y.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>rr.SqueezeBertTokenizer,StableLmForCausalLM:()=>y.StableLmForCausalLM,StableLmModel:()=>y.StableLmModel,StableLmPreTrainedModel:()=>y.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>y.Starcoder2ForCausalLM,Starcoder2Model:()=>y.Starcoder2Model,Starcoder2PreTrainedModel:()=>y.Starcoder2PreTrainedModel,StoppingCriteria:()=>ld.StoppingCriteria,StoppingCriteriaList:()=>ld.StoppingCriteriaList,SummarizationPipeline:()=>Qr.SummarizationPipeline,Swin2SRForImageSuperResolution:()=>y.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>Yt.Swin2SRImageProcessor,Swin2SRModel:()=>y.Swin2SRModel,Swin2SRPreTrainedModel:()=>y.Swin2SRPreTrainedModel,SwinForImageClassification:()=>y.SwinForImageClassification,SwinModel:()=>y.SwinModel,SwinPreTrainedModel:()=>y.SwinPreTrainedModel,T5ForConditionalGeneration:()=>y.T5ForConditionalGeneration,T5Model:()=>y.T5Model,T5PreTrainedModel:()=>y.T5PreTrainedModel,T5Tokenizer:()=>rr.T5Tokenizer,TableTransformerForObjectDetection:()=>y.TableTransformerForObjectDetection,TableTransformerModel:()=>y.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>y.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>y.TableTransformerPreTrainedModel,Tensor:()=>ln.Tensor,Text2TextGenerationPipeline:()=>Qr.Text2TextGenerationPipeline,TextClassificationPipeline:()=>Qr.TextClassificationPipeline,TextGenerationPipeline:()=>Qr.TextGenerationPipeline,TextStreamer:()=>Hc.TextStreamer,TextToAudioPipeline:()=>Qr.TextToAudioPipeline,TokenClassificationPipeline:()=>Qr.TokenClassificationPipeline,TokenClassifierOutput:()=>y.TokenClassifierOutput,TokenizerModel:()=>rr.TokenizerModel,TrOCRForCausalLM:()=>y.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>y.TrOCRPreTrainedModel,TranslationPipeline:()=>Qr.TranslationPipeline,UniSpeechForCTC:()=>y.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>y.UniSpeechForSequenceClassification,UniSpeechModel:()=>y.UniSpeechModel,UniSpeechPreTrainedModel:()=>y.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>y.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>y.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>y.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>y.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>y.UniSpeechSatPreTrainedModel,ViTFeatureExtractor:()=>Yt.ViTFeatureExtractor,ViTForImageClassification:()=>y.ViTForImageClassification,ViTImageProcessor:()=>Yt.ViTImageProcessor,ViTMAEModel:()=>y.ViTMAEModel,ViTMAEPreTrainedModel:()=>y.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>y.ViTMSNForImageClassification,ViTMSNModel:()=>y.ViTMSNModel,ViTMSNPreTrainedModel:()=>y.ViTMSNPreTrainedModel,ViTModel:()=>y.ViTModel,ViTPreTrainedModel:()=>y.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>y.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>y.VitMatteForImageMatting,VitMatteImageProcessor:()=>Yt.VitMatteImageProcessor,VitMattePreTrainedModel:()=>y.VitMattePreTrainedModel,VitsModel:()=>y.VitsModel,VitsModelOutput:()=>y.VitsModelOutput,VitsPreTrainedModel:()=>y.VitsPreTrainedModel,VitsTokenizer:()=>rr.VitsTokenizer,Wav2Vec2BertForCTC:()=>y.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>y.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>y.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>y.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>rr.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>Yt.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>y.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>y.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>y.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>y.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>y.Wav2Vec2PreTrainedModel,Wav2Vec2ProcessorWithLM:()=>Yt.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>y.WavLMForAudioFrameClassification,WavLMForCTC:()=>y.WavLMForCTC,WavLMForSequenceClassification:()=>y.WavLMForSequenceClassification,WavLMForXVector:()=>y.WavLMForXVector,WavLMModel:()=>y.WavLMModel,WavLMPreTrainedModel:()=>y.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>Yt.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>y.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>y.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>Yt.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>y.WhisperForConditionalGeneration,WhisperModel:()=>y.WhisperModel,WhisperPreTrainedModel:()=>y.WhisperPreTrainedModel,WhisperProcessor:()=>Yt.WhisperProcessor,WhisperTextStreamer:()=>Hc.WhisperTextStreamer,WhisperTokenizer:()=>rr.WhisperTokenizer,XLMForQuestionAnswering:()=>y.XLMForQuestionAnswering,XLMForSequenceClassification:()=>y.XLMForSequenceClassification,XLMForTokenClassification:()=>y.XLMForTokenClassification,XLMModel:()=>y.XLMModel,XLMPreTrainedModel:()=>y.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>y.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>y.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>y.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>y.XLMRobertaForTokenClassification,XLMRobertaModel:()=>y.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>y.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>rr.XLMRobertaTokenizer,XLMTokenizer:()=>rr.XLMTokenizer,XLMWithLMHeadModel:()=>y.XLMWithLMHeadModel,XVectorOutput:()=>y.XVectorOutput,YolosFeatureExtractor:()=>Yt.YolosFeatureExtractor,YolosForObjectDetection:()=>y.YolosForObjectDetection,YolosModel:()=>y.YolosModel,YolosObjectDetectionOutput:()=>y.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>y.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>Qr.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>Qr.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>Qr.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>Qr.ZeroShotObjectDetectionPipeline,bankers_round:()=>An.bankers_round,cat:()=>ln.cat,cos_sim:()=>An.cos_sim,dot:()=>An.dot,dynamic_time_warping:()=>An.dynamic_time_warping,env:()=>Zm.env,full:()=>ln.full,full_like:()=>ln.full_like,getKeyValueShapes:()=>qc.getKeyValueShapes,hamming:()=>Ya.hamming,hanning:()=>Ya.hanning,interpolate:()=>ln.interpolate,interpolate_4d:()=>ln.interpolate_4d,interpolate_data:()=>An.interpolate_data,is_chinese_char:()=>rr.is_chinese_char,layer_norm:()=>ln.layer_norm,log_softmax:()=>An.log_softmax,magnitude:()=>An.magnitude,matmul:()=>ln.matmul,max:()=>An.max,mean:()=>ln.mean,mean_pooling:()=>ln.mean_pooling,medianFilter:()=>An.medianFilter,mel_filter_bank:()=>Ya.mel_filter_bank,min:()=>An.min,ones:()=>ln.ones,ones_like:()=>ln.ones_like,permute:()=>ln.permute,permute_data:()=>An.permute_data,pipeline:()=>Qr.pipeline,quantize_embeddings:()=>ln.quantize_embeddings,read_audio:()=>Ya.read_audio,rfft:()=>ln.rfft,round:()=>An.round,softmax:()=>An.softmax,spectrogram:()=>Ya.spectrogram,stack:()=>ln.stack,std_mean:()=>ln.std_mean,topk:()=>ln.topk,window_function:()=>Ya.window_function,zeros:()=>ln.zeros,zeros_like:()=>ln.zeros_like});var Zm=Yr("./src/env.js"),Qr=Yr("./src/pipelines.js"),y=Yr("./src/models.js"),rr=Yr("./src/tokenizers.js"),Yt=Yr("./src/processors.js"),qc=Yr("./src/configs.js"),Ya=Yr("./src/utils/audio.js"),Jm=Yr("./src/utils/image.js"),ln=Yr("./src/utils/tensor.js"),An=Yr("./src/utils/maths.js"),Hc=Yr("./src/generation/streamers.js"),ld=Yr("./src/generation/stopping_criteria.js");c.ASTFeatureExtractor;c.ASTForAudioClassification;c.ASTModel;c.ASTPreTrainedModel;c.AlbertForMaskedLM;c.AlbertForQuestionAnswering;c.AlbertForSequenceClassification;c.AlbertModel;c.AlbertPreTrainedModel;c.AlbertTokenizer;c.AudioClassificationPipeline;c.AutoConfig;var t_=c.AutoModel;c.AutoModelForAudioClassification;c.AutoModelForAudioFrameClassification;c.AutoModelForCTC;c.AutoModelForCausalLM;c.AutoModelForDepthEstimation;c.AutoModelForDocumentQuestionAnswering;c.AutoModelForImageClassification;c.AutoModelForImageFeatureExtraction;c.AutoModelForImageMatting;c.AutoModelForImageSegmentation;c.AutoModelForImageToImage;c.AutoModelForMaskGeneration;c.AutoModelForMaskedLM;c.AutoModelForNormalEstimation;c.AutoModelForObjectDetection;c.AutoModelForQuestionAnswering;c.AutoModelForSemanticSegmentation;c.AutoModelForSeq2SeqLM;c.AutoModelForSequenceClassification;c.AutoModelForSpeechSeq2Seq;c.AutoModelForTextToSpectrogram;c.AutoModelForTextToWaveform;c.AutoModelForTokenClassification;c.AutoModelForUniversalSegmentation;c.AutoModelForVision2Seq;c.AutoModelForXVector;c.AutoModelForZeroShotObjectDetection;var r_=c.AutoProcessor;c.AutoTokenizer;c.AutomaticSpeechRecognitionPipeline;c.BartForConditionalGeneration;c.BartForSequenceClassification;c.BartModel;c.BartPretrainedModel;c.BartTokenizer;c.BaseModelOutput;c.BaseStreamer;c.BeitFeatureExtractor;c.BeitForImageClassification;c.BeitModel;c.BeitPreTrainedModel;c.BertForMaskedLM;c.BertForQuestionAnswering;c.BertForSequenceClassification;c.BertForTokenClassification;c.BertModel;c.BertPreTrainedModel;c.BertTokenizer;c.BitImageProcessor;c.BlenderbotForConditionalGeneration;c.BlenderbotModel;c.BlenderbotPreTrainedModel;c.BlenderbotSmallForConditionalGeneration;c.BlenderbotSmallModel;c.BlenderbotSmallPreTrainedModel;c.BlenderbotSmallTokenizer;c.BlenderbotTokenizer;c.BloomForCausalLM;c.BloomModel;c.BloomPreTrainedModel;c.BloomTokenizer;c.CLIPFeatureExtractor;c.CLIPImageProcessor;c.CLIPModel;c.CLIPPreTrainedModel;c.CLIPSegForImageSegmentation;c.CLIPSegModel;c.CLIPSegPreTrainedModel;c.CLIPTextModel;c.CLIPTextModelWithProjection;c.CLIPTokenizer;c.CLIPVisionModel;c.CLIPVisionModelWithProjection;c.CamembertForMaskedLM;c.CamembertForQuestionAnswering;c.CamembertForSequenceClassification;c.CamembertForTokenClassification;c.CamembertModel;c.CamembertPreTrainedModel;c.CamembertTokenizer;c.CausalLMOutput;c.CausalLMOutputWithPast;c.ChineseCLIPFeatureExtractor;c.ChineseCLIPModel;c.ChineseCLIPPreTrainedModel;c.ClapAudioModelWithProjection;c.ClapFeatureExtractor;c.ClapModel;c.ClapPreTrainedModel;c.ClapTextModelWithProjection;c.CodeGenForCausalLM;c.CodeGenModel;c.CodeGenPreTrainedModel;c.CodeGenTokenizer;c.CodeLlamaTokenizer;c.CohereForCausalLM;c.CohereModel;c.CoherePreTrainedModel;c.CohereTokenizer;c.ConvBertForMaskedLM;c.ConvBertForQuestionAnswering;c.ConvBertForSequenceClassification;c.ConvBertForTokenClassification;c.ConvBertModel;c.ConvBertPreTrainedModel;c.ConvBertTokenizer;c.ConvNextFeatureExtractor;c.ConvNextForImageClassification;c.ConvNextImageProcessor;c.ConvNextModel;c.ConvNextPreTrainedModel;c.ConvNextV2ForImageClassification;c.ConvNextV2Model;c.ConvNextV2PreTrainedModel;c.DPTFeatureExtractor;c.DPTForDepthEstimation;c.DPTImageProcessor;c.DPTModel;c.DPTPreTrainedModel;c.DebertaForMaskedLM;c.DebertaForQuestionAnswering;c.DebertaForSequenceClassification;c.DebertaForTokenClassification;c.DebertaModel;c.DebertaPreTrainedModel;c.DebertaTokenizer;c.DebertaV2ForMaskedLM;c.DebertaV2ForQuestionAnswering;c.DebertaV2ForSequenceClassification;c.DebertaV2ForTokenClassification;c.DebertaV2Model;c.DebertaV2PreTrainedModel;c.DebertaV2Tokenizer;c.DecisionTransformerModel;c.DecisionTransformerPreTrainedModel;c.DeiTFeatureExtractor;c.DeiTForImageClassification;c.DeiTModel;c.DeiTPreTrainedModel;c.DepthAnythingForDepthEstimation;c.DepthAnythingPreTrainedModel;c.DepthEstimationPipeline;c.DetrFeatureExtractor;c.DetrForObjectDetection;c.DetrForSegmentation;c.DetrModel;c.DetrObjectDetectionOutput;c.DetrPreTrainedModel;c.DetrSegmentationOutput;c.Dinov2ForImageClassification;c.Dinov2Model;c.Dinov2PreTrainedModel;c.DistilBertForMaskedLM;c.DistilBertForQuestionAnswering;c.DistilBertForSequenceClassification;c.DistilBertForTokenClassification;c.DistilBertModel;c.DistilBertPreTrainedModel;c.DistilBertTokenizer;c.DocumentQuestionAnsweringPipeline;c.DonutFeatureExtractor;c.DonutSwinModel;c.DonutSwinPreTrainedModel;c.EfficientNetForImageClassification;c.EfficientNetImageProcessor;c.EfficientNetModel;c.EfficientNetPreTrainedModel;c.ElectraForMaskedLM;c.ElectraForQuestionAnswering;c.ElectraForSequenceClassification;c.ElectraForTokenClassification;c.ElectraModel;c.ElectraPreTrainedModel;c.ElectraTokenizer;c.EosTokenCriteria;c.EsmForMaskedLM;c.EsmForSequenceClassification;c.EsmForTokenClassification;c.EsmModel;c.EsmPreTrainedModel;c.EsmTokenizer;c.FFT;c.FalconForCausalLM;c.FalconModel;c.FalconPreTrainedModel;c.FalconTokenizer;c.FastViTForImageClassification;c.FastViTModel;c.FastViTPreTrainedModel;c.FeatureExtractionPipeline;c.FeatureExtractor;c.FillMaskPipeline;c.Florence2ForConditionalGeneration;c.Florence2PreTrainedModel;c.Florence2Processor;c.GLPNFeatureExtractor;c.GLPNForDepthEstimation;c.GLPNModel;c.GLPNPreTrainedModel;c.GPT2LMHeadModel;c.GPT2Model;c.GPT2PreTrainedModel;c.GPT2Tokenizer;c.GPTBigCodeForCausalLM;c.GPTBigCodeModel;c.GPTBigCodePreTrainedModel;c.GPTJForCausalLM;c.GPTJModel;c.GPTJPreTrainedModel;c.GPTNeoForCausalLM;c.GPTNeoModel;c.GPTNeoPreTrainedModel;c.GPTNeoXForCausalLM;c.GPTNeoXModel;c.GPTNeoXPreTrainedModel;c.GPTNeoXTokenizer;c.Gemma2ForCausalLM;c.Gemma2Model;c.Gemma2PreTrainedModel;c.GemmaForCausalLM;c.GemmaModel;c.GemmaPreTrainedModel;c.GemmaTokenizer;c.Grok1Tokenizer;c.GroupViTModel;c.GroupViTPreTrainedModel;c.HerbertTokenizer;c.HieraForImageClassification;c.HieraModel;c.HieraPreTrainedModel;c.HubertForCTC;c.HubertForSequenceClassification;c.HubertModel;c.HubertPreTrainedModel;c.ImageClassificationPipeline;c.ImageFeatureExtractionPipeline;c.ImageFeatureExtractor;c.ImageMattingOutput;c.ImageSegmentationPipeline;c.ImageToImagePipeline;c.ImageToTextPipeline;c.InterruptableStoppingCriteria;c.JAISLMHeadModel;c.JAISModel;c.JAISPreTrainedModel;c.LlamaForCausalLM;c.LlamaModel;c.LlamaPreTrainedModel;c.LlamaTokenizer;c.LlavaForConditionalGeneration;c.LlavaPreTrainedModel;c.LongT5ForConditionalGeneration;c.LongT5Model;c.LongT5PreTrainedModel;c.M2M100ForConditionalGeneration;c.M2M100Model;c.M2M100PreTrainedModel;c.M2M100Tokenizer;c.MBart50Tokenizer;c.MBartForCausalLM;c.MBartForConditionalGeneration;c.MBartForSequenceClassification;c.MBartModel;c.MBartPreTrainedModel;c.MBartTokenizer;c.MPNetForMaskedLM;c.MPNetForQuestionAnswering;c.MPNetForSequenceClassification;c.MPNetForTokenClassification;c.MPNetModel;c.MPNetPreTrainedModel;c.MPNetTokenizer;c.MT5ForConditionalGeneration;c.MT5Model;c.MT5PreTrainedModel;c.MarianMTModel;c.MarianModel;c.MarianPreTrainedModel;c.MarianTokenizer;c.MaskFormerFeatureExtractor;c.MaskFormerForInstanceSegmentation;c.MaskFormerModel;c.MaskFormerPreTrainedModel;c.MaskedLMOutput;c.MaxLengthCriteria;c.MistralForCausalLM;c.MistralModel;c.MistralPreTrainedModel;c.MobileBertForMaskedLM;c.MobileBertForQuestionAnswering;c.MobileBertForSequenceClassification;c.MobileBertModel;c.MobileBertPreTrainedModel;c.MobileBertTokenizer;c.MobileNetV1FeatureExtractor;c.MobileNetV1ForImageClassification;c.MobileNetV1Model;c.MobileNetV1PreTrainedModel;c.MobileNetV2FeatureExtractor;c.MobileNetV2ForImageClassification;c.MobileNetV2Model;c.MobileNetV2PreTrainedModel;c.MobileNetV3FeatureExtractor;c.MobileNetV3ForImageClassification;c.MobileNetV3Model;c.MobileNetV3PreTrainedModel;c.MobileNetV4FeatureExtractor;c.MobileNetV4ForImageClassification;c.MobileNetV4Model;c.MobileNetV4PreTrainedModel;c.MobileViTFeatureExtractor;c.MobileViTForImageClassification;c.MobileViTImageProcessor;c.MobileViTModel;c.MobileViTPreTrainedModel;c.MobileViTV2ForImageClassification;c.MobileViTV2Model;c.MobileViTV2PreTrainedModel;c.ModelOutput;c.Moondream1ForConditionalGeneration;c.MptForCausalLM;c.MptModel;c.MptPreTrainedModel;c.MusicgenForCausalLM;c.MusicgenForConditionalGeneration;c.MusicgenModel;c.MusicgenPreTrainedModel;c.NllbTokenizer;c.NomicBertModel;c.NomicBertPreTrainedModel;c.NougatImageProcessor;c.NougatTokenizer;c.OPTForCausalLM;c.OPTModel;c.OPTPreTrainedModel;c.ObjectDetectionPipeline;c.OpenELMForCausalLM;c.OpenELMModel;c.OpenELMPreTrainedModel;c.OwlViTFeatureExtractor;c.OwlViTForObjectDetection;c.OwlViTModel;c.OwlViTPreTrainedModel;c.OwlViTProcessor;c.Owlv2ForObjectDetection;c.Owlv2ImageProcessor;c.Owlv2Model;c.Owlv2PreTrainedModel;c.Phi3ForCausalLM;c.Phi3Model;c.Phi3PreTrainedModel;c.PhiForCausalLM;c.PhiModel;c.PhiPreTrainedModel;c.Pipeline;c.PreTrainedModel;c.PreTrainedTokenizer;c.PretrainedConfig;c.PretrainedMixin;c.Processor;c.PvtForImageClassification;c.PvtImageProcessor;c.PvtModel;c.PvtPreTrainedModel;c.PyAnnoteFeatureExtractor;c.PyAnnoteForAudioFrameClassification;c.PyAnnoteModel;c.PyAnnotePreTrainedModel;c.PyAnnoteProcessor;c.QuestionAnsweringModelOutput;c.QuestionAnsweringPipeline;c.Qwen2ForCausalLM;c.Qwen2Model;c.Qwen2PreTrainedModel;c.Qwen2Tokenizer;c.RTDetrForObjectDetection;c.RTDetrImageProcessor;c.RTDetrModel;c.RTDetrObjectDetectionOutput;c.RTDetrPreTrainedModel;var n_=c.RawImage;c.ResNetForImageClassification;c.ResNetModel;c.ResNetPreTrainedModel;c.RoFormerForMaskedLM;c.RoFormerForQuestionAnswering;c.RoFormerForSequenceClassification;c.RoFormerForTokenClassification;c.RoFormerModel;c.RoFormerPreTrainedModel;c.RoFormerTokenizer;c.RobertaForMaskedLM;c.RobertaForQuestionAnswering;c.RobertaForSequenceClassification;c.RobertaForTokenClassification;c.RobertaModel;c.RobertaPreTrainedModel;c.RobertaTokenizer;c.SamImageProcessor;c.SamImageSegmentationOutput;c.SamModel;c.SamPreTrainedModel;c.SamProcessor;c.SapiensFeatureExtractor;c.SapiensForDepthEstimation;c.SapiensForNormalEstimation;c.SapiensForSemanticSegmentation;c.SapiensPreTrainedModel;c.SeamlessM4TFeatureExtractor;c.SegformerFeatureExtractor;c.SegformerForImageClassification;c.SegformerForSemanticSegmentation;c.SegformerModel;c.SegformerPreTrainedModel;c.Seq2SeqLMOutput;c.SequenceClassifierOutput;c.SiglipImageProcessor;c.SiglipModel;c.SiglipPreTrainedModel;c.SiglipTextModel;c.SiglipTokenizer;c.SiglipVisionModel;c.SpeechT5FeatureExtractor;c.SpeechT5ForSpeechToText;c.SpeechT5ForTextToSpeech;c.SpeechT5HifiGan;c.SpeechT5Model;c.SpeechT5PreTrainedModel;c.SpeechT5Processor;c.SpeechT5Tokenizer;c.SqueezeBertForMaskedLM;c.SqueezeBertForQuestionAnswering;c.SqueezeBertForSequenceClassification;c.SqueezeBertModel;c.SqueezeBertPreTrainedModel;c.SqueezeBertTokenizer;c.StableLmForCausalLM;c.StableLmModel;c.StableLmPreTrainedModel;c.Starcoder2ForCausalLM;c.Starcoder2Model;c.Starcoder2PreTrainedModel;c.StoppingCriteria;c.StoppingCriteriaList;c.SummarizationPipeline;c.Swin2SRForImageSuperResolution;c.Swin2SRImageProcessor;c.Swin2SRModel;c.Swin2SRPreTrainedModel;c.SwinForImageClassification;c.SwinModel;c.SwinPreTrainedModel;c.T5ForConditionalGeneration;c.T5Model;c.T5PreTrainedModel;c.T5Tokenizer;c.TableTransformerForObjectDetection;c.TableTransformerModel;c.TableTransformerObjectDetectionOutput;c.TableTransformerPreTrainedModel;c.Tensor;c.Text2TextGenerationPipeline;c.TextClassificationPipeline;c.TextGenerationPipeline;c.TextStreamer;c.TextToAudioPipeline;c.TokenClassificationPipeline;c.TokenClassifierOutput;c.TokenizerModel;c.TrOCRForCausalLM;c.TrOCRPreTrainedModel;c.TranslationPipeline;c.UniSpeechForCTC;c.UniSpeechForSequenceClassification;c.UniSpeechModel;c.UniSpeechPreTrainedModel;c.UniSpeechSatForAudioFrameClassification;c.UniSpeechSatForCTC;c.UniSpeechSatForSequenceClassification;c.UniSpeechSatModel;c.UniSpeechSatPreTrainedModel;c.ViTFeatureExtractor;c.ViTForImageClassification;c.ViTImageProcessor;c.ViTMAEModel;c.ViTMAEPreTrainedModel;c.ViTMSNForImageClassification;c.ViTMSNModel;c.ViTMSNPreTrainedModel;c.ViTModel;c.ViTPreTrainedModel;c.VisionEncoderDecoderModel;c.VitMatteForImageMatting;c.VitMatteImageProcessor;c.VitMattePreTrainedModel;c.VitsModel;c.VitsModelOutput;c.VitsPreTrainedModel;c.VitsTokenizer;c.Wav2Vec2BertForCTC;c.Wav2Vec2BertForSequenceClassification;c.Wav2Vec2BertModel;c.Wav2Vec2BertPreTrainedModel;c.Wav2Vec2CTCTokenizer;c.Wav2Vec2FeatureExtractor;c.Wav2Vec2ForAudioFrameClassification;c.Wav2Vec2ForCTC;c.Wav2Vec2ForSequenceClassification;c.Wav2Vec2Model;c.Wav2Vec2PreTrainedModel;c.Wav2Vec2ProcessorWithLM;c.WavLMForAudioFrameClassification;c.WavLMForCTC;c.WavLMForSequenceClassification;c.WavLMForXVector;c.WavLMModel;c.WavLMPreTrainedModel;c.WeSpeakerFeatureExtractor;c.WeSpeakerResNetModel;c.WeSpeakerResNetPreTrainedModel;c.WhisperFeatureExtractor;c.WhisperForConditionalGeneration;c.WhisperModel;c.WhisperPreTrainedModel;c.WhisperProcessor;c.WhisperTextStreamer;c.WhisperTokenizer;c.XLMForQuestionAnswering;c.XLMForSequenceClassification;c.XLMForTokenClassification;c.XLMModel;c.XLMPreTrainedModel;c.XLMRobertaForMaskedLM;c.XLMRobertaForQuestionAnswering;c.XLMRobertaForSequenceClassification;c.XLMRobertaForTokenClassification;c.XLMRobertaModel;c.XLMRobertaPreTrainedModel;c.XLMRobertaTokenizer;c.XLMTokenizer;c.XLMWithLMHeadModel;c.XVectorOutput;c.YolosFeatureExtractor;c.YolosForObjectDetection;c.YolosModel;c.YolosObjectDetectionOutput;c.YolosPreTrainedModel;c.ZeroShotAudioClassificationPipeline;c.ZeroShotClassificationPipeline;c.ZeroShotImageClassificationPipeline;c.ZeroShotObjectDetectionPipeline;c.bankers_round;c.cat;c.cos_sim;c.dot;c.dynamic_time_warping;var s_=c.env;c.full;c.full_like;c.getKeyValueShapes;c.hamming;c.hanning;c.interpolate;c.interpolate_4d;c.interpolate_data;c.is_chinese_char;c.layer_norm;c.log_softmax;c.magnitude;c.matmul;c.max;c.mean;c.mean_pooling;c.medianFilter;c.mel_filter_bank;c.min;c.ones;c.ones_like;c.permute;c.permute_data;c.pipeline;c.quantize_embeddings;c.read_audio;c.rfft;c.round;c.softmax;c.spectrogram;c.stack;c.std_mean;c.topk;c.window_function;c.zeros;c.zeros_like;export{s_ as _,t_ as a,r_ as b,n_ as c};
//# sourceMappingURL=transformers-bosqbixw.js.map
